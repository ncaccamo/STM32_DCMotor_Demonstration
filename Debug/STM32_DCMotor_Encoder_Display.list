
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001758  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001938  08001938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a20  08001a20  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001a20  08001a20  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a20  08001a20  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002526  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000090c  00000000  00000000  000225ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00022ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  000230b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000158ec  00000000  00000000  00023210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000031ac  00000000  00000000  00038afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075ca2  00000000  00000000  0003bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b194a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d5c  00000000  00000000  000b199c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08001920 	.word	0x08001920

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08001920 	.word	0x08001920

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 80002c4:	4b49      	ldr	r3, [pc, #292]	; (80003ec <sysClockConfig+0x12c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a48      	ldr	r2, [pc, #288]	; (80003ec <sysClockConfig+0x12c>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 80002d0:	4b47      	ldr	r3, [pc, #284]	; (80003f0 <sysClockConfig+0x130>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <sysClockConfig+0x130>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 80002dc:	bf00      	nop
 80002de:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <sysClockConfig+0x130>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <sysClockConfig+0x1e>

	//RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_PWREN_Pos);


	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 80002ea:	4b41      	ldr	r3, [pc, #260]	; (80003f0 <sysClockConfig+0x130>)
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <sysClockConfig+0x130>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 80002f2:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <sysClockConfig+0x130>)
 80002f4:	4a3e      	ldr	r2, [pc, #248]	; (80003f0 <sysClockConfig+0x130>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 80002fa:	4b3d      	ldr	r3, [pc, #244]	; (80003f0 <sysClockConfig+0x130>)
 80002fc:	4a3c      	ldr	r2, [pc, #240]	; (80003f0 <sysClockConfig+0x130>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 8000302:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <sysClockConfig+0x130>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a3a      	ldr	r2, [pc, #232]	; (80003f0 <sysClockConfig+0x130>)
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 800030e:	4b38      	ldr	r3, [pc, #224]	; (80003f0 <sysClockConfig+0x130>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a37      	ldr	r2, [pc, #220]	; (80003f0 <sysClockConfig+0x130>)
 8000314:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000318:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 800031a:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <sysClockConfig+0x130>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <sysClockConfig+0x130>)
 8000320:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000324:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 8000326:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <sysClockConfig+0x130>)
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <sysClockConfig+0x130>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <sysClockConfig+0x130>)
 8000330:	4a2f      	ldr	r2, [pc, #188]	; (80003f0 <sysClockConfig+0x130>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <sysClockConfig+0x130>)
 8000338:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <sysClockConfig+0x130>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <sysClockConfig+0x130>)
 8000340:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <sysClockConfig+0x130>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 8000346:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <sysClockConfig+0x130>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a29      	ldr	r2, [pc, #164]	; (80003f0 <sysClockConfig+0x130>)
 800034c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000350:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <sysClockConfig+0x130>)
 8000354:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <sysClockConfig+0x130>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <sysClockConfig+0x130>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4a24      	ldr	r2, [pc, #144]	; (80003f0 <sysClockConfig+0x130>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <sysClockConfig+0x130>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <sysClockConfig+0x130>)
 800036c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000370:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 8000372:	bf00      	nop
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <sysClockConfig+0x130>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <sysClockConfig+0x130>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a1a      	ldr	r2, [pc, #104]	; (80003f0 <sysClockConfig+0x130>)
 8000386:	f043 0303 	orr.w	r3, r3, #3
 800038a:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 800038c:	bf00      	nop
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <sysClockConfig+0x130>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f003 030c 	and.w	r3, r3, #12
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <sysClockConfig+0x130>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <sysClockConfig+0x130>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <sysClockConfig+0x130>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <sysClockConfig+0x130>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <sysClockConfig+0x130>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <sysClockConfig+0x130>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <sysClockConfig+0x130>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <sysClockConfig+0x130>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM4
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <sysClockConfig+0x130>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <sysClockConfig+0x130>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6593      	str	r3, [r2, #88]	; 0x58

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <sysClockConfig+0x130>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <sysClockConfig+0x130>)
 80003dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003e0:	6613      	str	r3, [r2, #96]	; 0x60


}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40022000 	.word	0x40022000
 80003f0:	40021000 	.word	0x40021000

080003f4 <gpioInit>:

#include <gpio.h>
#include <stm32g431xx.h>


void gpioInit(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x00FFFFFF);
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000402:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000406:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFFFFF00F);
 8000408:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <gpioInit+0xec>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a34      	ldr	r2, [pc, #208]	; (80004e0 <gpioInit+0xec>)
 800040e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000412:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <gpioInit+0xf0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <gpioInit+0xf0>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]

	//set PA11, PA12 to alternate function mode
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 800041e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800042c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 800042e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043c:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 to alternate function mode, set PA6 to output
	//GPIOA->MODER |= (0x2 << GPIO_MODER_MODE4_Pos);	//not needed because of software NSS control
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 800043e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800044c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);
 800044e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 800045e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800046c:	6013      	str	r3, [r2, #0]

	//set PA6, PC10, PC12 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);
 800046e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE10_Pos);
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <gpioInit+0xf0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <gpioInit+0xf0>)
 8000484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000488:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE12_Pos);
 800048a:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <gpioInit+0xf0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <gpioInit+0xf0>)
 8000490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000494:	6013      	str	r3, [r2, #0]

	//pull-up pull-down register for inputs? PUPDR
	//PC2,PC3,PC13,PC14,PF0

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 8000496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a0:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80004a4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 80004a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b0:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80004b4:	6253      	str	r3, [r2, #36]	; 0x24

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	//GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS  //not needed because of software NSS control
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 80004b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c0:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80004c4:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 80004c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d0:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80004d4:	6213      	str	r3, [r2, #32]

}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48000400 	.word	0x48000400
 80004e4:	48000800 	.word	0x48000800

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <interruptInit>:
3. Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
EXTI so that an interrupt coming from one of the EXTI lines can be correctly
acknowledged.
**/

void interruptInit(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c
//EXTI12, EXTI Line12 Interrupt, SYSCFG_EXTICR4 - PB12 (Rotary Encoder SW)
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI12_Pos);
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <interruptInit+0x50>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <interruptInit+0x50>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6153      	str	r3, [r2, #20]
//EXTI0, EXTI Line0 Interrupt, SYSCFG_EXTICR1 - PF0 (Rotary Encoder SW)
//SYSCFG->EXTICR[0] |= (0x05 << SYSCFG_EXTICR1_EXTI0_Pos);

//set interrupts to maskable (reset value is 0 anyway)
EXTI->IMR1 |= (0x00 << EXTI_IMR1_IM12_Pos);
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <interruptInit+0x54>)
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <interruptInit+0x54>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6013      	str	r3, [r2, #0]
//EXTI->IMR1 |= (0x00 << EXTI_IMR1_IM0_Pos);

//set interrupts to trigger on rising edge
EXTI->RTSR1 |= (0x01 << EXTI_RTSR1_RT12_Pos);
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <interruptInit+0x54>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <interruptInit+0x54>)
 8000596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059a:	6093      	str	r3, [r2, #8]
//EXTI->RTSR1 |= (0x01 << EXTI_RTSR1_RT0_Pos);

//set interrupts to trigger on falling edge
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT12_Pos);
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <interruptInit+0x54>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <interruptInit+0x54>)
 80005a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a6:	60d3      	str	r3, [r2, #12]
//EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT0_Pos);


NVIC_SetPriority(TIM4_IRQn, 0);
 80005a8:	2100      	movs	r1, #0
 80005aa:	201e      	movs	r0, #30
 80005ac:	f7ff ffba 	bl	8000524 <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM4_IRQn);
 80005b0:	201e      	movs	r0, #30
 80005b2:	f7ff ff99 	bl	80004e8 <__NVIC_EnableIRQ>

NVIC_SetPriority(EXTI15_10_IRQn, 0);
 80005b6:	2100      	movs	r1, #0
 80005b8:	2028      	movs	r0, #40	; 0x28
 80005ba:	f7ff ffb3 	bl	8000524 <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005be:	2028      	movs	r0, #40	; 0x28
 80005c0:	f7ff ff92 	bl	80004e8 <__NVIC_EnableIRQ>


}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010000 	.word	0x40010000
 80005cc:	40010400 	.word	0x40010400

080005d0 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	printf("encoder interrupt");
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <TIM4_IRQHandler+0x18>)
 80005d6:	f000 f99f 	bl	8000918 <iprintf>

	TIM4->SR = ~TIM_SR_UIF;		    //timer interrupts cleared by writing zero
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <TIM4_IRQHandler+0x1c>)
 80005dc:	f06f 0201 	mvn.w	r2, #1
 80005e0:	611a      	str	r2, [r3, #16]

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08001938 	.word	0x08001938
 80005ec:	40000800 	.word	0x40000800

080005f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d013      	beq.n	8000630 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000610:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00b      	beq.n	8000630 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000618:	e000      	b.n	800061c <ITM_SendChar+0x2c>
    {
      __NOP();
 800061a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800061c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000626:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	sysClockConfig();
 8000646:	f7ff fe3b 	bl	80002c0 <sysClockConfig>
	gpioInit();
 800064a:	f7ff fed3 	bl	80003f4 <gpioInit>
	interruptInit();
 800064e:	f7ff ff93 	bl	8000578 <interruptInit>
	TIM4Init();
 8000652:	f000 f8cd 	bl	80007f0 <TIM4Init>
	printf("Initialization done\n");
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <main+0x34>)
 8000658:	f000 f9e4 	bl	8000a24 <puts>

	int8_t count = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]

	while(1){
		count = TIM4->CNT;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <main+0x38>)
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	71fb      	strb	r3, [r7, #7]
		printf("Timer Count: %d\n", count);
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	4619      	mov	r1, r3
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <main+0x3c>)
 800066e:	f000 f953 	bl	8000918 <iprintf>
		count = TIM4->CNT;
 8000672:	e7f5      	b.n	8000660 <main+0x20>
 8000674:	08001960 	.word	0x08001960
 8000678:	40000800 	.word	0x40000800
 800067c:	08001974 	.word	0x08001974

08000680 <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  int i=0;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e009      	b.n	80006aa <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	60ba      	str	r2, [r7, #8]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffa6 	bl	80005f0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	dbf1      	blt.n	8000696 <_write+0x16>
  return len;
 80006b2:	687b      	ldr	r3, [r7, #4]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e00a      	b.n	80006e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ce:	f3af 8000 	nop.w
 80006d2:	4601      	mov	r1, r0
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	60ba      	str	r2, [r7, #8]
 80006da:	b2ca      	uxtb	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf0      	blt.n	80006ce <_read+0x12>
  }

  return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071e:	605a      	str	r2, [r3, #4]
  return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <_isatty>:

int _isatty(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f000 f890 	bl	80008b4 <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20008000 	.word	0x20008000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000080 	.word	0x20000080
 80007c8:	20000098 	.word	0x20000098

080007cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <TIM4Init>:

#include <timer.h>
#include <stm32g431xx.h>


void TIM4Init(){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);      //both inputs are active on both rising and falling edges
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <TIM4Init+0x6c>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <TIM4Init+0x6c>)
 80007fa:	f043 0303 	orr.w	r3, r3, #3
 80007fe:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <TIM4Init+0x6c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <TIM4Init+0x6c>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <TIM4Init+0x6c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <TIM4Init+0x6c>)
 8000812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000816:	6193      	str	r3, [r2, #24]
	TIM4->CCER |= (0x00 << TIM_CCER_CC1P_Pos);     //tim_ti1fp1 noninverted
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <TIM4Init+0x6c>)
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <TIM4Init+0x6c>)
 800081c:	6a1b      	ldr	r3, [r3, #32]
 800081e:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= (0x00 << TIM_CCER_CC1NP_Pos);
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <TIM4Init+0x6c>)
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <TIM4Init+0x6c>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= (0x00 << TIM_CCER_CC2P_Pos);     //tim_ti2fp2 noninverted
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <TIM4Init+0x6c>)
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <TIM4Init+0x6c>)
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= (0x00 << TIM_CCER_CC2NP_Pos);
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <TIM4Init+0x6c>)
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <TIM4Init+0x6c>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	6213      	str	r3, [r2, #32]
	TIM4->PSC |= (0x00 << TIM_PSC_PSC_Pos);	       //prescalar set to 0
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <TIM4Init+0x6c>)
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <TIM4Init+0x6c>)
 800083c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083e:	6293      	str	r3, [r2, #40]	; 0x28

	TIM4->CNT = 0;								   //start count at 0
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <TIM4Init+0x6c>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <TIM4Init+0x6c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <TIM4Init+0x6c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]

}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40000800 	.word	0x40000800

08000860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000864:	f7ff ffb2 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088e:	f000 f817 	bl	80008c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fed5 	bl	8000640 <main>

08000896 <LoopForever>:

LoopForever:
  b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008a4:	08001a28 	.word	0x08001a28
  ldr r2, =_sbss
 80008a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008ac:	20000094 	.word	0x20000094

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <__errno>:
 80008b4:	4b01      	ldr	r3, [pc, #4]	; (80008bc <__errno+0x8>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000

080008c0 <__libc_init_array>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	4d0d      	ldr	r5, [pc, #52]	; (80008f8 <__libc_init_array+0x38>)
 80008c4:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__libc_init_array+0x3c>)
 80008c6:	1b64      	subs	r4, r4, r5
 80008c8:	10a4      	asrs	r4, r4, #2
 80008ca:	2600      	movs	r6, #0
 80008cc:	42a6      	cmp	r6, r4
 80008ce:	d109      	bne.n	80008e4 <__libc_init_array+0x24>
 80008d0:	4d0b      	ldr	r5, [pc, #44]	; (8000900 <__libc_init_array+0x40>)
 80008d2:	4c0c      	ldr	r4, [pc, #48]	; (8000904 <__libc_init_array+0x44>)
 80008d4:	f001 f824 	bl	8001920 <_init>
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	10a4      	asrs	r4, r4, #2
 80008dc:	2600      	movs	r6, #0
 80008de:	42a6      	cmp	r6, r4
 80008e0:	d105      	bne.n	80008ee <__libc_init_array+0x2e>
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e8:	4798      	blx	r3
 80008ea:	3601      	adds	r6, #1
 80008ec:	e7ee      	b.n	80008cc <__libc_init_array+0xc>
 80008ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f2:	4798      	blx	r3
 80008f4:	3601      	adds	r6, #1
 80008f6:	e7f2      	b.n	80008de <__libc_init_array+0x1e>
 80008f8:	08001a20 	.word	0x08001a20
 80008fc:	08001a20 	.word	0x08001a20
 8000900:	08001a20 	.word	0x08001a20
 8000904:	08001a24 	.word	0x08001a24

08000908 <memset>:
 8000908:	4402      	add	r2, r0
 800090a:	4603      	mov	r3, r0
 800090c:	4293      	cmp	r3, r2
 800090e:	d100      	bne.n	8000912 <memset+0xa>
 8000910:	4770      	bx	lr
 8000912:	f803 1b01 	strb.w	r1, [r3], #1
 8000916:	e7f9      	b.n	800090c <memset+0x4>

08000918 <iprintf>:
 8000918:	b40f      	push	{r0, r1, r2, r3}
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <iprintf+0x2c>)
 800091c:	b513      	push	{r0, r1, r4, lr}
 800091e:	681c      	ldr	r4, [r3, #0]
 8000920:	b124      	cbz	r4, 800092c <iprintf+0x14>
 8000922:	69a3      	ldr	r3, [r4, #24]
 8000924:	b913      	cbnz	r3, 800092c <iprintf+0x14>
 8000926:	4620      	mov	r0, r4
 8000928:	f000 fa5e 	bl	8000de8 <__sinit>
 800092c:	ab05      	add	r3, sp, #20
 800092e:	9a04      	ldr	r2, [sp, #16]
 8000930:	68a1      	ldr	r1, [r4, #8]
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	4620      	mov	r0, r4
 8000936:	f000 fc67 	bl	8001208 <_vfiprintf_r>
 800093a:	b002      	add	sp, #8
 800093c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr
 8000944:	20000000 	.word	0x20000000

08000948 <_puts_r>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	460e      	mov	r6, r1
 800094c:	4605      	mov	r5, r0
 800094e:	b118      	cbz	r0, 8000958 <_puts_r+0x10>
 8000950:	6983      	ldr	r3, [r0, #24]
 8000952:	b90b      	cbnz	r3, 8000958 <_puts_r+0x10>
 8000954:	f000 fa48 	bl	8000de8 <__sinit>
 8000958:	69ab      	ldr	r3, [r5, #24]
 800095a:	68ac      	ldr	r4, [r5, #8]
 800095c:	b913      	cbnz	r3, 8000964 <_puts_r+0x1c>
 800095e:	4628      	mov	r0, r5
 8000960:	f000 fa42 	bl	8000de8 <__sinit>
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <_puts_r+0xd0>)
 8000966:	429c      	cmp	r4, r3
 8000968:	d120      	bne.n	80009ac <_puts_r+0x64>
 800096a:	686c      	ldr	r4, [r5, #4]
 800096c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800096e:	07db      	lsls	r3, r3, #31
 8000970:	d405      	bmi.n	800097e <_puts_r+0x36>
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	0598      	lsls	r0, r3, #22
 8000976:	d402      	bmi.n	800097e <_puts_r+0x36>
 8000978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800097a:	f000 fad3 	bl	8000f24 <__retarget_lock_acquire_recursive>
 800097e:	89a3      	ldrh	r3, [r4, #12]
 8000980:	0719      	lsls	r1, r3, #28
 8000982:	d51d      	bpl.n	80009c0 <_puts_r+0x78>
 8000984:	6923      	ldr	r3, [r4, #16]
 8000986:	b1db      	cbz	r3, 80009c0 <_puts_r+0x78>
 8000988:	3e01      	subs	r6, #1
 800098a:	68a3      	ldr	r3, [r4, #8]
 800098c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000990:	3b01      	subs	r3, #1
 8000992:	60a3      	str	r3, [r4, #8]
 8000994:	bb39      	cbnz	r1, 80009e6 <_puts_r+0x9e>
 8000996:	2b00      	cmp	r3, #0
 8000998:	da38      	bge.n	8000a0c <_puts_r+0xc4>
 800099a:	4622      	mov	r2, r4
 800099c:	210a      	movs	r1, #10
 800099e:	4628      	mov	r0, r5
 80009a0:	f000 f848 	bl	8000a34 <__swbuf_r>
 80009a4:	3001      	adds	r0, #1
 80009a6:	d011      	beq.n	80009cc <_puts_r+0x84>
 80009a8:	250a      	movs	r5, #10
 80009aa:	e011      	b.n	80009d0 <_puts_r+0x88>
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <_puts_r+0xd4>)
 80009ae:	429c      	cmp	r4, r3
 80009b0:	d101      	bne.n	80009b6 <_puts_r+0x6e>
 80009b2:	68ac      	ldr	r4, [r5, #8]
 80009b4:	e7da      	b.n	800096c <_puts_r+0x24>
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <_puts_r+0xd8>)
 80009b8:	429c      	cmp	r4, r3
 80009ba:	bf08      	it	eq
 80009bc:	68ec      	ldreq	r4, [r5, #12]
 80009be:	e7d5      	b.n	800096c <_puts_r+0x24>
 80009c0:	4621      	mov	r1, r4
 80009c2:	4628      	mov	r0, r5
 80009c4:	f000 f888 	bl	8000ad8 <__swsetup_r>
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d0dd      	beq.n	8000988 <_puts_r+0x40>
 80009cc:	f04f 35ff 	mov.w	r5, #4294967295
 80009d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009d2:	07da      	lsls	r2, r3, #31
 80009d4:	d405      	bmi.n	80009e2 <_puts_r+0x9a>
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	059b      	lsls	r3, r3, #22
 80009da:	d402      	bmi.n	80009e2 <_puts_r+0x9a>
 80009dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009de:	f000 faa2 	bl	8000f26 <__retarget_lock_release_recursive>
 80009e2:	4628      	mov	r0, r5
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da04      	bge.n	80009f4 <_puts_r+0xac>
 80009ea:	69a2      	ldr	r2, [r4, #24]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dc06      	bgt.n	80009fe <_puts_r+0xb6>
 80009f0:	290a      	cmp	r1, #10
 80009f2:	d004      	beq.n	80009fe <_puts_r+0xb6>
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	6022      	str	r2, [r4, #0]
 80009fa:	7019      	strb	r1, [r3, #0]
 80009fc:	e7c5      	b.n	800098a <_puts_r+0x42>
 80009fe:	4622      	mov	r2, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 f817 	bl	8000a34 <__swbuf_r>
 8000a06:	3001      	adds	r0, #1
 8000a08:	d1bf      	bne.n	800098a <_puts_r+0x42>
 8000a0a:	e7df      	b.n	80009cc <_puts_r+0x84>
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	250a      	movs	r5, #10
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	6022      	str	r2, [r4, #0]
 8000a14:	701d      	strb	r5, [r3, #0]
 8000a16:	e7db      	b.n	80009d0 <_puts_r+0x88>
 8000a18:	080019ac 	.word	0x080019ac
 8000a1c:	080019cc 	.word	0x080019cc
 8000a20:	0800198c 	.word	0x0800198c

08000a24 <puts>:
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <puts+0xc>)
 8000a26:	4601      	mov	r1, r0
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f7ff bf8d 	b.w	8000948 <_puts_r>
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <__swbuf_r>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	460e      	mov	r6, r1
 8000a38:	4614      	mov	r4, r2
 8000a3a:	4605      	mov	r5, r0
 8000a3c:	b118      	cbz	r0, 8000a46 <__swbuf_r+0x12>
 8000a3e:	6983      	ldr	r3, [r0, #24]
 8000a40:	b90b      	cbnz	r3, 8000a46 <__swbuf_r+0x12>
 8000a42:	f000 f9d1 	bl	8000de8 <__sinit>
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <__swbuf_r+0x98>)
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	d12b      	bne.n	8000aa4 <__swbuf_r+0x70>
 8000a4c:	686c      	ldr	r4, [r5, #4]
 8000a4e:	69a3      	ldr	r3, [r4, #24]
 8000a50:	60a3      	str	r3, [r4, #8]
 8000a52:	89a3      	ldrh	r3, [r4, #12]
 8000a54:	071a      	lsls	r2, r3, #28
 8000a56:	d52f      	bpl.n	8000ab8 <__swbuf_r+0x84>
 8000a58:	6923      	ldr	r3, [r4, #16]
 8000a5a:	b36b      	cbz	r3, 8000ab8 <__swbuf_r+0x84>
 8000a5c:	6923      	ldr	r3, [r4, #16]
 8000a5e:	6820      	ldr	r0, [r4, #0]
 8000a60:	1ac0      	subs	r0, r0, r3
 8000a62:	6963      	ldr	r3, [r4, #20]
 8000a64:	b2f6      	uxtb	r6, r6
 8000a66:	4283      	cmp	r3, r0
 8000a68:	4637      	mov	r7, r6
 8000a6a:	dc04      	bgt.n	8000a76 <__swbuf_r+0x42>
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f000 f926 	bl	8000cc0 <_fflush_r>
 8000a74:	bb30      	cbnz	r0, 8000ac4 <__swbuf_r+0x90>
 8000a76:	68a3      	ldr	r3, [r4, #8]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	60a3      	str	r3, [r4, #8]
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	6022      	str	r2, [r4, #0]
 8000a82:	701e      	strb	r6, [r3, #0]
 8000a84:	6963      	ldr	r3, [r4, #20]
 8000a86:	3001      	adds	r0, #1
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	d004      	beq.n	8000a96 <__swbuf_r+0x62>
 8000a8c:	89a3      	ldrh	r3, [r4, #12]
 8000a8e:	07db      	lsls	r3, r3, #31
 8000a90:	d506      	bpl.n	8000aa0 <__swbuf_r+0x6c>
 8000a92:	2e0a      	cmp	r6, #10
 8000a94:	d104      	bne.n	8000aa0 <__swbuf_r+0x6c>
 8000a96:	4621      	mov	r1, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 f911 	bl	8000cc0 <_fflush_r>
 8000a9e:	b988      	cbnz	r0, 8000ac4 <__swbuf_r+0x90>
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <__swbuf_r+0x9c>)
 8000aa6:	429c      	cmp	r4, r3
 8000aa8:	d101      	bne.n	8000aae <__swbuf_r+0x7a>
 8000aaa:	68ac      	ldr	r4, [r5, #8]
 8000aac:	e7cf      	b.n	8000a4e <__swbuf_r+0x1a>
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <__swbuf_r+0xa0>)
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	68ec      	ldreq	r4, [r5, #12]
 8000ab6:	e7ca      	b.n	8000a4e <__swbuf_r+0x1a>
 8000ab8:	4621      	mov	r1, r4
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 f80c 	bl	8000ad8 <__swsetup_r>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d0cb      	beq.n	8000a5c <__swbuf_r+0x28>
 8000ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8000ac8:	e7ea      	b.n	8000aa0 <__swbuf_r+0x6c>
 8000aca:	bf00      	nop
 8000acc:	080019ac 	.word	0x080019ac
 8000ad0:	080019cc 	.word	0x080019cc
 8000ad4:	0800198c 	.word	0x0800198c

08000ad8 <__swsetup_r>:
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <__swsetup_r+0xcc>)
 8000ada:	b570      	push	{r4, r5, r6, lr}
 8000adc:	681d      	ldr	r5, [r3, #0]
 8000ade:	4606      	mov	r6, r0
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	b125      	cbz	r5, 8000aee <__swsetup_r+0x16>
 8000ae4:	69ab      	ldr	r3, [r5, #24]
 8000ae6:	b913      	cbnz	r3, 8000aee <__swsetup_r+0x16>
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f000 f97d 	bl	8000de8 <__sinit>
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <__swsetup_r+0xd0>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	d10f      	bne.n	8000b14 <__swsetup_r+0x3c>
 8000af4:	686c      	ldr	r4, [r5, #4]
 8000af6:	89a3      	ldrh	r3, [r4, #12]
 8000af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000afc:	0719      	lsls	r1, r3, #28
 8000afe:	d42c      	bmi.n	8000b5a <__swsetup_r+0x82>
 8000b00:	06dd      	lsls	r5, r3, #27
 8000b02:	d411      	bmi.n	8000b28 <__swsetup_r+0x50>
 8000b04:	2309      	movs	r3, #9
 8000b06:	6033      	str	r3, [r6, #0]
 8000b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b0c:	81a3      	strh	r3, [r4, #12]
 8000b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b12:	e03e      	b.n	8000b92 <__swsetup_r+0xba>
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <__swsetup_r+0xd4>)
 8000b16:	429c      	cmp	r4, r3
 8000b18:	d101      	bne.n	8000b1e <__swsetup_r+0x46>
 8000b1a:	68ac      	ldr	r4, [r5, #8]
 8000b1c:	e7eb      	b.n	8000af6 <__swsetup_r+0x1e>
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <__swsetup_r+0xd8>)
 8000b20:	429c      	cmp	r4, r3
 8000b22:	bf08      	it	eq
 8000b24:	68ec      	ldreq	r4, [r5, #12]
 8000b26:	e7e6      	b.n	8000af6 <__swsetup_r+0x1e>
 8000b28:	0758      	lsls	r0, r3, #29
 8000b2a:	d512      	bpl.n	8000b52 <__swsetup_r+0x7a>
 8000b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b2e:	b141      	cbz	r1, 8000b42 <__swsetup_r+0x6a>
 8000b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d002      	beq.n	8000b3e <__swsetup_r+0x66>
 8000b38:	4630      	mov	r0, r6
 8000b3a:	f000 fa5b 	bl	8000ff4 <_free_r>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6363      	str	r3, [r4, #52]	; 0x34
 8000b42:	89a3      	ldrh	r3, [r4, #12]
 8000b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b48:	81a3      	strh	r3, [r4, #12]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	6063      	str	r3, [r4, #4]
 8000b4e:	6923      	ldr	r3, [r4, #16]
 8000b50:	6023      	str	r3, [r4, #0]
 8000b52:	89a3      	ldrh	r3, [r4, #12]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	81a3      	strh	r3, [r4, #12]
 8000b5a:	6923      	ldr	r3, [r4, #16]
 8000b5c:	b94b      	cbnz	r3, 8000b72 <__swsetup_r+0x9a>
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b68:	d003      	beq.n	8000b72 <__swsetup_r+0x9a>
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f000 fa01 	bl	8000f74 <__smakebuf_r>
 8000b72:	89a0      	ldrh	r0, [r4, #12]
 8000b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b78:	f010 0301 	ands.w	r3, r0, #1
 8000b7c:	d00a      	beq.n	8000b94 <__swsetup_r+0xbc>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60a3      	str	r3, [r4, #8]
 8000b82:	6963      	ldr	r3, [r4, #20]
 8000b84:	425b      	negs	r3, r3
 8000b86:	61a3      	str	r3, [r4, #24]
 8000b88:	6923      	ldr	r3, [r4, #16]
 8000b8a:	b943      	cbnz	r3, 8000b9e <__swsetup_r+0xc6>
 8000b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b90:	d1ba      	bne.n	8000b08 <__swsetup_r+0x30>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	0781      	lsls	r1, r0, #30
 8000b96:	bf58      	it	pl
 8000b98:	6963      	ldrpl	r3, [r4, #20]
 8000b9a:	60a3      	str	r3, [r4, #8]
 8000b9c:	e7f4      	b.n	8000b88 <__swsetup_r+0xb0>
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e7f7      	b.n	8000b92 <__swsetup_r+0xba>
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	080019ac 	.word	0x080019ac
 8000bac:	080019cc 	.word	0x080019cc
 8000bb0:	0800198c 	.word	0x0800198c

08000bb4 <__sflush_r>:
 8000bb4:	898a      	ldrh	r2, [r1, #12]
 8000bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bba:	4605      	mov	r5, r0
 8000bbc:	0710      	lsls	r0, r2, #28
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	d458      	bmi.n	8000c74 <__sflush_r+0xc0>
 8000bc2:	684b      	ldr	r3, [r1, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dc05      	bgt.n	8000bd4 <__sflush_r+0x20>
 8000bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dc02      	bgt.n	8000bd4 <__sflush_r+0x20>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0f9      	beq.n	8000bce <__sflush_r+0x1a>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000be0:	682f      	ldr	r7, [r5, #0]
 8000be2:	602b      	str	r3, [r5, #0]
 8000be4:	d032      	beq.n	8000c4c <__sflush_r+0x98>
 8000be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000be8:	89a3      	ldrh	r3, [r4, #12]
 8000bea:	075a      	lsls	r2, r3, #29
 8000bec:	d505      	bpl.n	8000bfa <__sflush_r+0x46>
 8000bee:	6863      	ldr	r3, [r4, #4]
 8000bf0:	1ac0      	subs	r0, r0, r3
 8000bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bf4:	b10b      	cbz	r3, 8000bfa <__sflush_r+0x46>
 8000bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf8:	1ac0      	subs	r0, r0, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c00:	6a21      	ldr	r1, [r4, #32]
 8000c02:	4628      	mov	r0, r5
 8000c04:	47b0      	blx	r6
 8000c06:	1c43      	adds	r3, r0, #1
 8000c08:	89a3      	ldrh	r3, [r4, #12]
 8000c0a:	d106      	bne.n	8000c1a <__sflush_r+0x66>
 8000c0c:	6829      	ldr	r1, [r5, #0]
 8000c0e:	291d      	cmp	r1, #29
 8000c10:	d82c      	bhi.n	8000c6c <__sflush_r+0xb8>
 8000c12:	4a2a      	ldr	r2, [pc, #168]	; (8000cbc <__sflush_r+0x108>)
 8000c14:	40ca      	lsrs	r2, r1
 8000c16:	07d6      	lsls	r6, r2, #31
 8000c18:	d528      	bpl.n	8000c6c <__sflush_r+0xb8>
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6062      	str	r2, [r4, #4]
 8000c1e:	04d9      	lsls	r1, r3, #19
 8000c20:	6922      	ldr	r2, [r4, #16]
 8000c22:	6022      	str	r2, [r4, #0]
 8000c24:	d504      	bpl.n	8000c30 <__sflush_r+0x7c>
 8000c26:	1c42      	adds	r2, r0, #1
 8000c28:	d101      	bne.n	8000c2e <__sflush_r+0x7a>
 8000c2a:	682b      	ldr	r3, [r5, #0]
 8000c2c:	b903      	cbnz	r3, 8000c30 <__sflush_r+0x7c>
 8000c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8000c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c32:	602f      	str	r7, [r5, #0]
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d0ca      	beq.n	8000bce <__sflush_r+0x1a>
 8000c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d002      	beq.n	8000c46 <__sflush_r+0x92>
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 f9d7 	bl	8000ff4 <_free_r>
 8000c46:	2000      	movs	r0, #0
 8000c48:	6360      	str	r0, [r4, #52]	; 0x34
 8000c4a:	e7c1      	b.n	8000bd0 <__sflush_r+0x1c>
 8000c4c:	6a21      	ldr	r1, [r4, #32]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4628      	mov	r0, r5
 8000c52:	47b0      	blx	r6
 8000c54:	1c41      	adds	r1, r0, #1
 8000c56:	d1c7      	bne.n	8000be8 <__sflush_r+0x34>
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0c4      	beq.n	8000be8 <__sflush_r+0x34>
 8000c5e:	2b1d      	cmp	r3, #29
 8000c60:	d001      	beq.n	8000c66 <__sflush_r+0xb2>
 8000c62:	2b16      	cmp	r3, #22
 8000c64:	d101      	bne.n	8000c6a <__sflush_r+0xb6>
 8000c66:	602f      	str	r7, [r5, #0]
 8000c68:	e7b1      	b.n	8000bce <__sflush_r+0x1a>
 8000c6a:	89a3      	ldrh	r3, [r4, #12]
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	81a3      	strh	r3, [r4, #12]
 8000c72:	e7ad      	b.n	8000bd0 <__sflush_r+0x1c>
 8000c74:	690f      	ldr	r7, [r1, #16]
 8000c76:	2f00      	cmp	r7, #0
 8000c78:	d0a9      	beq.n	8000bce <__sflush_r+0x1a>
 8000c7a:	0793      	lsls	r3, r2, #30
 8000c7c:	680e      	ldr	r6, [r1, #0]
 8000c7e:	bf08      	it	eq
 8000c80:	694b      	ldreq	r3, [r1, #20]
 8000c82:	600f      	str	r7, [r1, #0]
 8000c84:	bf18      	it	ne
 8000c86:	2300      	movne	r3, #0
 8000c88:	eba6 0807 	sub.w	r8, r6, r7
 8000c8c:	608b      	str	r3, [r1, #8]
 8000c8e:	f1b8 0f00 	cmp.w	r8, #0
 8000c92:	dd9c      	ble.n	8000bce <__sflush_r+0x1a>
 8000c94:	6a21      	ldr	r1, [r4, #32]
 8000c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c98:	4643      	mov	r3, r8
 8000c9a:	463a      	mov	r2, r7
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	47b0      	blx	r6
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	dc06      	bgt.n	8000cb2 <__sflush_r+0xfe>
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000caa:	81a3      	strh	r3, [r4, #12]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	e78e      	b.n	8000bd0 <__sflush_r+0x1c>
 8000cb2:	4407      	add	r7, r0
 8000cb4:	eba8 0800 	sub.w	r8, r8, r0
 8000cb8:	e7e9      	b.n	8000c8e <__sflush_r+0xda>
 8000cba:	bf00      	nop
 8000cbc:	20400001 	.word	0x20400001

08000cc0 <_fflush_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	690b      	ldr	r3, [r1, #16]
 8000cc4:	4605      	mov	r5, r0
 8000cc6:	460c      	mov	r4, r1
 8000cc8:	b913      	cbnz	r3, 8000cd0 <_fflush_r+0x10>
 8000cca:	2500      	movs	r5, #0
 8000ccc:	4628      	mov	r0, r5
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	b118      	cbz	r0, 8000cda <_fflush_r+0x1a>
 8000cd2:	6983      	ldr	r3, [r0, #24]
 8000cd4:	b90b      	cbnz	r3, 8000cda <_fflush_r+0x1a>
 8000cd6:	f000 f887 	bl	8000de8 <__sinit>
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <_fflush_r+0x6c>)
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d11b      	bne.n	8000d18 <_fflush_r+0x58>
 8000ce0:	686c      	ldr	r4, [r5, #4]
 8000ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0ef      	beq.n	8000cca <_fflush_r+0xa>
 8000cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cec:	07d0      	lsls	r0, r2, #31
 8000cee:	d404      	bmi.n	8000cfa <_fflush_r+0x3a>
 8000cf0:	0599      	lsls	r1, r3, #22
 8000cf2:	d402      	bmi.n	8000cfa <_fflush_r+0x3a>
 8000cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cf6:	f000 f915 	bl	8000f24 <__retarget_lock_acquire_recursive>
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	f7ff ff59 	bl	8000bb4 <__sflush_r>
 8000d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d04:	07da      	lsls	r2, r3, #31
 8000d06:	4605      	mov	r5, r0
 8000d08:	d4e0      	bmi.n	8000ccc <_fflush_r+0xc>
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	059b      	lsls	r3, r3, #22
 8000d0e:	d4dd      	bmi.n	8000ccc <_fflush_r+0xc>
 8000d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d12:	f000 f908 	bl	8000f26 <__retarget_lock_release_recursive>
 8000d16:	e7d9      	b.n	8000ccc <_fflush_r+0xc>
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <_fflush_r+0x70>)
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d101      	bne.n	8000d22 <_fflush_r+0x62>
 8000d1e:	68ac      	ldr	r4, [r5, #8]
 8000d20:	e7df      	b.n	8000ce2 <_fflush_r+0x22>
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <_fflush_r+0x74>)
 8000d24:	429c      	cmp	r4, r3
 8000d26:	bf08      	it	eq
 8000d28:	68ec      	ldreq	r4, [r5, #12]
 8000d2a:	e7da      	b.n	8000ce2 <_fflush_r+0x22>
 8000d2c:	080019ac 	.word	0x080019ac
 8000d30:	080019cc 	.word	0x080019cc
 8000d34:	0800198c 	.word	0x0800198c

08000d38 <std>:
 8000d38:	2300      	movs	r3, #0
 8000d3a:	b510      	push	{r4, lr}
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8000d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d46:	6083      	str	r3, [r0, #8]
 8000d48:	8181      	strh	r1, [r0, #12]
 8000d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d4c:	81c2      	strh	r2, [r0, #14]
 8000d4e:	6183      	str	r3, [r0, #24]
 8000d50:	4619      	mov	r1, r3
 8000d52:	2208      	movs	r2, #8
 8000d54:	305c      	adds	r0, #92	; 0x5c
 8000d56:	f7ff fdd7 	bl	8000908 <memset>
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <std+0x38>)
 8000d5c:	6263      	str	r3, [r4, #36]	; 0x24
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <std+0x3c>)
 8000d60:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <std+0x40>)
 8000d64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <std+0x44>)
 8000d68:	6224      	str	r4, [r4, #32]
 8000d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	080017b1 	.word	0x080017b1
 8000d74:	080017d3 	.word	0x080017d3
 8000d78:	0800180b 	.word	0x0800180b
 8000d7c:	0800182f 	.word	0x0800182f

08000d80 <_cleanup_r>:
 8000d80:	4901      	ldr	r1, [pc, #4]	; (8000d88 <_cleanup_r+0x8>)
 8000d82:	f000 b8af 	b.w	8000ee4 <_fwalk_reent>
 8000d86:	bf00      	nop
 8000d88:	08000cc1 	.word	0x08000cc1

08000d8c <__sfmoreglue>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2268      	movs	r2, #104	; 0x68
 8000d90:	1e4d      	subs	r5, r1, #1
 8000d92:	4355      	muls	r5, r2
 8000d94:	460e      	mov	r6, r1
 8000d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d9a:	f000 f997 	bl	80010cc <_malloc_r>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	b140      	cbz	r0, 8000db4 <__sfmoreglue+0x28>
 8000da2:	2100      	movs	r1, #0
 8000da4:	e9c0 1600 	strd	r1, r6, [r0]
 8000da8:	300c      	adds	r0, #12
 8000daa:	60a0      	str	r0, [r4, #8]
 8000dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000db0:	f7ff fdaa 	bl	8000908 <memset>
 8000db4:	4620      	mov	r0, r4
 8000db6:	bd70      	pop	{r4, r5, r6, pc}

08000db8 <__sfp_lock_acquire>:
 8000db8:	4801      	ldr	r0, [pc, #4]	; (8000dc0 <__sfp_lock_acquire+0x8>)
 8000dba:	f000 b8b3 	b.w	8000f24 <__retarget_lock_acquire_recursive>
 8000dbe:	bf00      	nop
 8000dc0:	20000085 	.word	0x20000085

08000dc4 <__sfp_lock_release>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	; (8000dcc <__sfp_lock_release+0x8>)
 8000dc6:	f000 b8ae 	b.w	8000f26 <__retarget_lock_release_recursive>
 8000dca:	bf00      	nop
 8000dcc:	20000085 	.word	0x20000085

08000dd0 <__sinit_lock_acquire>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	; (8000dd8 <__sinit_lock_acquire+0x8>)
 8000dd2:	f000 b8a7 	b.w	8000f24 <__retarget_lock_acquire_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	20000086 	.word	0x20000086

08000ddc <__sinit_lock_release>:
 8000ddc:	4801      	ldr	r0, [pc, #4]	; (8000de4 <__sinit_lock_release+0x8>)
 8000dde:	f000 b8a2 	b.w	8000f26 <__retarget_lock_release_recursive>
 8000de2:	bf00      	nop
 8000de4:	20000086 	.word	0x20000086

08000de8 <__sinit>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fff0 	bl	8000dd0 <__sinit_lock_acquire>
 8000df0:	69a3      	ldr	r3, [r4, #24]
 8000df2:	b11b      	cbz	r3, 8000dfc <__sinit+0x14>
 8000df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000df8:	f7ff bff0 	b.w	8000ddc <__sinit_lock_release>
 8000dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e00:	6523      	str	r3, [r4, #80]	; 0x50
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <__sinit+0x68>)
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <__sinit+0x6c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	bf04      	itt	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	61a3      	streq	r3, [r4, #24]
 8000e12:	4620      	mov	r0, r4
 8000e14:	f000 f820 	bl	8000e58 <__sfp>
 8000e18:	6060      	str	r0, [r4, #4]
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 f81c 	bl	8000e58 <__sfp>
 8000e20:	60a0      	str	r0, [r4, #8]
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 f818 	bl	8000e58 <__sfp>
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60e0      	str	r0, [r4, #12]
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	6860      	ldr	r0, [r4, #4]
 8000e30:	f7ff ff82 	bl	8000d38 <std>
 8000e34:	68a0      	ldr	r0, [r4, #8]
 8000e36:	2201      	movs	r2, #1
 8000e38:	2109      	movs	r1, #9
 8000e3a:	f7ff ff7d 	bl	8000d38 <std>
 8000e3e:	68e0      	ldr	r0, [r4, #12]
 8000e40:	2202      	movs	r2, #2
 8000e42:	2112      	movs	r1, #18
 8000e44:	f7ff ff78 	bl	8000d38 <std>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61a3      	str	r3, [r4, #24]
 8000e4c:	e7d2      	b.n	8000df4 <__sinit+0xc>
 8000e4e:	bf00      	nop
 8000e50:	08001988 	.word	0x08001988
 8000e54:	08000d81 	.word	0x08000d81

08000e58 <__sfp>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	4607      	mov	r7, r0
 8000e5c:	f7ff ffac 	bl	8000db8 <__sfp_lock_acquire>
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <__sfp+0x84>)
 8000e62:	681e      	ldr	r6, [r3, #0]
 8000e64:	69b3      	ldr	r3, [r6, #24]
 8000e66:	b913      	cbnz	r3, 8000e6e <__sfp+0x16>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f7ff ffbd 	bl	8000de8 <__sinit>
 8000e6e:	3648      	adds	r6, #72	; 0x48
 8000e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	d503      	bpl.n	8000e80 <__sfp+0x28>
 8000e78:	6833      	ldr	r3, [r6, #0]
 8000e7a:	b30b      	cbz	r3, 8000ec0 <__sfp+0x68>
 8000e7c:	6836      	ldr	r6, [r6, #0]
 8000e7e:	e7f7      	b.n	8000e70 <__sfp+0x18>
 8000e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e84:	b9d5      	cbnz	r5, 8000ebc <__sfp+0x64>
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <__sfp+0x88>)
 8000e88:	60e3      	str	r3, [r4, #12]
 8000e8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8000e90:	f000 f847 	bl	8000f22 <__retarget_lock_init_recursive>
 8000e94:	f7ff ff96 	bl	8000dc4 <__sfp_lock_release>
 8000e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ea0:	6025      	str	r5, [r4, #0]
 8000ea2:	61a5      	str	r5, [r4, #24]
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000eac:	f7ff fd2c 	bl	8000908 <memset>
 8000eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000eb8:	4620      	mov	r0, r4
 8000eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ebc:	3468      	adds	r4, #104	; 0x68
 8000ebe:	e7d9      	b.n	8000e74 <__sfp+0x1c>
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f7ff ff62 	bl	8000d8c <__sfmoreglue>
 8000ec8:	4604      	mov	r4, r0
 8000eca:	6030      	str	r0, [r6, #0]
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1d5      	bne.n	8000e7c <__sfp+0x24>
 8000ed0:	f7ff ff78 	bl	8000dc4 <__sfp_lock_release>
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	e7ee      	b.n	8000eb8 <__sfp+0x60>
 8000eda:	bf00      	nop
 8000edc:	08001988 	.word	0x08001988
 8000ee0:	ffff0001 	.word	0xffff0001

08000ee4 <_fwalk_reent>:
 8000ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4688      	mov	r8, r1
 8000eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ef0:	2700      	movs	r7, #0
 8000ef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8000efa:	d505      	bpl.n	8000f08 <_fwalk_reent+0x24>
 8000efc:	6824      	ldr	r4, [r4, #0]
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d1f7      	bne.n	8000ef2 <_fwalk_reent+0xe>
 8000f02:	4638      	mov	r0, r7
 8000f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f08:	89ab      	ldrh	r3, [r5, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d907      	bls.n	8000f1e <_fwalk_reent+0x3a>
 8000f0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f12:	3301      	adds	r3, #1
 8000f14:	d003      	beq.n	8000f1e <_fwalk_reent+0x3a>
 8000f16:	4629      	mov	r1, r5
 8000f18:	4630      	mov	r0, r6
 8000f1a:	47c0      	blx	r8
 8000f1c:	4307      	orrs	r7, r0
 8000f1e:	3568      	adds	r5, #104	; 0x68
 8000f20:	e7e9      	b.n	8000ef6 <_fwalk_reent+0x12>

08000f22 <__retarget_lock_init_recursive>:
 8000f22:	4770      	bx	lr

08000f24 <__retarget_lock_acquire_recursive>:
 8000f24:	4770      	bx	lr

08000f26 <__retarget_lock_release_recursive>:
 8000f26:	4770      	bx	lr

08000f28 <__swhatbuf_r>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	460e      	mov	r6, r1
 8000f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f30:	2900      	cmp	r1, #0
 8000f32:	b096      	sub	sp, #88	; 0x58
 8000f34:	4614      	mov	r4, r2
 8000f36:	461d      	mov	r5, r3
 8000f38:	da08      	bge.n	8000f4c <__swhatbuf_r+0x24>
 8000f3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	602a      	str	r2, [r5, #0]
 8000f42:	061a      	lsls	r2, r3, #24
 8000f44:	d410      	bmi.n	8000f68 <__swhatbuf_r+0x40>
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	e00e      	b.n	8000f6a <__swhatbuf_r+0x42>
 8000f4c:	466a      	mov	r2, sp
 8000f4e:	f000 fc95 	bl	800187c <_fstat_r>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	dbf1      	blt.n	8000f3a <__swhatbuf_r+0x12>
 8000f56:	9a01      	ldr	r2, [sp, #4]
 8000f58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f60:	425a      	negs	r2, r3
 8000f62:	415a      	adcs	r2, r3
 8000f64:	602a      	str	r2, [r5, #0]
 8000f66:	e7ee      	b.n	8000f46 <__swhatbuf_r+0x1e>
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	b016      	add	sp, #88	; 0x58
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f74 <__smakebuf_r>:
 8000f74:	898b      	ldrh	r3, [r1, #12]
 8000f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f78:	079d      	lsls	r5, r3, #30
 8000f7a:	4606      	mov	r6, r0
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	d507      	bpl.n	8000f90 <__smakebuf_r+0x1c>
 8000f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	6123      	str	r3, [r4, #16]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	6163      	str	r3, [r4, #20]
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	ab01      	add	r3, sp, #4
 8000f92:	466a      	mov	r2, sp
 8000f94:	f7ff ffc8 	bl	8000f28 <__swhatbuf_r>
 8000f98:	9900      	ldr	r1, [sp, #0]
 8000f9a:	4605      	mov	r5, r0
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f895 	bl	80010cc <_malloc_r>
 8000fa2:	b948      	cbnz	r0, 8000fb8 <__smakebuf_r+0x44>
 8000fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fa8:	059a      	lsls	r2, r3, #22
 8000faa:	d4ef      	bmi.n	8000f8c <__smakebuf_r+0x18>
 8000fac:	f023 0303 	bic.w	r3, r3, #3
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	81a3      	strh	r3, [r4, #12]
 8000fb6:	e7e3      	b.n	8000f80 <__smakebuf_r+0xc>
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <__smakebuf_r+0x7c>)
 8000fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8000fbc:	89a3      	ldrh	r3, [r4, #12]
 8000fbe:	6020      	str	r0, [r4, #0]
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	81a3      	strh	r3, [r4, #12]
 8000fc6:	9b00      	ldr	r3, [sp, #0]
 8000fc8:	6163      	str	r3, [r4, #20]
 8000fca:	9b01      	ldr	r3, [sp, #4]
 8000fcc:	6120      	str	r0, [r4, #16]
 8000fce:	b15b      	cbz	r3, 8000fe8 <__smakebuf_r+0x74>
 8000fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	f000 fc63 	bl	80018a0 <_isatty_r>
 8000fda:	b128      	cbz	r0, 8000fe8 <__smakebuf_r+0x74>
 8000fdc:	89a3      	ldrh	r3, [r4, #12]
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	81a3      	strh	r3, [r4, #12]
 8000fe8:	89a0      	ldrh	r0, [r4, #12]
 8000fea:	4305      	orrs	r5, r0
 8000fec:	81a5      	strh	r5, [r4, #12]
 8000fee:	e7cd      	b.n	8000f8c <__smakebuf_r+0x18>
 8000ff0:	08000d81 	.word	0x08000d81

08000ff4 <_free_r>:
 8000ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ff6:	2900      	cmp	r1, #0
 8000ff8:	d044      	beq.n	8001084 <_free_r+0x90>
 8000ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ffe:	9001      	str	r0, [sp, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f1a1 0404 	sub.w	r4, r1, #4
 8001006:	bfb8      	it	lt
 8001008:	18e4      	addlt	r4, r4, r3
 800100a:	f000 fc6b 	bl	80018e4 <__malloc_lock>
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <_free_r+0x94>)
 8001010:	9801      	ldr	r0, [sp, #4]
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	b933      	cbnz	r3, 8001024 <_free_r+0x30>
 8001016:	6063      	str	r3, [r4, #4]
 8001018:	6014      	str	r4, [r2, #0]
 800101a:	b003      	add	sp, #12
 800101c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001020:	f000 bc66 	b.w	80018f0 <__malloc_unlock>
 8001024:	42a3      	cmp	r3, r4
 8001026:	d908      	bls.n	800103a <_free_r+0x46>
 8001028:	6825      	ldr	r5, [r4, #0]
 800102a:	1961      	adds	r1, r4, r5
 800102c:	428b      	cmp	r3, r1
 800102e:	bf01      	itttt	eq
 8001030:	6819      	ldreq	r1, [r3, #0]
 8001032:	685b      	ldreq	r3, [r3, #4]
 8001034:	1949      	addeq	r1, r1, r5
 8001036:	6021      	streq	r1, [r4, #0]
 8001038:	e7ed      	b.n	8001016 <_free_r+0x22>
 800103a:	461a      	mov	r2, r3
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	b10b      	cbz	r3, 8001044 <_free_r+0x50>
 8001040:	42a3      	cmp	r3, r4
 8001042:	d9fa      	bls.n	800103a <_free_r+0x46>
 8001044:	6811      	ldr	r1, [r2, #0]
 8001046:	1855      	adds	r5, r2, r1
 8001048:	42a5      	cmp	r5, r4
 800104a:	d10b      	bne.n	8001064 <_free_r+0x70>
 800104c:	6824      	ldr	r4, [r4, #0]
 800104e:	4421      	add	r1, r4
 8001050:	1854      	adds	r4, r2, r1
 8001052:	42a3      	cmp	r3, r4
 8001054:	6011      	str	r1, [r2, #0]
 8001056:	d1e0      	bne.n	800101a <_free_r+0x26>
 8001058:	681c      	ldr	r4, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	6053      	str	r3, [r2, #4]
 800105e:	4421      	add	r1, r4
 8001060:	6011      	str	r1, [r2, #0]
 8001062:	e7da      	b.n	800101a <_free_r+0x26>
 8001064:	d902      	bls.n	800106c <_free_r+0x78>
 8001066:	230c      	movs	r3, #12
 8001068:	6003      	str	r3, [r0, #0]
 800106a:	e7d6      	b.n	800101a <_free_r+0x26>
 800106c:	6825      	ldr	r5, [r4, #0]
 800106e:	1961      	adds	r1, r4, r5
 8001070:	428b      	cmp	r3, r1
 8001072:	bf04      	itt	eq
 8001074:	6819      	ldreq	r1, [r3, #0]
 8001076:	685b      	ldreq	r3, [r3, #4]
 8001078:	6063      	str	r3, [r4, #4]
 800107a:	bf04      	itt	eq
 800107c:	1949      	addeq	r1, r1, r5
 800107e:	6021      	streq	r1, [r4, #0]
 8001080:	6054      	str	r4, [r2, #4]
 8001082:	e7ca      	b.n	800101a <_free_r+0x26>
 8001084:	b003      	add	sp, #12
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	20000088 	.word	0x20000088

0800108c <sbrk_aligned>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	4e0e      	ldr	r6, [pc, #56]	; (80010c8 <sbrk_aligned+0x3c>)
 8001090:	460c      	mov	r4, r1
 8001092:	6831      	ldr	r1, [r6, #0]
 8001094:	4605      	mov	r5, r0
 8001096:	b911      	cbnz	r1, 800109e <sbrk_aligned+0x12>
 8001098:	f000 fb7a 	bl	8001790 <_sbrk_r>
 800109c:	6030      	str	r0, [r6, #0]
 800109e:	4621      	mov	r1, r4
 80010a0:	4628      	mov	r0, r5
 80010a2:	f000 fb75 	bl	8001790 <_sbrk_r>
 80010a6:	1c43      	adds	r3, r0, #1
 80010a8:	d00a      	beq.n	80010c0 <sbrk_aligned+0x34>
 80010aa:	1cc4      	adds	r4, r0, #3
 80010ac:	f024 0403 	bic.w	r4, r4, #3
 80010b0:	42a0      	cmp	r0, r4
 80010b2:	d007      	beq.n	80010c4 <sbrk_aligned+0x38>
 80010b4:	1a21      	subs	r1, r4, r0
 80010b6:	4628      	mov	r0, r5
 80010b8:	f000 fb6a 	bl	8001790 <_sbrk_r>
 80010bc:	3001      	adds	r0, #1
 80010be:	d101      	bne.n	80010c4 <sbrk_aligned+0x38>
 80010c0:	f04f 34ff 	mov.w	r4, #4294967295
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
 80010c8:	2000008c 	.word	0x2000008c

080010cc <_malloc_r>:
 80010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d0:	1ccd      	adds	r5, r1, #3
 80010d2:	f025 0503 	bic.w	r5, r5, #3
 80010d6:	3508      	adds	r5, #8
 80010d8:	2d0c      	cmp	r5, #12
 80010da:	bf38      	it	cc
 80010dc:	250c      	movcc	r5, #12
 80010de:	2d00      	cmp	r5, #0
 80010e0:	4607      	mov	r7, r0
 80010e2:	db01      	blt.n	80010e8 <_malloc_r+0x1c>
 80010e4:	42a9      	cmp	r1, r5
 80010e6:	d905      	bls.n	80010f4 <_malloc_r+0x28>
 80010e8:	230c      	movs	r3, #12
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	2600      	movs	r6, #0
 80010ee:	4630      	mov	r0, r6
 80010f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010f4:	4e2e      	ldr	r6, [pc, #184]	; (80011b0 <_malloc_r+0xe4>)
 80010f6:	f000 fbf5 	bl	80018e4 <__malloc_lock>
 80010fa:	6833      	ldr	r3, [r6, #0]
 80010fc:	461c      	mov	r4, r3
 80010fe:	bb34      	cbnz	r4, 800114e <_malloc_r+0x82>
 8001100:	4629      	mov	r1, r5
 8001102:	4638      	mov	r0, r7
 8001104:	f7ff ffc2 	bl	800108c <sbrk_aligned>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	4604      	mov	r4, r0
 800110c:	d14d      	bne.n	80011aa <_malloc_r+0xde>
 800110e:	6834      	ldr	r4, [r6, #0]
 8001110:	4626      	mov	r6, r4
 8001112:	2e00      	cmp	r6, #0
 8001114:	d140      	bne.n	8001198 <_malloc_r+0xcc>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	4631      	mov	r1, r6
 800111a:	4638      	mov	r0, r7
 800111c:	eb04 0803 	add.w	r8, r4, r3
 8001120:	f000 fb36 	bl	8001790 <_sbrk_r>
 8001124:	4580      	cmp	r8, r0
 8001126:	d13a      	bne.n	800119e <_malloc_r+0xd2>
 8001128:	6821      	ldr	r1, [r4, #0]
 800112a:	3503      	adds	r5, #3
 800112c:	1a6d      	subs	r5, r5, r1
 800112e:	f025 0503 	bic.w	r5, r5, #3
 8001132:	3508      	adds	r5, #8
 8001134:	2d0c      	cmp	r5, #12
 8001136:	bf38      	it	cc
 8001138:	250c      	movcc	r5, #12
 800113a:	4629      	mov	r1, r5
 800113c:	4638      	mov	r0, r7
 800113e:	f7ff ffa5 	bl	800108c <sbrk_aligned>
 8001142:	3001      	adds	r0, #1
 8001144:	d02b      	beq.n	800119e <_malloc_r+0xd2>
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	442b      	add	r3, r5
 800114a:	6023      	str	r3, [r4, #0]
 800114c:	e00e      	b.n	800116c <_malloc_r+0xa0>
 800114e:	6822      	ldr	r2, [r4, #0]
 8001150:	1b52      	subs	r2, r2, r5
 8001152:	d41e      	bmi.n	8001192 <_malloc_r+0xc6>
 8001154:	2a0b      	cmp	r2, #11
 8001156:	d916      	bls.n	8001186 <_malloc_r+0xba>
 8001158:	1961      	adds	r1, r4, r5
 800115a:	42a3      	cmp	r3, r4
 800115c:	6025      	str	r5, [r4, #0]
 800115e:	bf18      	it	ne
 8001160:	6059      	strne	r1, [r3, #4]
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	bf08      	it	eq
 8001166:	6031      	streq	r1, [r6, #0]
 8001168:	5162      	str	r2, [r4, r5]
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	4638      	mov	r0, r7
 800116e:	f104 060b 	add.w	r6, r4, #11
 8001172:	f000 fbbd 	bl	80018f0 <__malloc_unlock>
 8001176:	f026 0607 	bic.w	r6, r6, #7
 800117a:	1d23      	adds	r3, r4, #4
 800117c:	1af2      	subs	r2, r6, r3
 800117e:	d0b6      	beq.n	80010ee <_malloc_r+0x22>
 8001180:	1b9b      	subs	r3, r3, r6
 8001182:	50a3      	str	r3, [r4, r2]
 8001184:	e7b3      	b.n	80010ee <_malloc_r+0x22>
 8001186:	6862      	ldr	r2, [r4, #4]
 8001188:	42a3      	cmp	r3, r4
 800118a:	bf0c      	ite	eq
 800118c:	6032      	streq	r2, [r6, #0]
 800118e:	605a      	strne	r2, [r3, #4]
 8001190:	e7ec      	b.n	800116c <_malloc_r+0xa0>
 8001192:	4623      	mov	r3, r4
 8001194:	6864      	ldr	r4, [r4, #4]
 8001196:	e7b2      	b.n	80010fe <_malloc_r+0x32>
 8001198:	4634      	mov	r4, r6
 800119a:	6876      	ldr	r6, [r6, #4]
 800119c:	e7b9      	b.n	8001112 <_malloc_r+0x46>
 800119e:	230c      	movs	r3, #12
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4638      	mov	r0, r7
 80011a4:	f000 fba4 	bl	80018f0 <__malloc_unlock>
 80011a8:	e7a1      	b.n	80010ee <_malloc_r+0x22>
 80011aa:	6025      	str	r5, [r4, #0]
 80011ac:	e7de      	b.n	800116c <_malloc_r+0xa0>
 80011ae:	bf00      	nop
 80011b0:	20000088 	.word	0x20000088

080011b4 <__sfputc_r>:
 80011b4:	6893      	ldr	r3, [r2, #8]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	b410      	push	{r4}
 80011bc:	6093      	str	r3, [r2, #8]
 80011be:	da08      	bge.n	80011d2 <__sfputc_r+0x1e>
 80011c0:	6994      	ldr	r4, [r2, #24]
 80011c2:	42a3      	cmp	r3, r4
 80011c4:	db01      	blt.n	80011ca <__sfputc_r+0x16>
 80011c6:	290a      	cmp	r1, #10
 80011c8:	d103      	bne.n	80011d2 <__sfputc_r+0x1e>
 80011ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ce:	f7ff bc31 	b.w	8000a34 <__swbuf_r>
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	1c58      	adds	r0, r3, #1
 80011d6:	6010      	str	r0, [r2, #0]
 80011d8:	7019      	strb	r1, [r3, #0]
 80011da:	4608      	mov	r0, r1
 80011dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <__sfputs_r>:
 80011e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e4:	4606      	mov	r6, r0
 80011e6:	460f      	mov	r7, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	18d5      	adds	r5, r2, r3
 80011ec:	42ac      	cmp	r4, r5
 80011ee:	d101      	bne.n	80011f4 <__sfputs_r+0x12>
 80011f0:	2000      	movs	r0, #0
 80011f2:	e007      	b.n	8001204 <__sfputs_r+0x22>
 80011f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011f8:	463a      	mov	r2, r7
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff ffda 	bl	80011b4 <__sfputc_r>
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	d1f3      	bne.n	80011ec <__sfputs_r+0xa>
 8001204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001208 <_vfiprintf_r>:
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	460d      	mov	r5, r1
 800120e:	b09d      	sub	sp, #116	; 0x74
 8001210:	4614      	mov	r4, r2
 8001212:	4698      	mov	r8, r3
 8001214:	4606      	mov	r6, r0
 8001216:	b118      	cbz	r0, 8001220 <_vfiprintf_r+0x18>
 8001218:	6983      	ldr	r3, [r0, #24]
 800121a:	b90b      	cbnz	r3, 8001220 <_vfiprintf_r+0x18>
 800121c:	f7ff fde4 	bl	8000de8 <__sinit>
 8001220:	4b89      	ldr	r3, [pc, #548]	; (8001448 <_vfiprintf_r+0x240>)
 8001222:	429d      	cmp	r5, r3
 8001224:	d11b      	bne.n	800125e <_vfiprintf_r+0x56>
 8001226:	6875      	ldr	r5, [r6, #4]
 8001228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800122a:	07d9      	lsls	r1, r3, #31
 800122c:	d405      	bmi.n	800123a <_vfiprintf_r+0x32>
 800122e:	89ab      	ldrh	r3, [r5, #12]
 8001230:	059a      	lsls	r2, r3, #22
 8001232:	d402      	bmi.n	800123a <_vfiprintf_r+0x32>
 8001234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001236:	f7ff fe75 	bl	8000f24 <__retarget_lock_acquire_recursive>
 800123a:	89ab      	ldrh	r3, [r5, #12]
 800123c:	071b      	lsls	r3, r3, #28
 800123e:	d501      	bpl.n	8001244 <_vfiprintf_r+0x3c>
 8001240:	692b      	ldr	r3, [r5, #16]
 8001242:	b9eb      	cbnz	r3, 8001280 <_vfiprintf_r+0x78>
 8001244:	4629      	mov	r1, r5
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff fc46 	bl	8000ad8 <__swsetup_r>
 800124c:	b1c0      	cbz	r0, 8001280 <_vfiprintf_r+0x78>
 800124e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001250:	07dc      	lsls	r4, r3, #31
 8001252:	d50e      	bpl.n	8001272 <_vfiprintf_r+0x6a>
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	b01d      	add	sp, #116	; 0x74
 800125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125e:	4b7b      	ldr	r3, [pc, #492]	; (800144c <_vfiprintf_r+0x244>)
 8001260:	429d      	cmp	r5, r3
 8001262:	d101      	bne.n	8001268 <_vfiprintf_r+0x60>
 8001264:	68b5      	ldr	r5, [r6, #8]
 8001266:	e7df      	b.n	8001228 <_vfiprintf_r+0x20>
 8001268:	4b79      	ldr	r3, [pc, #484]	; (8001450 <_vfiprintf_r+0x248>)
 800126a:	429d      	cmp	r5, r3
 800126c:	bf08      	it	eq
 800126e:	68f5      	ldreq	r5, [r6, #12]
 8001270:	e7da      	b.n	8001228 <_vfiprintf_r+0x20>
 8001272:	89ab      	ldrh	r3, [r5, #12]
 8001274:	0598      	lsls	r0, r3, #22
 8001276:	d4ed      	bmi.n	8001254 <_vfiprintf_r+0x4c>
 8001278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800127a:	f7ff fe54 	bl	8000f26 <__retarget_lock_release_recursive>
 800127e:	e7e9      	b.n	8001254 <_vfiprintf_r+0x4c>
 8001280:	2300      	movs	r3, #0
 8001282:	9309      	str	r3, [sp, #36]	; 0x24
 8001284:	2320      	movs	r3, #32
 8001286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800128a:	f8cd 800c 	str.w	r8, [sp, #12]
 800128e:	2330      	movs	r3, #48	; 0x30
 8001290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001454 <_vfiprintf_r+0x24c>
 8001294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001298:	f04f 0901 	mov.w	r9, #1
 800129c:	4623      	mov	r3, r4
 800129e:	469a      	mov	sl, r3
 80012a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012a4:	b10a      	cbz	r2, 80012aa <_vfiprintf_r+0xa2>
 80012a6:	2a25      	cmp	r2, #37	; 0x25
 80012a8:	d1f9      	bne.n	800129e <_vfiprintf_r+0x96>
 80012aa:	ebba 0b04 	subs.w	fp, sl, r4
 80012ae:	d00b      	beq.n	80012c8 <_vfiprintf_r+0xc0>
 80012b0:	465b      	mov	r3, fp
 80012b2:	4622      	mov	r2, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	4630      	mov	r0, r6
 80012b8:	f7ff ff93 	bl	80011e2 <__sfputs_r>
 80012bc:	3001      	adds	r0, #1
 80012be:	f000 80aa 	beq.w	8001416 <_vfiprintf_r+0x20e>
 80012c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012c4:	445a      	add	r2, fp
 80012c6:	9209      	str	r2, [sp, #36]	; 0x24
 80012c8:	f89a 3000 	ldrb.w	r3, [sl]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a2 	beq.w	8001416 <_vfiprintf_r+0x20e>
 80012d2:	2300      	movs	r3, #0
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012dc:	f10a 0a01 	add.w	sl, sl, #1
 80012e0:	9304      	str	r3, [sp, #16]
 80012e2:	9307      	str	r3, [sp, #28]
 80012e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012e8:	931a      	str	r3, [sp, #104]	; 0x68
 80012ea:	4654      	mov	r4, sl
 80012ec:	2205      	movs	r2, #5
 80012ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012f2:	4858      	ldr	r0, [pc, #352]	; (8001454 <_vfiprintf_r+0x24c>)
 80012f4:	f7fe ff94 	bl	8000220 <memchr>
 80012f8:	9a04      	ldr	r2, [sp, #16]
 80012fa:	b9d8      	cbnz	r0, 8001334 <_vfiprintf_r+0x12c>
 80012fc:	06d1      	lsls	r1, r2, #27
 80012fe:	bf44      	itt	mi
 8001300:	2320      	movmi	r3, #32
 8001302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001306:	0713      	lsls	r3, r2, #28
 8001308:	bf44      	itt	mi
 800130a:	232b      	movmi	r3, #43	; 0x2b
 800130c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001310:	f89a 3000 	ldrb.w	r3, [sl]
 8001314:	2b2a      	cmp	r3, #42	; 0x2a
 8001316:	d015      	beq.n	8001344 <_vfiprintf_r+0x13c>
 8001318:	9a07      	ldr	r2, [sp, #28]
 800131a:	4654      	mov	r4, sl
 800131c:	2000      	movs	r0, #0
 800131e:	f04f 0c0a 	mov.w	ip, #10
 8001322:	4621      	mov	r1, r4
 8001324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001328:	3b30      	subs	r3, #48	; 0x30
 800132a:	2b09      	cmp	r3, #9
 800132c:	d94e      	bls.n	80013cc <_vfiprintf_r+0x1c4>
 800132e:	b1b0      	cbz	r0, 800135e <_vfiprintf_r+0x156>
 8001330:	9207      	str	r2, [sp, #28]
 8001332:	e014      	b.n	800135e <_vfiprintf_r+0x156>
 8001334:	eba0 0308 	sub.w	r3, r0, r8
 8001338:	fa09 f303 	lsl.w	r3, r9, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	9304      	str	r3, [sp, #16]
 8001340:	46a2      	mov	sl, r4
 8001342:	e7d2      	b.n	80012ea <_vfiprintf_r+0xe2>
 8001344:	9b03      	ldr	r3, [sp, #12]
 8001346:	1d19      	adds	r1, r3, #4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	9103      	str	r1, [sp, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	bfbb      	ittet	lt
 8001350:	425b      	neglt	r3, r3
 8001352:	f042 0202 	orrlt.w	r2, r2, #2
 8001356:	9307      	strge	r3, [sp, #28]
 8001358:	9307      	strlt	r3, [sp, #28]
 800135a:	bfb8      	it	lt
 800135c:	9204      	strlt	r2, [sp, #16]
 800135e:	7823      	ldrb	r3, [r4, #0]
 8001360:	2b2e      	cmp	r3, #46	; 0x2e
 8001362:	d10c      	bne.n	800137e <_vfiprintf_r+0x176>
 8001364:	7863      	ldrb	r3, [r4, #1]
 8001366:	2b2a      	cmp	r3, #42	; 0x2a
 8001368:	d135      	bne.n	80013d6 <_vfiprintf_r+0x1ce>
 800136a:	9b03      	ldr	r3, [sp, #12]
 800136c:	1d1a      	adds	r2, r3, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	9203      	str	r2, [sp, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	f04f 33ff 	movlt.w	r3, #4294967295
 800137a:	3402      	adds	r4, #2
 800137c:	9305      	str	r3, [sp, #20]
 800137e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001464 <_vfiprintf_r+0x25c>
 8001382:	7821      	ldrb	r1, [r4, #0]
 8001384:	2203      	movs	r2, #3
 8001386:	4650      	mov	r0, sl
 8001388:	f7fe ff4a 	bl	8000220 <memchr>
 800138c:	b140      	cbz	r0, 80013a0 <_vfiprintf_r+0x198>
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	eba0 000a 	sub.w	r0, r0, sl
 8001394:	fa03 f000 	lsl.w	r0, r3, r0
 8001398:	9b04      	ldr	r3, [sp, #16]
 800139a:	4303      	orrs	r3, r0
 800139c:	3401      	adds	r4, #1
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013a4:	482c      	ldr	r0, [pc, #176]	; (8001458 <_vfiprintf_r+0x250>)
 80013a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013aa:	2206      	movs	r2, #6
 80013ac:	f7fe ff38 	bl	8000220 <memchr>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d03f      	beq.n	8001434 <_vfiprintf_r+0x22c>
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <_vfiprintf_r+0x254>)
 80013b6:	bb1b      	cbnz	r3, 8001400 <_vfiprintf_r+0x1f8>
 80013b8:	9b03      	ldr	r3, [sp, #12]
 80013ba:	3307      	adds	r3, #7
 80013bc:	f023 0307 	bic.w	r3, r3, #7
 80013c0:	3308      	adds	r3, #8
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013c6:	443b      	add	r3, r7
 80013c8:	9309      	str	r3, [sp, #36]	; 0x24
 80013ca:	e767      	b.n	800129c <_vfiprintf_r+0x94>
 80013cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80013d0:	460c      	mov	r4, r1
 80013d2:	2001      	movs	r0, #1
 80013d4:	e7a5      	b.n	8001322 <_vfiprintf_r+0x11a>
 80013d6:	2300      	movs	r3, #0
 80013d8:	3401      	adds	r4, #1
 80013da:	9305      	str	r3, [sp, #20]
 80013dc:	4619      	mov	r1, r3
 80013de:	f04f 0c0a 	mov.w	ip, #10
 80013e2:	4620      	mov	r0, r4
 80013e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013e8:	3a30      	subs	r2, #48	; 0x30
 80013ea:	2a09      	cmp	r2, #9
 80013ec:	d903      	bls.n	80013f6 <_vfiprintf_r+0x1ee>
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0c5      	beq.n	800137e <_vfiprintf_r+0x176>
 80013f2:	9105      	str	r1, [sp, #20]
 80013f4:	e7c3      	b.n	800137e <_vfiprintf_r+0x176>
 80013f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80013fa:	4604      	mov	r4, r0
 80013fc:	2301      	movs	r3, #1
 80013fe:	e7f0      	b.n	80013e2 <_vfiprintf_r+0x1da>
 8001400:	ab03      	add	r3, sp, #12
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	462a      	mov	r2, r5
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <_vfiprintf_r+0x258>)
 8001408:	a904      	add	r1, sp, #16
 800140a:	4630      	mov	r0, r6
 800140c:	f3af 8000 	nop.w
 8001410:	4607      	mov	r7, r0
 8001412:	1c78      	adds	r0, r7, #1
 8001414:	d1d6      	bne.n	80013c4 <_vfiprintf_r+0x1bc>
 8001416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001418:	07d9      	lsls	r1, r3, #31
 800141a:	d405      	bmi.n	8001428 <_vfiprintf_r+0x220>
 800141c:	89ab      	ldrh	r3, [r5, #12]
 800141e:	059a      	lsls	r2, r3, #22
 8001420:	d402      	bmi.n	8001428 <_vfiprintf_r+0x220>
 8001422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001424:	f7ff fd7f 	bl	8000f26 <__retarget_lock_release_recursive>
 8001428:	89ab      	ldrh	r3, [r5, #12]
 800142a:	065b      	lsls	r3, r3, #25
 800142c:	f53f af12 	bmi.w	8001254 <_vfiprintf_r+0x4c>
 8001430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001432:	e711      	b.n	8001258 <_vfiprintf_r+0x50>
 8001434:	ab03      	add	r3, sp, #12
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	462a      	mov	r2, r5
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <_vfiprintf_r+0x258>)
 800143c:	a904      	add	r1, sp, #16
 800143e:	4630      	mov	r0, r6
 8001440:	f000 f880 	bl	8001544 <_printf_i>
 8001444:	e7e4      	b.n	8001410 <_vfiprintf_r+0x208>
 8001446:	bf00      	nop
 8001448:	080019ac 	.word	0x080019ac
 800144c:	080019cc 	.word	0x080019cc
 8001450:	0800198c 	.word	0x0800198c
 8001454:	080019ec 	.word	0x080019ec
 8001458:	080019f6 	.word	0x080019f6
 800145c:	00000000 	.word	0x00000000
 8001460:	080011e3 	.word	0x080011e3
 8001464:	080019f2 	.word	0x080019f2

08001468 <_printf_common>:
 8001468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800146c:	4616      	mov	r6, r2
 800146e:	4699      	mov	r9, r3
 8001470:	688a      	ldr	r2, [r1, #8]
 8001472:	690b      	ldr	r3, [r1, #16]
 8001474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001478:	4293      	cmp	r3, r2
 800147a:	bfb8      	it	lt
 800147c:	4613      	movlt	r3, r2
 800147e:	6033      	str	r3, [r6, #0]
 8001480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001484:	4607      	mov	r7, r0
 8001486:	460c      	mov	r4, r1
 8001488:	b10a      	cbz	r2, 800148e <_printf_common+0x26>
 800148a:	3301      	adds	r3, #1
 800148c:	6033      	str	r3, [r6, #0]
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	0699      	lsls	r1, r3, #26
 8001492:	bf42      	ittt	mi
 8001494:	6833      	ldrmi	r3, [r6, #0]
 8001496:	3302      	addmi	r3, #2
 8001498:	6033      	strmi	r3, [r6, #0]
 800149a:	6825      	ldr	r5, [r4, #0]
 800149c:	f015 0506 	ands.w	r5, r5, #6
 80014a0:	d106      	bne.n	80014b0 <_printf_common+0x48>
 80014a2:	f104 0a19 	add.w	sl, r4, #25
 80014a6:	68e3      	ldr	r3, [r4, #12]
 80014a8:	6832      	ldr	r2, [r6, #0]
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	42ab      	cmp	r3, r5
 80014ae:	dc26      	bgt.n	80014fe <_printf_common+0x96>
 80014b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80014b4:	1e13      	subs	r3, r2, #0
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	bf18      	it	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	0692      	lsls	r2, r2, #26
 80014be:	d42b      	bmi.n	8001518 <_printf_common+0xb0>
 80014c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014c4:	4649      	mov	r1, r9
 80014c6:	4638      	mov	r0, r7
 80014c8:	47c0      	blx	r8
 80014ca:	3001      	adds	r0, #1
 80014cc:	d01e      	beq.n	800150c <_printf_common+0xa4>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	68e5      	ldr	r5, [r4, #12]
 80014d2:	6832      	ldr	r2, [r6, #0]
 80014d4:	f003 0306 	and.w	r3, r3, #6
 80014d8:	2b04      	cmp	r3, #4
 80014da:	bf08      	it	eq
 80014dc:	1aad      	subeq	r5, r5, r2
 80014de:	68a3      	ldr	r3, [r4, #8]
 80014e0:	6922      	ldr	r2, [r4, #16]
 80014e2:	bf0c      	ite	eq
 80014e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014e8:	2500      	movne	r5, #0
 80014ea:	4293      	cmp	r3, r2
 80014ec:	bfc4      	itt	gt
 80014ee:	1a9b      	subgt	r3, r3, r2
 80014f0:	18ed      	addgt	r5, r5, r3
 80014f2:	2600      	movs	r6, #0
 80014f4:	341a      	adds	r4, #26
 80014f6:	42b5      	cmp	r5, r6
 80014f8:	d11a      	bne.n	8001530 <_printf_common+0xc8>
 80014fa:	2000      	movs	r0, #0
 80014fc:	e008      	b.n	8001510 <_printf_common+0xa8>
 80014fe:	2301      	movs	r3, #1
 8001500:	4652      	mov	r2, sl
 8001502:	4649      	mov	r1, r9
 8001504:	4638      	mov	r0, r7
 8001506:	47c0      	blx	r8
 8001508:	3001      	adds	r0, #1
 800150a:	d103      	bne.n	8001514 <_printf_common+0xac>
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001514:	3501      	adds	r5, #1
 8001516:	e7c6      	b.n	80014a6 <_printf_common+0x3e>
 8001518:	18e1      	adds	r1, r4, r3
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	2030      	movs	r0, #48	; 0x30
 800151e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001522:	4422      	add	r2, r4
 8001524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800152c:	3302      	adds	r3, #2
 800152e:	e7c7      	b.n	80014c0 <_printf_common+0x58>
 8001530:	2301      	movs	r3, #1
 8001532:	4622      	mov	r2, r4
 8001534:	4649      	mov	r1, r9
 8001536:	4638      	mov	r0, r7
 8001538:	47c0      	blx	r8
 800153a:	3001      	adds	r0, #1
 800153c:	d0e6      	beq.n	800150c <_printf_common+0xa4>
 800153e:	3601      	adds	r6, #1
 8001540:	e7d9      	b.n	80014f6 <_printf_common+0x8e>
	...

08001544 <_printf_i>:
 8001544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	7e0f      	ldrb	r7, [r1, #24]
 800154a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800154c:	2f78      	cmp	r7, #120	; 0x78
 800154e:	4691      	mov	r9, r2
 8001550:	4680      	mov	r8, r0
 8001552:	460c      	mov	r4, r1
 8001554:	469a      	mov	sl, r3
 8001556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800155a:	d807      	bhi.n	800156c <_printf_i+0x28>
 800155c:	2f62      	cmp	r7, #98	; 0x62
 800155e:	d80a      	bhi.n	8001576 <_printf_i+0x32>
 8001560:	2f00      	cmp	r7, #0
 8001562:	f000 80d8 	beq.w	8001716 <_printf_i+0x1d2>
 8001566:	2f58      	cmp	r7, #88	; 0x58
 8001568:	f000 80a3 	beq.w	80016b2 <_printf_i+0x16e>
 800156c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001574:	e03a      	b.n	80015ec <_printf_i+0xa8>
 8001576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800157a:	2b15      	cmp	r3, #21
 800157c:	d8f6      	bhi.n	800156c <_printf_i+0x28>
 800157e:	a101      	add	r1, pc, #4	; (adr r1, 8001584 <_printf_i+0x40>)
 8001580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001584:	080015dd 	.word	0x080015dd
 8001588:	080015f1 	.word	0x080015f1
 800158c:	0800156d 	.word	0x0800156d
 8001590:	0800156d 	.word	0x0800156d
 8001594:	0800156d 	.word	0x0800156d
 8001598:	0800156d 	.word	0x0800156d
 800159c:	080015f1 	.word	0x080015f1
 80015a0:	0800156d 	.word	0x0800156d
 80015a4:	0800156d 	.word	0x0800156d
 80015a8:	0800156d 	.word	0x0800156d
 80015ac:	0800156d 	.word	0x0800156d
 80015b0:	080016fd 	.word	0x080016fd
 80015b4:	08001621 	.word	0x08001621
 80015b8:	080016df 	.word	0x080016df
 80015bc:	0800156d 	.word	0x0800156d
 80015c0:	0800156d 	.word	0x0800156d
 80015c4:	0800171f 	.word	0x0800171f
 80015c8:	0800156d 	.word	0x0800156d
 80015cc:	08001621 	.word	0x08001621
 80015d0:	0800156d 	.word	0x0800156d
 80015d4:	0800156d 	.word	0x0800156d
 80015d8:	080016e7 	.word	0x080016e7
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	1d1a      	adds	r2, r3, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	602a      	str	r2, [r5, #0]
 80015e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0a3      	b.n	8001738 <_printf_i+0x1f4>
 80015f0:	6820      	ldr	r0, [r4, #0]
 80015f2:	6829      	ldr	r1, [r5, #0]
 80015f4:	0606      	lsls	r6, r0, #24
 80015f6:	f101 0304 	add.w	r3, r1, #4
 80015fa:	d50a      	bpl.n	8001612 <_printf_i+0xce>
 80015fc:	680e      	ldr	r6, [r1, #0]
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	2e00      	cmp	r6, #0
 8001602:	da03      	bge.n	800160c <_printf_i+0xc8>
 8001604:	232d      	movs	r3, #45	; 0x2d
 8001606:	4276      	negs	r6, r6
 8001608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800160c:	485e      	ldr	r0, [pc, #376]	; (8001788 <_printf_i+0x244>)
 800160e:	230a      	movs	r3, #10
 8001610:	e019      	b.n	8001646 <_printf_i+0x102>
 8001612:	680e      	ldr	r6, [r1, #0]
 8001614:	602b      	str	r3, [r5, #0]
 8001616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800161a:	bf18      	it	ne
 800161c:	b236      	sxthne	r6, r6
 800161e:	e7ef      	b.n	8001600 <_printf_i+0xbc>
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	1d19      	adds	r1, r3, #4
 8001626:	6029      	str	r1, [r5, #0]
 8001628:	0601      	lsls	r1, r0, #24
 800162a:	d501      	bpl.n	8001630 <_printf_i+0xec>
 800162c:	681e      	ldr	r6, [r3, #0]
 800162e:	e002      	b.n	8001636 <_printf_i+0xf2>
 8001630:	0646      	lsls	r6, r0, #25
 8001632:	d5fb      	bpl.n	800162c <_printf_i+0xe8>
 8001634:	881e      	ldrh	r6, [r3, #0]
 8001636:	4854      	ldr	r0, [pc, #336]	; (8001788 <_printf_i+0x244>)
 8001638:	2f6f      	cmp	r7, #111	; 0x6f
 800163a:	bf0c      	ite	eq
 800163c:	2308      	moveq	r3, #8
 800163e:	230a      	movne	r3, #10
 8001640:	2100      	movs	r1, #0
 8001642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001646:	6865      	ldr	r5, [r4, #4]
 8001648:	60a5      	str	r5, [r4, #8]
 800164a:	2d00      	cmp	r5, #0
 800164c:	bfa2      	ittt	ge
 800164e:	6821      	ldrge	r1, [r4, #0]
 8001650:	f021 0104 	bicge.w	r1, r1, #4
 8001654:	6021      	strge	r1, [r4, #0]
 8001656:	b90e      	cbnz	r6, 800165c <_printf_i+0x118>
 8001658:	2d00      	cmp	r5, #0
 800165a:	d04d      	beq.n	80016f8 <_printf_i+0x1b4>
 800165c:	4615      	mov	r5, r2
 800165e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001662:	fb03 6711 	mls	r7, r3, r1, r6
 8001666:	5dc7      	ldrb	r7, [r0, r7]
 8001668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800166c:	4637      	mov	r7, r6
 800166e:	42bb      	cmp	r3, r7
 8001670:	460e      	mov	r6, r1
 8001672:	d9f4      	bls.n	800165e <_printf_i+0x11a>
 8001674:	2b08      	cmp	r3, #8
 8001676:	d10b      	bne.n	8001690 <_printf_i+0x14c>
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	07de      	lsls	r6, r3, #31
 800167c:	d508      	bpl.n	8001690 <_printf_i+0x14c>
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	6861      	ldr	r1, [r4, #4]
 8001682:	4299      	cmp	r1, r3
 8001684:	bfde      	ittt	le
 8001686:	2330      	movle	r3, #48	; 0x30
 8001688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800168c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001690:	1b52      	subs	r2, r2, r5
 8001692:	6122      	str	r2, [r4, #16]
 8001694:	f8cd a000 	str.w	sl, [sp]
 8001698:	464b      	mov	r3, r9
 800169a:	aa03      	add	r2, sp, #12
 800169c:	4621      	mov	r1, r4
 800169e:	4640      	mov	r0, r8
 80016a0:	f7ff fee2 	bl	8001468 <_printf_common>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d14c      	bne.n	8001742 <_printf_i+0x1fe>
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	b004      	add	sp, #16
 80016ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b2:	4835      	ldr	r0, [pc, #212]	; (8001788 <_printf_i+0x244>)
 80016b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80016b8:	6829      	ldr	r1, [r5, #0]
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80016c0:	6029      	str	r1, [r5, #0]
 80016c2:	061d      	lsls	r5, r3, #24
 80016c4:	d514      	bpl.n	80016f0 <_printf_i+0x1ac>
 80016c6:	07df      	lsls	r7, r3, #31
 80016c8:	bf44      	itt	mi
 80016ca:	f043 0320 	orrmi.w	r3, r3, #32
 80016ce:	6023      	strmi	r3, [r4, #0]
 80016d0:	b91e      	cbnz	r6, 80016da <_printf_i+0x196>
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	f023 0320 	bic.w	r3, r3, #32
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	2310      	movs	r3, #16
 80016dc:	e7b0      	b.n	8001640 <_printf_i+0xfc>
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f043 0320 	orr.w	r3, r3, #32
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	2378      	movs	r3, #120	; 0x78
 80016e8:	4828      	ldr	r0, [pc, #160]	; (800178c <_printf_i+0x248>)
 80016ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016ee:	e7e3      	b.n	80016b8 <_printf_i+0x174>
 80016f0:	0659      	lsls	r1, r3, #25
 80016f2:	bf48      	it	mi
 80016f4:	b2b6      	uxthmi	r6, r6
 80016f6:	e7e6      	b.n	80016c6 <_printf_i+0x182>
 80016f8:	4615      	mov	r5, r2
 80016fa:	e7bb      	b.n	8001674 <_printf_i+0x130>
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	6826      	ldr	r6, [r4, #0]
 8001700:	6961      	ldr	r1, [r4, #20]
 8001702:	1d18      	adds	r0, r3, #4
 8001704:	6028      	str	r0, [r5, #0]
 8001706:	0635      	lsls	r5, r6, #24
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	d501      	bpl.n	8001710 <_printf_i+0x1cc>
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	e002      	b.n	8001716 <_printf_i+0x1d2>
 8001710:	0670      	lsls	r0, r6, #25
 8001712:	d5fb      	bpl.n	800170c <_printf_i+0x1c8>
 8001714:	8019      	strh	r1, [r3, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	6123      	str	r3, [r4, #16]
 800171a:	4615      	mov	r5, r2
 800171c:	e7ba      	b.n	8001694 <_printf_i+0x150>
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	1d1a      	adds	r2, r3, #4
 8001722:	602a      	str	r2, [r5, #0]
 8001724:	681d      	ldr	r5, [r3, #0]
 8001726:	6862      	ldr	r2, [r4, #4]
 8001728:	2100      	movs	r1, #0
 800172a:	4628      	mov	r0, r5
 800172c:	f7fe fd78 	bl	8000220 <memchr>
 8001730:	b108      	cbz	r0, 8001736 <_printf_i+0x1f2>
 8001732:	1b40      	subs	r0, r0, r5
 8001734:	6060      	str	r0, [r4, #4]
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	6123      	str	r3, [r4, #16]
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001740:	e7a8      	b.n	8001694 <_printf_i+0x150>
 8001742:	6923      	ldr	r3, [r4, #16]
 8001744:	462a      	mov	r2, r5
 8001746:	4649      	mov	r1, r9
 8001748:	4640      	mov	r0, r8
 800174a:	47d0      	blx	sl
 800174c:	3001      	adds	r0, #1
 800174e:	d0ab      	beq.n	80016a8 <_printf_i+0x164>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	079b      	lsls	r3, r3, #30
 8001754:	d413      	bmi.n	800177e <_printf_i+0x23a>
 8001756:	68e0      	ldr	r0, [r4, #12]
 8001758:	9b03      	ldr	r3, [sp, #12]
 800175a:	4298      	cmp	r0, r3
 800175c:	bfb8      	it	lt
 800175e:	4618      	movlt	r0, r3
 8001760:	e7a4      	b.n	80016ac <_printf_i+0x168>
 8001762:	2301      	movs	r3, #1
 8001764:	4632      	mov	r2, r6
 8001766:	4649      	mov	r1, r9
 8001768:	4640      	mov	r0, r8
 800176a:	47d0      	blx	sl
 800176c:	3001      	adds	r0, #1
 800176e:	d09b      	beq.n	80016a8 <_printf_i+0x164>
 8001770:	3501      	adds	r5, #1
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	9903      	ldr	r1, [sp, #12]
 8001776:	1a5b      	subs	r3, r3, r1
 8001778:	42ab      	cmp	r3, r5
 800177a:	dcf2      	bgt.n	8001762 <_printf_i+0x21e>
 800177c:	e7eb      	b.n	8001756 <_printf_i+0x212>
 800177e:	2500      	movs	r5, #0
 8001780:	f104 0619 	add.w	r6, r4, #25
 8001784:	e7f5      	b.n	8001772 <_printf_i+0x22e>
 8001786:	bf00      	nop
 8001788:	080019fd 	.word	0x080019fd
 800178c:	08001a0e 	.word	0x08001a0e

08001790 <_sbrk_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4d06      	ldr	r5, [pc, #24]	; (80017ac <_sbrk_r+0x1c>)
 8001794:	2300      	movs	r3, #0
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	f7fe ffe0 	bl	8000760 <_sbrk>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_sbrk_r+0x1a>
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_sbrk_r+0x1a>
 80017a8:	6023      	str	r3, [r4, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	20000090 	.word	0x20000090

080017b0 <__sread>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	460c      	mov	r4, r1
 80017b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017b8:	f000 f8a0 	bl	80018fc <_read_r>
 80017bc:	2800      	cmp	r0, #0
 80017be:	bfab      	itete	ge
 80017c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017c2:	89a3      	ldrhlt	r3, [r4, #12]
 80017c4:	181b      	addge	r3, r3, r0
 80017c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017ca:	bfac      	ite	ge
 80017cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80017ce:	81a3      	strhlt	r3, [r4, #12]
 80017d0:	bd10      	pop	{r4, pc}

080017d2 <__swrite>:
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d6:	461f      	mov	r7, r3
 80017d8:	898b      	ldrh	r3, [r1, #12]
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	4605      	mov	r5, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	4616      	mov	r6, r2
 80017e2:	d505      	bpl.n	80017f0 <__swrite+0x1e>
 80017e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017e8:	2302      	movs	r3, #2
 80017ea:	2200      	movs	r2, #0
 80017ec:	f000 f868 	bl	80018c0 <_lseek_r>
 80017f0:	89a3      	ldrh	r3, [r4, #12]
 80017f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	4632      	mov	r2, r6
 80017fe:	463b      	mov	r3, r7
 8001800:	4628      	mov	r0, r5
 8001802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001806:	f000 b817 	b.w	8001838 <_write_r>

0800180a <__sseek>:
 800180a:	b510      	push	{r4, lr}
 800180c:	460c      	mov	r4, r1
 800180e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001812:	f000 f855 	bl	80018c0 <_lseek_r>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	bf15      	itete	ne
 800181c:	6560      	strne	r0, [r4, #84]	; 0x54
 800181e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001826:	81a3      	strheq	r3, [r4, #12]
 8001828:	bf18      	it	ne
 800182a:	81a3      	strhne	r3, [r4, #12]
 800182c:	bd10      	pop	{r4, pc}

0800182e <__sclose>:
 800182e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001832:	f000 b813 	b.w	800185c <_close_r>
	...

08001838 <_write_r>:
 8001838:	b538      	push	{r3, r4, r5, lr}
 800183a:	4d07      	ldr	r5, [pc, #28]	; (8001858 <_write_r+0x20>)
 800183c:	4604      	mov	r4, r0
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	2200      	movs	r2, #0
 8001844:	602a      	str	r2, [r5, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	f7fe ff1a 	bl	8000680 <_write>
 800184c:	1c43      	adds	r3, r0, #1
 800184e:	d102      	bne.n	8001856 <_write_r+0x1e>
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	b103      	cbz	r3, 8001856 <_write_r+0x1e>
 8001854:	6023      	str	r3, [r4, #0]
 8001856:	bd38      	pop	{r3, r4, r5, pc}
 8001858:	20000090 	.word	0x20000090

0800185c <_close_r>:
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4d06      	ldr	r5, [pc, #24]	; (8001878 <_close_r+0x1c>)
 8001860:	2300      	movs	r3, #0
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	f7fe ff45 	bl	80006f6 <_close>
 800186c:	1c43      	adds	r3, r0, #1
 800186e:	d102      	bne.n	8001876 <_close_r+0x1a>
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	b103      	cbz	r3, 8001876 <_close_r+0x1a>
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	bd38      	pop	{r3, r4, r5, pc}
 8001878:	20000090 	.word	0x20000090

0800187c <_fstat_r>:
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4d07      	ldr	r5, [pc, #28]	; (800189c <_fstat_r+0x20>)
 8001880:	2300      	movs	r3, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	602b      	str	r3, [r5, #0]
 800188a:	f7fe ff40 	bl	800070e <_fstat>
 800188e:	1c43      	adds	r3, r0, #1
 8001890:	d102      	bne.n	8001898 <_fstat_r+0x1c>
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	b103      	cbz	r3, 8001898 <_fstat_r+0x1c>
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	bd38      	pop	{r3, r4, r5, pc}
 800189a:	bf00      	nop
 800189c:	20000090 	.word	0x20000090

080018a0 <_isatty_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4d06      	ldr	r5, [pc, #24]	; (80018bc <_isatty_r+0x1c>)
 80018a4:	2300      	movs	r3, #0
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	602b      	str	r3, [r5, #0]
 80018ac:	f7fe ff3f 	bl	800072e <_isatty>
 80018b0:	1c43      	adds	r3, r0, #1
 80018b2:	d102      	bne.n	80018ba <_isatty_r+0x1a>
 80018b4:	682b      	ldr	r3, [r5, #0]
 80018b6:	b103      	cbz	r3, 80018ba <_isatty_r+0x1a>
 80018b8:	6023      	str	r3, [r4, #0]
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
 80018bc:	20000090 	.word	0x20000090

080018c0 <_lseek_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4d07      	ldr	r5, [pc, #28]	; (80018e0 <_lseek_r+0x20>)
 80018c4:	4604      	mov	r4, r0
 80018c6:	4608      	mov	r0, r1
 80018c8:	4611      	mov	r1, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	602a      	str	r2, [r5, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f7fe ff38 	bl	8000744 <_lseek>
 80018d4:	1c43      	adds	r3, r0, #1
 80018d6:	d102      	bne.n	80018de <_lseek_r+0x1e>
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	b103      	cbz	r3, 80018de <_lseek_r+0x1e>
 80018dc:	6023      	str	r3, [r4, #0]
 80018de:	bd38      	pop	{r3, r4, r5, pc}
 80018e0:	20000090 	.word	0x20000090

080018e4 <__malloc_lock>:
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <__malloc_lock+0x8>)
 80018e6:	f7ff bb1d 	b.w	8000f24 <__retarget_lock_acquire_recursive>
 80018ea:	bf00      	nop
 80018ec:	20000084 	.word	0x20000084

080018f0 <__malloc_unlock>:
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <__malloc_unlock+0x8>)
 80018f2:	f7ff bb18 	b.w	8000f26 <__retarget_lock_release_recursive>
 80018f6:	bf00      	nop
 80018f8:	20000084 	.word	0x20000084

080018fc <_read_r>:
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4d07      	ldr	r5, [pc, #28]	; (800191c <_read_r+0x20>)
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	2200      	movs	r2, #0
 8001908:	602a      	str	r2, [r5, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	f7fe fed6 	bl	80006bc <_read>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_read_r+0x1e>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_read_r+0x1e>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	20000090 	.word	0x20000090

08001920 <_init>:
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	bf00      	nop
 8001924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001926:	bc08      	pop	{r3}
 8001928:	469e      	mov	lr, r3
 800192a:	4770      	bx	lr

0800192c <_fini>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	bf00      	nop
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr
