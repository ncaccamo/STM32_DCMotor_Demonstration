
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800538c  0800538c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800538c  0800538c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000558  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c0  200005c0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045dc4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cad  00000000  00000000  00065e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ba8  00000000  00000000  00068b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029e0  00000000  00000000  0006b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173b9  00000000  00000000  0006e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001530a  00000000  00000000  00085451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef5b  00000000  00000000  0009a75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001296b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c770  00000000  00000000  00129708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080048e0 	.word	0x080048e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080048e0 	.word	0x080048e0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
    //set flash latency to 4
    FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 8000ab0:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <sysClockConfig+0x15c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a54      	ldr	r2, [pc, #336]	; (8000c08 <sysClockConfig+0x15c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6013      	str	r3, [r2, #0]


    //enable HSI oscillator and then wait for clock ready flag
    RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 8000abc:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <sysClockConfig+0x160>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a52      	ldr	r2, [pc, #328]	; (8000c0c <sysClockConfig+0x160>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 8000ac8:	bf00      	nop
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <sysClockConfig+0x160>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f9      	beq.n	8000aca <sysClockConfig+0x1e>

    //set AHB, APB2, APB1 prescalar
    RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <sysClockConfig+0x160>)
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <sysClockConfig+0x160>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <sysClockConfig+0x160>)
 8000ae0:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <sysClockConfig+0x160>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <sysClockConfig+0x160>)
 8000ae8:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <sysClockConfig+0x160>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	6093      	str	r3, [r2, #8]

    //set PLL configuration register
    RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <sysClockConfig+0x160>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <sysClockConfig+0x160>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <sysClockConfig+0x160>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	4a43      	ldr	r2, [pc, #268]	; (8000c0c <sysClockConfig+0x160>)
 8000b00:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000b04:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <sysClockConfig+0x160>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	4a40      	ldr	r2, [pc, #256]	; (8000c0c <sysClockConfig+0x160>)
 8000b0c:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000b10:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 8000b12:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <sysClockConfig+0x160>)
 8000b14:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <sysClockConfig+0x160>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <sysClockConfig+0x160>)
 8000b1c:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <sysClockConfig+0x160>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <sysClockConfig+0x160>)
 8000b24:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <sysClockConfig+0x160>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <sysClockConfig+0x160>)
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <sysClockConfig+0x160>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <sysClockConfig+0x160>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4a35      	ldr	r2, [pc, #212]	; (8000c0c <sysClockConfig+0x160>)
 8000b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3c:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <sysClockConfig+0x160>)
 8000b40:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <sysClockConfig+0x160>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <sysClockConfig+0x160>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <sysClockConfig+0x160>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	60d3      	str	r3, [r2, #12]

    //enable PLL and wait for ready
    RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <sysClockConfig+0x160>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <sysClockConfig+0x160>)
 8000b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b5c:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 8000b5e:	bf00      	nop
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <sysClockConfig+0x160>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f9      	beq.n	8000b60 <sysClockConfig+0xb4>

    //set PLL as system clock and wait for ready
    RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <sysClockConfig+0x160>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <sysClockConfig+0x160>)
 8000b72:	f043 0303 	orr.w	r3, r3, #3
 8000b76:	6093      	str	r3, [r2, #8]
    while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 8000b78:	bf00      	nop
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <sysClockConfig+0x160>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f9      	beq.n	8000b7a <sysClockConfig+0xce>

    //enable clock for System Configuration controller
    RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <sysClockConfig+0x160>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <sysClockConfig+0x160>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60

    //enable clock for GPIO ports A, B, C, D
    RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <sysClockConfig+0x160>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <sysClockConfig+0x160>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <sysClockConfig+0x160>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <sysClockConfig+0x160>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <sysClockConfig+0x160>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <sysClockConfig+0x160>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIODEN_Pos);
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <sysClockConfig+0x160>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <sysClockConfig+0x160>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c

    //enable clock for TIM3, TIM4, TIM8, TIM15
    RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM3EN_Pos);
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <sysClockConfig+0x160>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <sysClockConfig+0x160>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6593      	str	r3, [r2, #88]	; 0x58
    RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <sysClockConfig+0x160>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <sysClockConfig+0x160>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
    RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM8EN_Pos);
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <sysClockConfig+0x160>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <sysClockConfig+0x160>)
 8000be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
    RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM15EN_Pos);
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <sysClockConfig+0x160>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <sysClockConfig+0x160>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60

    //enable clock for SPI3
    RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_SPI3EN_Pos);
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <sysClockConfig+0x160>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <sysClockConfig+0x160>)
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58


}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40022000 	.word	0x40022000
 8000c0c:	40021000 	.word	0x40021000

08000c10 <displayInit>:
/**
 * Function to initialize the display using the u8g2 library.
 * Parameters: none
 * Returns: none
 */
void displayInit(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    //make sure RES is held high during normal operation
    setPin(DIS_RES_PORT, DIS_RES_PIN, PIN_HIGH);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fae0 	bl	80011e2 <setPin>
    delayMs(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f001 f822 	bl	8001c6c <delayMs>

    u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);  // init u8g2 structure
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <displayInit+0x38>)
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <displayInit+0x3c>)
 8000c2c:	4908      	ldr	r1, [pc, #32]	; (8000c50 <displayInit+0x40>)
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <displayInit+0x44>)
 8000c30:	f001 f94c 	bl	8001ecc <u8g2_Setup_ssd1306_128x64_noname_f>
    u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <displayInit+0x44>)
 8000c36:	f002 fd15 	bl	8003664 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <displayInit+0x44>)
 8000c3e:	f002 fd20 	bl	8003682 <u8x8_SetPowerSave>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	08000c59 	.word	0x08000c59
 8000c4c:	08000d55 	.word	0x08000d55
 8000c50:	08005278 	.word	0x08005278
 8000c54:	20000084 	.word	0x20000084

08000c58 <u8x8_stm32_gpio_and_delay>:
 * Returns: Confirmation status
 */
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8,
    uint8_t msg, uint8_t arg_int,
    void *arg_ptr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	72fb      	strb	r3, [r7, #11]
 8000c66:	4613      	mov	r3, r2
 8000c68:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	3b28      	subs	r3, #40	; 0x28
 8000c6e:	2b23      	cmp	r3, #35	; 0x23
 8000c70:	d868      	bhi.n	8000d44 <u8x8_stm32_gpio_and_delay+0xec>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <u8x8_stm32_gpio_and_delay+0x20>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000d09 	.word	0x08000d09
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d11 	.word	0x08000d11
 8000c84:	08000d45 	.word	0x08000d45
 8000c88:	08000d45 	.word	0x08000d45
 8000c8c:	08000d45 	.word	0x08000d45
 8000c90:	08000d45 	.word	0x08000d45
 8000c94:	08000d45 	.word	0x08000d45
 8000c98:	08000d45 	.word	0x08000d45
 8000c9c:	08000d45 	.word	0x08000d45
 8000ca0:	08000d45 	.word	0x08000d45
 8000ca4:	08000d45 	.word	0x08000d45
 8000ca8:	08000d45 	.word	0x08000d45
 8000cac:	08000d45 	.word	0x08000d45
 8000cb0:	08000d45 	.word	0x08000d45
 8000cb4:	08000d45 	.word	0x08000d45
 8000cb8:	08000d45 	.word	0x08000d45
 8000cbc:	08000d45 	.word	0x08000d45
 8000cc0:	08000d45 	.word	0x08000d45
 8000cc4:	08000d45 	.word	0x08000d45
 8000cc8:	08000d45 	.word	0x08000d45
 8000ccc:	08000d45 	.word	0x08000d45
 8000cd0:	08000d45 	.word	0x08000d45
 8000cd4:	08000d45 	.word	0x08000d45
 8000cd8:	08000d45 	.word	0x08000d45
 8000cdc:	08000d45 	.word	0x08000d45
 8000ce0:	08000d45 	.word	0x08000d45
 8000ce4:	08000d45 	.word	0x08000d45
 8000ce8:	08000d45 	.word	0x08000d45
 8000cec:	08000d45 	.word	0x08000d45
 8000cf0:	08000d45 	.word	0x08000d45
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d45 	.word	0x08000d45
 8000cfc:	08000d45 	.word	0x08000d45
 8000d00:	08000d25 	.word	0x08000d25
 8000d04:	08000d33 	.word	0x08000d33
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    delayMs(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 ffaf 	bl	8001c6c <delayMs>
    break;
 8000d0e:	e019      	b.n	8000d44 <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_DELAY_10MICRO:      // delay arg_int * 10 micro seconds
    delayMs(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 ffab 	bl	8001c6c <delayMs>
    break;
 8000d16:	e015      	b.n	8000d44 <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_DELAY_MILLI:
    delayMs(arg_int);
 8000d18:	7abb      	ldrb	r3, [r7, #10]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ffa5 	bl	8001c6c <delayMs>
    break;
 8000d22:	e00f      	b.n	8000d44 <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_GPIO_DC:
    setPin(DIS_DC_PORT, DIS_DC_PIN, arg_int);
 8000d24:	7abb      	ldrb	r3, [r7, #10]
 8000d26:	461a      	mov	r2, r3
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <u8x8_stm32_gpio_and_delay+0xf8>)
 8000d2c:	f000 fa59 	bl	80011e2 <setPin>
    break;
 8000d30:	e008      	b.n	8000d44 <u8x8_stm32_gpio_and_delay+0xec>
  case U8X8_MSG_GPIO_RESET:
    setPin(DIS_RES_PORT, DIS_RES_PIN, arg_int);
 8000d32:	7abb      	ldrb	r3, [r7, #10]
 8000d34:	461a      	mov	r2, r3
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f000 fa50 	bl	80011e2 <setPin>
    break;
 8000d42:	bf00      	nop
  }
  return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	48000c00 	.word	0x48000c00

08000d54 <u8x8_byte_4wire_hw_spi>:
 * Parameters: none
 * Returns: Confirmation status
 */
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
    void *arg_ptr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	72fb      	strb	r3, [r7, #11]
 8000d62:	4613      	mov	r3, r2
 8000d64:	72bb      	strb	r3, [r7, #10]
uint8_t *data;
  switch (msg)
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	3b14      	subs	r3, #20
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d83b      	bhi.n	8000de6 <u8x8_byte_4wire_hw_spi+0x92>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <u8x8_byte_4wire_hw_spi+0x20>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000de7 	.word	0x08000de7
 8000d7c:	08000de7 	.word	0x08000de7
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	08000ddb 	.word	0x08000ddb
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000de7 	.word	0x08000de7
 8000d90:	08000de7 	.word	0x08000de7
 8000d94:	08000de7 	.word	0x08000de7
 8000d98:	08000de7 	.word	0x08000de7
 8000d9c:	08000de7 	.word	0x08000de7
 8000da0:	08000de7 	.word	0x08000de7
 8000da4:	08000dcd 	.word	0x08000dcd
  {
  case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	617b      	str	r3, [r7, #20]
      while(arg_int > 0) {
 8000dac:	e00a      	b.n	8000dc4 <u8x8_byte_4wire_hw_spi+0x70>
          transferSPIByte((uint8_t)*data);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fd7a 	bl	80018ac <transferSPIByte>
          data++;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
          arg_int--;
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	72bb      	strb	r3, [r7, #10]
      while(arg_int > 0) {
 8000dc4:	7abb      	ldrb	r3, [r7, #10]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f1      	bne.n	8000dae <u8x8_byte_4wire_hw_spi+0x5a>
      }
      break;
 8000dca:	e00f      	b.n	8000dec <u8x8_byte_4wire_hw_spi+0x98>
  case U8X8_MSG_BYTE_INIT:
    break;
  case U8X8_MSG_BYTE_SET_DC:
    setPin(DIS_DC_PORT, DIS_DC_PIN, arg_int);
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <u8x8_byte_4wire_hw_spi+0xa4>)
 8000dd4:	f000 fa05 	bl	80011e2 <setPin>
    break;
 8000dd8:	e008      	b.n	8000dec <u8x8_byte_4wire_hw_spi+0x98>
  case U8X8_MSG_BYTE_START_TRANSFER:
    startTransferSPI();
 8000dda:	f000 fd81 	bl	80018e0 <startTransferSPI>
    break;
 8000dde:	e005      	b.n	8000dec <u8x8_byte_4wire_hw_spi+0x98>
  case U8X8_MSG_BYTE_END_TRANSFER:
    endTransferSPI();
 8000de0:	f000 fd96 	bl	8001910 <endTransferSPI>
    break;
 8000de4:	e002      	b.n	8000dec <u8x8_byte_4wire_hw_spi+0x98>
  default:
    return 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e001      	b.n	8000dee <u8x8_byte_4wire_hw_spi+0x9a>
    break;
 8000dea:	bf00      	nop
  }
  return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	48000c00 	.word	0x48000c00

08000dfc <drawDisplay>:
 * then updated on the display. This function is intended to be called periodically to keep the data
 * shown on the screen up to date.
 * Parameters: none
 * Returns: none
 */
void drawDisplay(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af02      	add	r7, sp, #8
    int16_t speed = queryAverageMotorSpeed();
 8000e02:	f000 fd09 	bl	8001818 <queryAverageMotorSpeed>
 8000e06:	4603      	mov	r3, r0
 8000e08:	82fb      	strh	r3, [r7, #22]
    int8_t speedString[4];
    sprintf((char *)speedString, "%d", speed);
 8000e0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	493c      	ldr	r1, [pc, #240]	; (8000f04 <drawDisplay+0x108>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fd6b 	bl	80038f0 <siprintf>

    int16_t duty = queryMotorDuty();
 8000e1a:	f000 fd09 	bl	8001830 <queryMotorDuty>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	82bb      	strh	r3, [r7, #20]
    int8_t dutyString[4];
    sprintf((char *)dutyString, "%d", duty);
 8000e22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4936      	ldr	r1, [pc, #216]	; (8000f04 <drawDisplay+0x108>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fd5f 	bl	80038f0 <siprintf>

    int16_t direction = queryMotorDirection();
 8000e32:	f000 fce5 	bl	8001800 <queryMotorDirection>
 8000e36:	4603      	mov	r3, r0
 8000e38:	827b      	strh	r3, [r7, #18]
    int8_t directionString[4];
    if (direction == MOTOR_FORWARD){
 8000e3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <drawDisplay+0x54>
        sprintf((char *)directionString, "%s", "CW");
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4a30      	ldr	r2, [pc, #192]	; (8000f08 <drawDisplay+0x10c>)
 8000e46:	4931      	ldr	r1, [pc, #196]	; (8000f0c <drawDisplay+0x110>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fd51 	bl	80038f0 <siprintf>
 8000e4e:	e005      	b.n	8000e5c <drawDisplay+0x60>
    } else {
        sprintf((char *)directionString, "%s", "CCW");
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <drawDisplay+0x114>)
 8000e54:	492d      	ldr	r1, [pc, #180]	; (8000f0c <drawDisplay+0x110>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fd4a 	bl	80038f0 <siprintf>

    //int16_t temperature = queryMotorTemperature();
    //int8_t temperatureString[4];
    //sprintf((char *)temperatureString, "%d", temperature);

    u8g2_ClearBuffer(&u8g2);
 8000e5c:	482d      	ldr	r0, [pc, #180]	; (8000f14 <drawDisplay+0x118>)
 8000e5e:	f000 ffa3 	bl	8001da8 <u8g2_ClearBuffer>
    u8g2_DrawFrame(&u8g2, 0, 0, 128, 64);
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4829      	ldr	r0, [pc, #164]	; (8000f14 <drawDisplay+0x118>)
 8000e6e:	f000 ff3e 	bl	8001cee <u8g2_DrawFrame>
    u8g2_SetFont(&u8g2, u8g2_font_7x13_tf);             //7 width, 13 height characters
 8000e72:	4929      	ldr	r1, [pc, #164]	; (8000f18 <drawDisplay+0x11c>)
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <drawDisplay+0x118>)
 8000e76:	f001 fdd9 	bl	8002a2c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 3, 14, (char *)speedString);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	220e      	movs	r2, #14
 8000e80:	2103      	movs	r1, #3
 8000e82:	4824      	ldr	r0, [pc, #144]	; (8000f14 <drawDisplay+0x118>)
 8000e84:	f001 fd30 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 30, 14, "RPM");
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <drawDisplay+0x120>)
 8000e8a:	220e      	movs	r2, #14
 8000e8c:	211e      	movs	r1, #30
 8000e8e:	4821      	ldr	r0, [pc, #132]	; (8000f14 <drawDisplay+0x118>)
 8000e90:	f001 fd2a 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 3, 28, "Duty: ");
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <drawDisplay+0x124>)
 8000e96:	221c      	movs	r2, #28
 8000e98:	2103      	movs	r1, #3
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <drawDisplay+0x118>)
 8000e9c:	f001 fd24 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 45, 28, (char *)dutyString);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	221c      	movs	r2, #28
 8000ea6:	212d      	movs	r1, #45	; 0x2d
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <drawDisplay+0x118>)
 8000eaa:	f001 fd1d 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawGlyph(&u8g2, 66, 28, 37);
 8000eae:	2325      	movs	r3, #37	; 0x25
 8000eb0:	221c      	movs	r2, #28
 8000eb2:	2142      	movs	r1, #66	; 0x42
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <drawDisplay+0x118>)
 8000eb6:	f001 fc69 	bl	800278c <u8g2_DrawGlyph>
    u8g2_DrawStr(&u8g2, 3, 42, "Direction: ");
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <drawDisplay+0x128>)
 8000ebc:	222a      	movs	r2, #42	; 0x2a
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <drawDisplay+0x118>)
 8000ec2:	f001 fd11 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 79, 42, (char *)directionString);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	222a      	movs	r2, #42	; 0x2a
 8000eca:	214f      	movs	r1, #79	; 0x4f
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <drawDisplay+0x118>)
 8000ece:	f001 fd0b 	bl	80028e8 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 3, 56, "Temperature: ");
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <drawDisplay+0x12c>)
 8000ed4:	2238      	movs	r2, #56	; 0x38
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <drawDisplay+0x118>)
 8000eda:	f001 fd05 	bl	80028e8 <u8g2_DrawStr>
    //u8g2_DrawStr(&u8g2, 87, 56, (char *)temperatureString);
    u8g2_DrawGlyph(&u8g2, 108, 56, 176);
 8000ede:	23b0      	movs	r3, #176	; 0xb0
 8000ee0:	2238      	movs	r2, #56	; 0x38
 8000ee2:	216c      	movs	r1, #108	; 0x6c
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <drawDisplay+0x118>)
 8000ee6:	f001 fc51 	bl	800278c <u8g2_DrawGlyph>
    u8g2_DrawStr(&u8g2, 115, 56, "C");
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <drawDisplay+0x130>)
 8000eec:	2238      	movs	r2, #56	; 0x38
 8000eee:	2173      	movs	r1, #115	; 0x73
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <drawDisplay+0x118>)
 8000ef2:	f001 fcf9 	bl	80028e8 <u8g2_DrawStr>
    u8g2_SendBuffer(&u8g2);
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <drawDisplay+0x118>)
 8000ef8:	f000 ffc9 	bl	8001e8e <u8g2_SendBuffer>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	080048f8 	.word	0x080048f8
 8000f08:	080048fc 	.word	0x080048fc
 8000f0c:	08004900 	.word	0x08004900
 8000f10:	08004904 	.word	0x08004904
 8000f14:	20000084 	.word	0x20000084
 8000f18:	08004960 	.word	0x08004960
 8000f1c:	08004908 	.word	0x08004908
 8000f20:	0800490c 	.word	0x0800490c
 8000f24:	08004914 	.word	0x08004914
 8000f28:	08004920 	.word	0x08004920
 8000f2c:	08004930 	.word	0x08004930

08000f30 <rotaryEncoderRotation>:
 * State machine for detecting encoder rotation. Updates counter variable.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 * Parameters: none
 * Returns: none
 */
void rotaryEncoderRotation(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    rotaryEncoder.currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <rotaryEncoderRotation+0xac>)
 8000f3a:	f000 f93d 	bl	80011b8 <readPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f44:	709a      	strb	r2, [r3, #2]
    rotaryEncoder.currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <rotaryEncoderRotation+0xac>)
 8000f4c:	f000 f934 	bl	80011b8 <readPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f56:	70da      	strb	r2, [r3, #3]

    //encoder is moving
    if (rotaryEncoder.currentStateCLK != rotaryEncoder.currentStateDT) {
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f5a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f60:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d010      	beq.n	8000f8a <rotaryEncoderRotation+0x5a>
        //CLK changed first; CW
        if (rotaryEncoder.currentStateCLK != rotaryEncoder.lastStateCLK) {
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f6a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d003      	beq.n	8000f82 <rotaryEncoderRotation+0x52>
            rotaryEncoder.rotationDirection = 1;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	721a      	strb	r2, [r3, #8]
 8000f80:	e01a      	b.n	8000fb8 <rotaryEncoderRotation+0x88>
            //else DT changed first; CCW
        } else {

            rotaryEncoder.rotationDirection = -1;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	721a      	strb	r2, [r3, #8]
 8000f88:	e016      	b.n	8000fb8 <rotaryEncoderRotation+0x88>
        }
    //both pins are at same state, so encoder has stopped moving
    } else {
        if (rotaryEncoder.currentStateCLK != rotaryEncoder.lastStateCLK) {
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d007      	beq.n	8000fac <rotaryEncoderRotation+0x7c>
            rotaryEncoder.counter += rotaryEncoder.rotationDirection;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fa2:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000faa:	6053      	str	r3, [r2, #4]
        }
        //update last CLK state to be ready to detect next movement
        rotaryEncoder.lastStateCLK = rotaryEncoder.currentStateCLK;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fb6:	801a      	strh	r2, [r3, #0]
    }


    //keep counter between 0 and 100
    if (rotaryEncoder.counter < 0){
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da03      	bge.n	8000fc8 <rotaryEncoderRotation+0x98>
        rotaryEncoder.counter = 0;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
    } else if (rotaryEncoder.counter > 100){
        rotaryEncoder.counter = 100;
    }
}
 8000fc6:	e006      	b.n	8000fd6 <rotaryEncoderRotation+0xa6>
    } else if (rotaryEncoder.counter > 100){
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b64      	cmp	r3, #100	; 0x64
 8000fce:	dd02      	ble.n	8000fd6 <rotaryEncoderRotation+0xa6>
        rotaryEncoder.counter = 100;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <rotaryEncoderRotation+0xb0>)
 8000fd2:	2264      	movs	r2, #100	; 0x64
 8000fd4:	605a      	str	r2, [r3, #4]
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	20000118 	.word	0x20000118

08000fe4 <queryRotaryEncoderCount>:
/**
 * Function to query the encoder structure for the encoder count.
 * Parameters: none
 * Returns: Encoder counter value.
 */
int32_t queryRotaryEncoderCount(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
    return rotaryEncoder.counter;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <queryRotaryEncoderCount+0x14>)
 8000fea:	685b      	ldr	r3, [r3, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000118 	.word	0x20000118

08000ffc <gpioInit>:
 * Function to set the GPIO registers.
 * Parameters: none
 * Returns: none
 */

void gpioInit(){
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
    //clock for GPIO enabled in clockconfig.c

    //clear MODER registers, but leave JTAG pins in reset state
    GPIOA->MODER &= ~(0x03FFFFFF);
 8001000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100a:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 800100e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(0xFFFFFC3F);
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <gpioInit+0x1b0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a65      	ldr	r2, [pc, #404]	; (80011ac <gpioInit+0x1b0>)
 8001016:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 800101a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(0xFFFFFFFF);
 800101c:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <gpioInit+0x1b4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <gpioInit+0x1b4>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
    GPIOD->MODER &= ~(0xFFFFFFFF);
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <gpioInit+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <gpioInit+0x1b8>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]



    //set PB13, PB14, PB15 set as inputs (rotary encoder)
    GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 8001030:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <gpioInit+0x1b0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <gpioInit+0x1b0>)
 8001036:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800103a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 800103c:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <gpioInit+0x1b0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <gpioInit+0x1b0>)
 8001042:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001046:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <gpioInit+0x1b0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a57      	ldr	r2, [pc, #348]	; (80011ac <gpioInit+0x1b0>)
 800104e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001052:	6013      	str	r3, [r2, #0]

    //set pull-up pull-down register for inputs
    GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8001054:	4b55      	ldr	r3, [pc, #340]	; (80011ac <gpioInit+0x1b0>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a54      	ldr	r2, [pc, #336]	; (80011ac <gpioInit+0x1b0>)
 800105a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 8001060:	4b52      	ldr	r3, [pc, #328]	; (80011ac <gpioInit+0x1b0>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <gpioInit+0x1b0>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 800106c:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <gpioInit+0x1b0>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <gpioInit+0x1b0>)
 8001072:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001076:	60d3      	str	r3, [r2, #12]



    //set outputs
    GPIOA->MODER |= (0x01 << GPIO_MODER_MODE15_Pos);     //Display_RES
 8001078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001086:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (0x01 << GPIO_MODER_MODE11_Pos);     //Display_CS
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <gpioInit+0x1b4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <gpioInit+0x1b4>)
 800108e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001092:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x01 << GPIO_MODER_MODE2_Pos);      //Display_DC
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <gpioInit+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <gpioInit+0x1b8>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);      //Motor Driver In2
 80010a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);      //Motor Driver In1
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <gpioInit+0x1b4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a3e      	ldr	r2, [pc, #248]	; (80011b0 <gpioInit+0x1b4>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6013      	str	r3, [r2, #0]

    //set outputs as push-pull
    GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE15_Pos);
 80010bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80010ca:	6053      	str	r3, [r2, #4]
    GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE11_Pos);
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <gpioInit+0x1b4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a37      	ldr	r2, [pc, #220]	; (80011b0 <gpioInit+0x1b4>)
 80010d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010d6:	6053      	str	r3, [r2, #4]
    GPIOD->OTYPER &= ~(0x01 << GPIO_MODER_MODE2_Pos);
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <gpioInit+0x1b8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <gpioInit+0x1b8>)
 80010de:	f023 0310 	bic.w	r3, r3, #16
 80010e2:	6053      	str	r3, [r2, #4]
    GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 80010e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6053      	str	r3, [r2, #4]
    GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <gpioInit+0x1b4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <gpioInit+0x1b4>)
 80010fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010fe:	6053      	str	r3, [r2, #4]



    //set PA11, PA12 to alternate function mode (TIM4)
    GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 8001100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800110a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800110e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8001110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111e:	6013      	str	r3, [r2, #0]

    //set PA11, P12 alternate function to AF10 (TIM4)
    GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 8001120:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800112a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800112e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 8001130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800113a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800113e:	6253      	str	r3, [r2, #36]	; 0x24

    //set PB6 to alternate function mode AF5 (TIM8)
    GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <gpioInit+0x1b0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <gpioInit+0x1b0>)
 8001146:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800114a:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <gpioInit+0x1b0>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a16      	ldr	r2, [pc, #88]	; (80011ac <gpioInit+0x1b0>)
 8001152:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8001156:	6213      	str	r3, [r2, #32]

    //set PC10, PC12 alternate function mode (SPI3)
    GPIOC->MODER |= (0x02 << GPIO_MODER_MODE10_Pos);
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <gpioInit+0x1b4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <gpioInit+0x1b4>)
 800115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001162:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <gpioInit+0x1b4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <gpioInit+0x1b4>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	6013      	str	r3, [r2, #0]

    //set PC10, PC12 alternate function to AF6 (SPI3)
    GPIOC->AFR[1] |= (0x06 << GPIO_AFRH_AFSEL10_Pos);		//SPI3_SCK
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <gpioInit+0x1b4>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <gpioInit+0x1b4>)
 8001176:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800117a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= (0x06 << GPIO_AFRH_AFSEL12_Pos);		//SPI3_MOSI
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <gpioInit+0x1b4>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <gpioInit+0x1b4>)
 8001182:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8001186:	6253      	str	r3, [r2, #36]	; 0x24
    //set PA0? to ADC input



    //set PB1 as output for LED debugging
    GPIOB->MODER |= (0x01 << GPIO_MODER_MODE1_Pos);
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <gpioInit+0x1b0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <gpioInit+0x1b0>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(0x01 << GPIO_MODER_MODE1_Pos);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <gpioInit+0x1b0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <gpioInit+0x1b0>)
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6053      	str	r3, [r2, #4]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000c00 	.word	0x48000c00

080011b8 <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 * Returns: PIN_LOW or PIN_HIGH for state of pin.
 */

int16_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
    if ((GPIOx->IDR & GPIO_PIN_x) != PIN_LOW) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <readPin+0x1c>
        return PIN_HIGH;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <readPin+0x1e>
    }
    else {
        return PIN_LOW;
 80011d4:	2300      	movs	r3, #0
    }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <setPin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void setPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x, pinstate_t pinState){
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	707b      	strb	r3, [r7, #1]
    if (pinState == PIN_LOW){
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <setPin+0x22>
        //set pin LOW
        GPIOx->BSRR = (GPIO_PIN_x << 16U);
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
    }
    else if (pinState == PIN_HIGH){
        //set pin HIGH
        GPIOx->BSRR = GPIO_PIN_x;
    }
}
 8001202:	e005      	b.n	8001210 <setPin+0x2e>
    else if (pinState == PIN_HIGH){
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <setPin+0x2e>
        GPIOx->BSRR = GPIO_PIN_x;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <interruptInit>:
/**
 * Function to initialize interrupts.
 * Parameters: none
 * Returns: none
 */
void interruptInit(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    //System Configuration clock enabled in clockconfig.c

    //GPIO interrupt for encoder switch
    SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);		//EXTI Line15 Interrupt, PB15 (Rotary Encoder SW)
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <interruptInit+0x58>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <interruptInit+0x58>)
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ba:	6153      	str	r3, [r2, #20]
    EXTI->IMR1 |= (0x01 << EXTI_IMR1_IM15_Pos);     				//set interrupt mask register
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <interruptInit+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <interruptInit+0x5c>)
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);					//trigger on falling edge
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <interruptInit+0x5c>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <interruptInit+0x5c>)
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(EXTI15_10_IRQn, 0);							//set priority and enable EXTI15_10_IRQHandler
 80012d4:	2100      	movs	r1, #0
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f7ff ffbe 	bl	8001258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012dc:	2028      	movs	r0, #40	; 0x28
 80012de:	f7ff ff9d 	bl	800121c <__NVIC_EnableIRQ>

    //enable timer interrupt for TIM3
    NVIC_SetPriority(TIM3_IRQn, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	201d      	movs	r0, #29
 80012e6:	f7ff ffb7 	bl	8001258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM3_IRQn);
 80012ea:	201d      	movs	r0, #29
 80012ec:	f7ff ff96 	bl	800121c <__NVIC_EnableIRQ>

    //enable timer interrupt for TIM15
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2018      	movs	r0, #24
 80012f4:	f7ff ffb0 	bl	8001258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012f8:	2018      	movs	r0, #24
 80012fa:	f7ff ff8f 	bl	800121c <__NVIC_EnableIRQ>


}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40010000 	.word	0x40010000
 8001308:	40010400 	.word	0x40010400

0800130c <EXTI15_10_IRQHandler>:
/**
 * IRQ Handler and ISR for EXTI lines 10-15 interrupts.
 * Parameters: none
 * Returns: none
 */
void EXTI15_10_IRQHandler(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    //check if the encoder switch pin is the one triggering interrupt
    if ((EXTI->PR1 & (ENC_SW_PIN)) != 0) {
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <EXTI15_10_IRQHandler+0x44>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <EXTI15_10_IRQHandler+0x38>
        //clear interrupt pending bit
        EXTI->PR1 = (ENC_SW_PIN);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <EXTI15_10_IRQHandler+0x44>)
 800131e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001322:	615a      	str	r2, [r3, #20]
        //change motor direction based on current setting
        switch (queryMotorDirection()) {
 8001324:	f000 fa6c 	bl	8001800 <queryMotorDirection>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <EXTI15_10_IRQHandler+0x28>
 800132e:	2b01      	cmp	r3, #1
 8001330:	d004      	beq.n	800133c <EXTI15_10_IRQHandler+0x30>
 8001332:	e008      	b.n	8001346 <EXTI15_10_IRQHandler+0x3a>
        case MOTOR_FORWARD:
            attemptSetMotorDirection(MOTOR_REVERSE);
 8001334:	2001      	movs	r0, #1
 8001336:	f000 f91f 	bl	8001578 <attemptSetMotorDirection>
            break;
 800133a:	e004      	b.n	8001346 <EXTI15_10_IRQHandler+0x3a>
        case MOTOR_REVERSE:
            attemptSetMotorDirection(MOTOR_FORWARD);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f91b 	bl	8001578 <attemptSetMotorDirection>
            break;
 8001342:	e000      	b.n	8001346 <EXTI15_10_IRQHandler+0x3a>
        }
    }
 8001344:	bf00      	nop
    printf("switch interrupt\n");
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <EXTI15_10_IRQHandler+0x48>)
 8001348:	f002 faca 	bl	80038e0 <puts>

    //These don't work? Interrupt keeps firing.
    //NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
    //NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010400 	.word	0x40010400
 8001354:	08004934 	.word	0x08004934

08001358 <TIM3_IRQHandler>:
/**
 * IRQ Handler and ISR for TIM3 interrupts.
 * Parameters: none
 * Returns: none
 */
void TIM3_IRQHandler(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    //check if the interrupt is caused by update event
    if ((TIM3->SR & (TIM_SR_UIF)) != 0) {
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <TIM3_IRQHandler+0x34>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <TIM3_IRQHandler+0x2e>
        //clear interrupt pending bit
        TIM3->SR = ~(TIM_SR_UIF);
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <TIM3_IRQHandler+0x34>)
 800136a:	f06f 0201 	mvn.w	r2, #1
 800136e:	611a      	str	r2, [r3, #16]
        //check encoder movement, update count
        rotaryEncoderRotation();
 8001370:	f7ff fdde 	bl	8000f30 <rotaryEncoderRotation>
        //set motor duty cycle based on encoder count
        setMotorDuty(queryRotaryEncoderCount());
 8001374:	f7ff fe36 	bl	8000fe4 <queryRotaryEncoderCount>
 8001378:	4603      	mov	r3, r0
 800137a:	b21b      	sxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f935 	bl	80015ec <setMotorDuty>
        //measure the motor speed
        measureMotorSpeed();
 8001382:	f000 f951 	bl	8001628 <measureMotorSpeed>
        //measure motor temperature (consider longer time)
        //update display based on motor speed and temp
        }
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000400 	.word	0x40000400

08001390 <TIM1_BRK_TIM15_IRQHandler>:
/**
 * IRQ Handler and ISR for "TIM1 Break, Transition error, Index error and TIM15 global interrupt"
 * Parameters: none
 * Returns: none
 */
void TIM1_BRK_TIM15_IRQHandler(void){
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
    //check if the interrupt is caused by TIM15 update event
    if ((TIM15->SR & (TIM_SR_UIF)) != 0) {
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <TIM1_BRK_TIM15_IRQHandler+0x1e>
        //clear interrupt pending bit
        TIM15->SR = ~(TIM_SR_UIF);
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 80013a2:	f06f 0201 	mvn.w	r2, #1
 80013a6:	611a      	str	r2, [r3, #16]
        gDrawFlag = 1;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <TIM1_BRK_TIM15_IRQHandler+0x2c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    }

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40014000 	.word	0x40014000
 80013bc:	20000124 	.word	0x20000124

080013c0 <SysTick_Handler>:
 * IRQ Handler and ISR for SysTick
 * Parameters: none
 * Returns: none
 */
void SysTick_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
    gMsTicks++;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Handler+0x1c>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <SysTick_Handler+0x1c>)
 80013d0:	801a      	strh	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	200001ac 	.word	0x200001ac

080013e0 <__NVIC_SetPriority>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ffc2 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001480:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001484:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001490:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001494:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001498:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a0:	e000      	b.n	80014a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f9      	beq.n	80014a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <main>:
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    sysClockConfig();
 80014cc:	f7ff faee 	bl	8000aac <sysClockConfig>
    gpioInit();
 80014d0:	f7ff fd94 	bl	8000ffc <gpioInit>
    interruptInit();
 80014d4:	f7ff feea 	bl	80012ac <interruptInit>
    TIM3Init();
 80014d8:	f000 fad2 	bl	8001a80 <TIM3Init>
    TIM4Init();
 80014dc:	f000 faf8 	bl	8001ad0 <TIM4Init>
    TIM8Init();
 80014e0:	f000 fb48 	bl	8001b74 <TIM8Init>
    TIM15Init();
 80014e4:	f000 fb92 	bl	8001c0c <TIM15Init>
    SPI3Init();
 80014e8:	f000 f9ae 	bl	8001848 <SPI3Init>
    SysTick_Config(SystemCoreClock / 1000);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <main+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <main+0x68>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff9b 	bl	8001434 <SysTick_Config>
    attemptSetMotorDirection(MOTOR_FORWARD);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f83a 	bl	8001578 <attemptSetMotorDirection>
    setMotorDuty(0);
 8001504:	2000      	movs	r0, #0
 8001506:	f000 f871 	bl	80015ec <setMotorDuty>
    displayInit();
 800150a:	f7ff fb81 	bl	8000c10 <displayInit>
    printf("Initialization done.\n");
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <main+0x6c>)
 8001510:	f002 f9e6 	bl	80038e0 <puts>



    while(1){
        if (gDrawFlag == 1){
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <main+0x70>)
 8001516:	f993 3000 	ldrsb.w	r3, [r3]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d1fa      	bne.n	8001514 <main+0x4c>
            gDrawFlag = 0;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <main+0x70>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
            drawDisplay();
 8001524:	f7ff fc6a 	bl	8000dfc <drawDisplay>
        if (gDrawFlag == 1){
 8001528:	e7f4      	b.n	8001514 <main+0x4c>
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000
 8001530:	10624dd3 	.word	0x10624dd3
 8001534:	08004948 	.word	0x08004948
 8001538:	20000124 	.word	0x20000124

0800153c <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
    int i=0;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
    for(i=0 ; i<len ; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <_write+0x2a>
        ITM_SendChar((*ptr++));
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff8c 	bl	8001478 <ITM_SendChar>
    for(i=0 ; i<len ; i++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf1      	blt.n	8001552 <_write+0x16>
    return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <attemptSetMotorDirection>:
 * Function to attempt setting the desired direction of the motor. The direction can only be changed when
 * the motor is stopped, so this function will not change the motor direction if the motor is moving.
 * Parameters: Desired direction of the motor, either forward or reverse.
 * Returns: Direction of the motor, either forward or reverse.
 */
void attemptSetMotorDirection(motordirection_t direction){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
    //check that motor is stopped before changing direction
    if (TIM8->CCR1 == 0) {
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <attemptSetMotorDirection+0x68>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	2b00      	cmp	r3, #0
 8001588:	d125      	bne.n	80015d6 <attemptSetMotorDirection+0x5e>
        switch (direction) {
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <attemptSetMotorDirection+0x1e>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d010      	beq.n	80015b6 <attemptSetMotorDirection+0x3e>
            break;
        }
    } else {
        //blink screen
    }
}
 8001594:	e01f      	b.n	80015d6 <attemptSetMotorDirection+0x5e>
            setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_HIGH);
 8001596:	2201      	movs	r2, #1
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <attemptSetMotorDirection+0x6c>)
 800159c:	f7ff fe21 	bl	80011e2 <setPin>
            setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_LOW);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f7ff fe1a 	bl	80011e2 <setPin>
            motorStatus.motorDirection = MOTOR_FORWARD;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <attemptSetMotorDirection+0x70>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	805a      	strh	r2, [r3, #2]
            break;
 80015b4:	e00f      	b.n	80015d6 <attemptSetMotorDirection+0x5e>
            setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <attemptSetMotorDirection+0x6c>)
 80015bc:	f7ff fe11 	bl	80011e2 <setPin>
            setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f7ff fe0a 	bl	80011e2 <setPin>
            motorStatus.motorDirection = MOTOR_REVERSE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <attemptSetMotorDirection+0x70>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	805a      	strh	r2, [r3, #2]
            break;
 80015d4:	bf00      	nop
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013400 	.word	0x40013400
 80015e4:	48000800 	.word	0x48000800
 80015e8:	20000128 	.word	0x20000128

080015ec <setMotorDuty>:
/**
 * Function to set the desired speed of the motor. Writes to capture/compare register used by PWM. Updates duty variable.
 * Parameters: Desired duty cycle from 1-100.
 * Returns: none
 */
void setMotorDuty(int16_t duty){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
    if (duty <= 100 && duty >= 0){
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	dc0a      	bgt.n	8001614 <setMotorDuty+0x28>
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db06      	blt.n	8001614 <setMotorDuty+0x28>
        //set duty cycle by setting CCR1 register
        MOTOR_PWM_TIMER_CRR = duty;
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <setMotorDuty+0x34>)
 8001608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160c:	6353      	str	r3, [r2, #52]	; 0x34
        motorStatus.motorDuty = duty;
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <setMotorDuty+0x38>)
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	8013      	strh	r3, [r2, #0]
    }
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40013400 	.word	0x40013400
 8001624:	20000128 	.word	0x20000128

08001628 <measureMotorSpeed>:
/**
 * Function to measure the speed of the motor. Updates motor speed variable.
 * Parameters: none
 * Returns: none
 */
void measureMotorSpeed(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

    motorEncoder.currentCount = MOTOR_ENCODER_TIMER_CNT;
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <measureMotorSpeed+0xe0>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	461a      	mov	r2, r3
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <measureMotorSpeed+0xe4>)
 8001634:	601a      	str	r2, [r3, #0]
    motorEncoder.counterDirection = MOTOR_ENCODER_TIMER_CNT_DIR;
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <measureMotorSpeed+0xe0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b21b      	sxth	r3, r3
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <measureMotorSpeed+0xe4>)
 8001644:	819a      	strh	r2, [r3, #12]
    //motor not moving, speed is zero
    if (motorEncoder.currentCount == motorEncoder.previousCount) {
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <measureMotorSpeed+0xe4>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <measureMotorSpeed+0xe4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	d10a      	bne.n	8001668 <measureMotorSpeed+0x40>
        motorStatus.motorSpeed = 0;
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <measureMotorSpeed+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	809a      	strh	r2, [r3, #4]
        motorStatus.motorSpeedAverage = calcAverageRPM();
 8001658:	f000 f882 	bl	8001760 <calcAverageRPM>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <measureMotorSpeed+0xe8>)
 8001662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        return;
 8001666:	e04d      	b.n	8001704 <measureMotorSpeed+0xdc>
    }

    //counter is counting up
    if (motorEncoder.counterDirection == 0){
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <measureMotorSpeed+0xe4>)
 800166a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11a      	bne.n	80016a8 <measureMotorSpeed+0x80>
        //no overflow, counter overflow has occurred
        if (motorEncoder.currentCount < motorEncoder.previousCount){
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <measureMotorSpeed+0xe4>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <measureMotorSpeed+0xe4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	da0c      	bge.n	8001698 <measureMotorSpeed+0x70>
            motorEncoder.countDifference = motorEncoder.currentCount + (MOTOR_ENCODER_TIMER_ARR - motorEncoder.previousCount);
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <measureMotorSpeed+0xe4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <measureMotorSpeed+0xe0>)
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <measureMotorSpeed+0xe4>)
 800168a:	6852      	ldr	r2, [r2, #4]
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	440b      	add	r3, r1
 8001690:	461a      	mov	r2, r3
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <measureMotorSpeed+0xe4>)
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	e021      	b.n	80016dc <measureMotorSpeed+0xb4>
        //calculate difference normally
        } else {
            motorEncoder.countDifference = motorEncoder.currentCount - motorEncoder.previousCount;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <measureMotorSpeed+0xe4>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <measureMotorSpeed+0xe4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <measureMotorSpeed+0xe4>)
 80016a4:	6093      	str	r3, [r2, #8]
 80016a6:	e019      	b.n	80016dc <measureMotorSpeed+0xb4>
        }
    //counter is counting down
    } else {
        //counter overflow has occurred
        if (motorEncoder.currentCount > motorEncoder.previousCount){
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <measureMotorSpeed+0xe4>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <measureMotorSpeed+0xe4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dd0c      	ble.n	80016ce <measureMotorSpeed+0xa6>
            motorEncoder.countDifference = motorEncoder.previousCount + (MOTOR_ENCODER_TIMER_ARR - motorEncoder.currentCount);
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <measureMotorSpeed+0xe4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <measureMotorSpeed+0xe0>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <measureMotorSpeed+0xe4>)
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <measureMotorSpeed+0xe4>)
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e006      	b.n	80016dc <measureMotorSpeed+0xb4>
        }
        //no overflow, calculate difference normally
        else {
            motorEncoder.countDifference = motorEncoder.previousCount - motorEncoder.currentCount;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <measureMotorSpeed+0xe4>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <measureMotorSpeed+0xe4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <measureMotorSpeed+0xe4>)
 80016da:	6093      	str	r3, [r2, #8]
        }

    }

    motorStatus.motorSpeed = converttoRPM(motorEncoder.countDifference);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <measureMotorSpeed+0xe4>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f819 	bl	8001718 <converttoRPM>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <measureMotorSpeed+0xe8>)
 80016ec:	809a      	strh	r2, [r3, #4]
    motorStatus.motorSpeedAverage = calcAverageRPM();
 80016ee:	f000 f837 	bl	8001760 <calcAverageRPM>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <measureMotorSpeed+0xe8>)
 80016f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    motorEncoder.previousCount = motorEncoder.currentCount;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <measureMotorSpeed+0xe4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a02      	ldr	r2, [pc, #8]	; (800170c <measureMotorSpeed+0xe4>)
 8001702:	6053      	str	r3, [r2, #4]


}
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40000800 	.word	0x40000800
 800170c:	20000194 	.word	0x20000194
 8001710:	20000128 	.word	0x20000128
 8001714:	00000000 	.word	0x00000000

08001718 <converttoRPM>:
/**
 * Function to convert encoder count difference and sampling rate to RPM.
 * Parameters: none
 * Returns: Speed of the motor in RPM
 */
int16_t converttoRPM(int32_t encoderCountDifference){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    int16_t RPM = (encoderCountDifference * 60) / (MOTOR_ENCODER_CPR * MOTOR_GEARBOX_RATIO * MOTOR_ENCODER_SAMPLING_TIME);
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff1a 	bl	8000564 <__aeabi_i2d>
 8001730:	a309      	add	r3, pc, #36	; (adr r3, 8001758 <converttoRPM+0x40>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7ff f8a9 	bl	800088c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff f98b 	bl	8000a5c <__aeabi_d2iz>
 8001746:	4603      	mov	r3, r0
 8001748:	81fb      	strh	r3, [r7, #14]
    return RPM;
 800174a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	f12c27a6 	.word	0xf12c27a6
 800175c:	404b3280 	.word	0x404b3280

08001760 <calcAverageRPM>:
 * an RPM that does not fluctuate as much as direct polling of measurements. Uses the latest motor speed calculation in the
 * status struct to update the buffer and recalculate average.
 * Parameters: none
 * Returns: Average speed of the motor in RPM.
 */
int16_t calcAverageRPM(){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
    //add latest measurement to buffer
    static int8_t bufferIndex = 0;
    motorStatus.motorSpeedBuffer[bufferIndex] = motorStatus.motorSpeed;
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <calcAverageRPM+0x98>)
 8001768:	f993 3000 	ldrsb.w	r3, [r3]
 800176c:	4618      	mov	r0, r3
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <calcAverageRPM+0x9c>)
 8001770:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <calcAverageRPM+0x9c>)
 8001776:	0043      	lsls	r3, r0, #1
 8001778:	4413      	add	r3, r2
 800177a:	460a      	mov	r2, r1
 800177c:	80da      	strh	r2, [r3, #6]
    bufferIndex++;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <calcAverageRPM+0x98>)
 8001780:	f993 3000 	ldrsb.w	r3, [r3]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	b25a      	sxtb	r2, r3
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <calcAverageRPM+0x98>)
 800178e:	701a      	strb	r2, [r3, #0]
    if (bufferIndex > sizeBuffer-1) bufferIndex = 0;
 8001790:	2232      	movs	r2, #50	; 0x32
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <calcAverageRPM+0x98>)
 8001794:	f993 3000 	ldrsb.w	r3, [r3]
 8001798:	429a      	cmp	r2, r3
 800179a:	dc02      	bgt.n	80017a2 <calcAverageRPM+0x42>
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <calcAverageRPM+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]

    //calculate sum of speed measurements in buffer
    int16_t sum = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	80fb      	strh	r3, [r7, #6]
    for (int8_t i = 0; i < sizeBuffer; i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	717b      	strb	r3, [r7, #5]
 80017aa:	e011      	b.n	80017d0 <calcAverageRPM+0x70>
        sum += motorStatus.motorSpeedBuffer[i];
 80017ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <calcAverageRPM+0x9c>)
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	80fb      	strh	r3, [r7, #6]
    for (int8_t i = 0; i < sizeBuffer; i++){
 80017c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	717b      	strb	r3, [r7, #5]
 80017d0:	2232      	movs	r2, #50	; 0x32
 80017d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	dbe8      	blt.n	80017ac <calcAverageRPM+0x4c>
    }

    //calculate and return average
    int16_t average;
    average = sum / sizeBuffer;
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80017e4:	807b      	strh	r3, [r7, #2]
    return average;
 80017e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200001a4 	.word	0x200001a4
 80017fc:	20000128 	.word	0x20000128

08001800 <queryMotorDirection>:
/**
 * Function to query motor direction state variable.
 * Parameters: none
 * Returns: Motor direction state, either forward or reverse.
 */
int16_t queryMotorDirection(){
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
    return motorStatus.motorDirection;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <queryMotorDirection+0x14>)
 8001806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	20000128 	.word	0x20000128

08001818 <queryAverageMotorSpeed>:
/**
 * Function to query the average motor speed variable.
 * Parameters: none
 * Returns: Speed of the motor in RPM.
 */
int16_t queryAverageMotorSpeed(){
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
    return motorStatus.motorSpeedAverage;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <queryAverageMotorSpeed+0x14>)
 800181e:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000128 	.word	0x20000128

08001830 <queryMotorDuty>:
/**
 * Function to query the motor duty variable.
 * Parameters: none
 * Returns: Duty cycle of the PWM driving the motor.
 */
int16_t queryMotorDuty(){
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
    return motorStatus.motorDuty;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <queryMotorDuty+0x14>)
 8001836:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000128 	.word	0x20000128

08001848 <SPI3Init>:
/**
 * Function to initialize the SPI3 peripheral.
 * Parameters: none
 * Returns: none
 */
void SPI3Init(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    //1-line bidrectional data mode
    //SPI3->CR1 |= (SPI_CR1_BIDIMODE);
    //transmit-only mode
    //SPI3->CR1 |= (SPI_CR1_BIDIOE);
    //Software slave management
    SPI3->CR1 |= (SPI_CR1_SSM);
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <SPI3Init+0x5c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <SPI3Init+0x5c>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
    //Internal slave select bit
    SPI3->CR1 |= (SPI_CR1_SSI);
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <SPI3Init+0x5c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <SPI3Init+0x5c>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
    //baud rate control, clock divider 128
    SPI3->CR1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <SPI3Init+0x5c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <SPI3Init+0x5c>)
 800186a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800186e:	6013      	str	r3, [r2, #0]
    //master configuration
    SPI3->CR1 |= (SPI_CR1_MSTR);
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <SPI3Init+0x5c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <SPI3Init+0x5c>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6013      	str	r3, [r2, #0]
    //clock polarity 0 when idle
    SPI3->CR1 &= ~(SPI_CR1_CPOL);
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <SPI3Init+0x5c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <SPI3Init+0x5c>)
 8001882:	f023 0302 	bic.w	r3, r3, #2
 8001886:	6013      	str	r3, [r2, #0]
    //clock phase
    SPI3->CR1 &= ~(SPI_CR1_CPHA);
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <SPI3Init+0x5c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <SPI3Init+0x5c>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]
    //SPI3->CR2 |= (0x07 << SPI_CR2_DS_Pos);
    //SS output enabled in master mode
    //SPI3->CR2 |= (SPI_CR2_SSOE);

    //CS initialized high
    setPin(DIS_CS_PORT, DIS_CS_PIN, PIN_HIGH);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <SPI3Init+0x60>)
 800189c:	f7ff fca1 	bl	80011e2 <setPin>
   }
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40003c00 	.word	0x40003c00
 80018a8:	48000800 	.word	0x48000800

080018ac <transferSPIByte>:
/**
 * Function that transfers one byte over SPI3.
 * Parameters: txData, one byte of data to send over SPI
 * Returns: none
 */
void transferSPIByte(uint8_t txData){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    //write data to be sent to data register
    *((volatile uint8_t *) &(SPI3->DR)) = txData;
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <transferSPIByte+0x2c>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	7013      	strb	r3, [r2, #0]
    //wait until transmit buffer is empty
    while(!(SPI3->SR & SPI_SR_TXE));
 80018bc:	bf00      	nop
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <transferSPIByte+0x30>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f9      	beq.n	80018be <transferSPIByte+0x12>
    //while (SPI3->SR & SPI_SR_RXNE);
    delayMs(2);
 80018ca:	2002      	movs	r0, #2
 80018cc:	f000 f9ce 	bl	8001c6c <delayMs>

}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40003c0c 	.word	0x40003c0c
 80018dc:	40003c00 	.word	0x40003c00

080018e0 <startTransferSPI>:
/**
 * Function to initiate transfer over SPI. Pulls CS low and then starts SPI3 peripheral.
 * Parameters: none
 * Returns: none
 */
void startTransferSPI(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    setPin(DIS_CS_PORT, DIS_CS_PIN, PIN_LOW);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <startTransferSPI+0x28>)
 80018ec:	f7ff fc79 	bl	80011e2 <setPin>
    delayMs(2);
 80018f0:	2002      	movs	r0, #2
 80018f2:	f000 f9bb 	bl	8001c6c <delayMs>
    //enable SPI
    SPI3->CR1 |= (SPI_CR1_SPE);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <startTransferSPI+0x2c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <startTransferSPI+0x2c>)
 80018fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001900:	6013      	str	r3, [r2, #0]

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	48000800 	.word	0x48000800
 800190c:	40003c00 	.word	0x40003c00

08001910 <endTransferSPI>:
/**
 * Function to end transfer over SPI. Sets CS back to high and then disables SPI3.
 * Parameters: none
 * Returns: none
 */
void endTransferSPI(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    //wait until SPI not busy
    while(SPI3->SR & SPI_SR_BSY);
 8001914:	bf00      	nop
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <endTransferSPI+0x34>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <endTransferSPI+0x6>
    setPin(DIS_CS_PORT, DIS_CS_PIN, PIN_HIGH);
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <endTransferSPI+0x38>)
 800192a:	f7ff fc5a 	bl	80011e2 <setPin>
    delayMs(2);
 800192e:	2002      	movs	r0, #2
 8001930:	f000 f99c 	bl	8001c6c <delayMs>
    //disable SPI
    SPI3->CR1 &= ~(SPI_CR1_SPE);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <endTransferSPI+0x34>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a02      	ldr	r2, [pc, #8]	; (8001944 <endTransferSPI+0x34>)
 800193a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40003c00 	.word	0x40003c00
 8001948:	48000800 	.word	0x48000800

0800194c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
  }

  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ae:	605a      	str	r2, [r3, #4]
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_isatty>:

int _isatty(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f001 febe 	bl	80037a0 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20008000 	.word	0x20008000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	200001a8 	.word	0x200001a8
 8001a58:	200005c0 	.word	0x200005c0

08001a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <TIM3Init>:
/**
 * Function to initialize and start Timer 3. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM3Init(){
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
    //clock enabled in clockconfig.c
    //interrupts only occur on update (overflow/underflow)
    TIM3->CR1 |= (0x01 << TIM_CR1_URS_Pos);
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <TIM3Init+0x4c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a10      	ldr	r2, [pc, #64]	; (8001acc <TIM3Init+0x4c>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6013      	str	r3, [r2, #0]
    //auto-reload preload enabled
    TIM3->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <TIM3Init+0x4c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <TIM3Init+0x4c>)
 8001a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9a:	6013      	str	r3, [r2, #0]
    //update interrupt is enabled
    TIM3->DIER |= (0x01 << TIM_DIER_UIE_Pos);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <TIM3Init+0x4c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <TIM3Init+0x4c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	60d3      	str	r3, [r2, #12]
    //prescalar value (set to yield interrupt at 30 Hz)
    TIM3->PSC = 85-1;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <TIM3Init+0x4c>)
 8001aaa:	2254      	movs	r2, #84	; 0x54
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
    //auto-reload preload
    TIM3->ARR = 0xFFFF;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <TIM3Init+0x4c>)
 8001ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    //counter is enabled
    TIM3->CR1 |= (0x01 << TIM_CR1_CEN_Pos);
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <TIM3Init+0x4c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <TIM3Init+0x4c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]

    //Update Frequency = TIM_CLK / (PSC + 1) / (ARR + 1) / (RSR + 1)
    //Update Frequency = 170000000 / 85 / 65535 / 1
    //Update Frequency = 30Hz

}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40000400 	.word	0x40000400

08001ad0 <TIM4Init>:
/**
 * Function to initialize and start Timer 4. This timer is used in encoder mode to read the motor encoder.
 * Parameters: none
 * Returns: none
 */
void TIM4Init(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    //clock enabled in clockconfig.c
    //both inputs are active on both rising and falling edges
    TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <TIM4Init+0xa0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <TIM4Init+0xa0>)
 8001ada:	f043 0303 	orr.w	r3, r3, #3
 8001ade:	6093      	str	r3, [r2, #8]
    //tim_ti1fp1 mapped on tim_ti1
    TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <TIM4Init+0xa0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <TIM4Init+0xa0>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
    //tim_ti2fp2 mapped on tim_ti2
    TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <TIM4Init+0xa0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <TIM4Init+0xa0>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6193      	str	r3, [r2, #24]
    //set input filter on capture 1
    TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <TIM4Init+0xa0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <TIM4Init+0xa0>)
 8001afe:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001b02:	6193      	str	r3, [r2, #24]
    //set input filter on capture 2
    TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <TIM4Init+0xa0>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <TIM4Init+0xa0>)
 8001b0a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8001b0e:	6193      	str	r3, [r2, #24]
    //tim_ti1fp1 noninverted
    TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <TIM4Init+0xa0>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <TIM4Init+0xa0>)
 8001b16:	f023 0302 	bic.w	r3, r3, #2
 8001b1a:	6213      	str	r3, [r2, #32]
    TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <TIM4Init+0xa0>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <TIM4Init+0xa0>)
 8001b22:	f023 0308 	bic.w	r3, r3, #8
 8001b26:	6213      	str	r3, [r2, #32]
    //tim_ti2fp2 noninverted
    TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <TIM4Init+0xa0>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <TIM4Init+0xa0>)
 8001b2e:	f023 0320 	bic.w	r3, r3, #32
 8001b32:	6213      	str	r3, [r2, #32]
    TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <TIM4Init+0xa0>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <TIM4Init+0xa0>)
 8001b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b3e:	6213      	str	r3, [r2, #32]
    //prescalar set to 0
    TIM4->PSC = 1-1;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <TIM4Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
    //enable auto-reload preload
    TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <TIM4Init+0xa0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <TIM4Init+0xa0>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6013      	str	r3, [r2, #0]
    //auto-reload register
    TIM4->ARR = 0xFFFF;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <TIM4Init+0xa0>)
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
    //counter is enabled
    TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <TIM4Init+0xa0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <TIM4Init+0xa0>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]

}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40000800 	.word	0x40000800

08001b74 <TIM8Init>:
/**
 * Function to initialize and start Timer 8. This timer is used to generate PWM output for motor control.
 * Parameters: none
 * Returns: none
 */
void TIM8Init(){
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
    //clock enabled in clockconfig.c
    //set PWM mode 1
    TIM8->CCMR1 |= (0x06 << TIM_CCMR1_OC1M_Pos);
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <TIM8Init+0x94>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <TIM8Init+0x94>)
 8001b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b82:	6193      	str	r3, [r2, #24]
    //preload register is enabled, for duty cycle
    TIM8->CCMR1 |= (0x01 << TIM_CCMR1_OC1PE_Pos);
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <TIM8Init+0x94>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <TIM8Init+0x94>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6193      	str	r3, [r2, #24]
    //auto-reload preload is enabled, for frequency
    TIM8->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <TIM8Init+0x94>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <TIM8Init+0x94>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	6013      	str	r3, [r2, #0]
    //edge-aligned mode
    TIM8->CR1 &= ~(0x03 << TIM_CR1_CMS_Pos);
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <TIM8Init+0x94>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <TIM8Init+0x94>)
 8001ba2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ba6:	6013      	str	r3, [r2, #0]
    //OC1 active high
    TIM8->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <TIM8Init+0x94>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <TIM8Init+0x94>)
 8001bae:	f023 0302 	bic.w	r3, r3, #2
 8001bb2:	6213      	str	r3, [r2, #32]
    //OC1 is output on the output pin
    TIM8->CCER |= (0x01 << TIM_CCER_CC1E_Pos);
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <TIM8Init+0x94>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <TIM8Init+0x94>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
    //tim_oc1n signal is not output
    TIM8->CCER &= ~(0x01 << TIM_CCER_CC1NE_Pos);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <TIM8Init+0x94>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <TIM8Init+0x94>)
 8001bc6:	f023 0304 	bic.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
    //main output enabled
    TIM8->BDTR |= (0x01 << TIM_BDTR_MOE_Pos);
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <TIM8Init+0x94>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <TIM8Init+0x94>)
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	6453      	str	r3, [r2, #68]	; 0x44
    //auto-reload, corresponds with PWM frequency
    TIM8->ARR = 50-1;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <TIM8Init+0x94>)
 8001bda:	2231      	movs	r2, #49	; 0x31
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    //prescalar of 170, so the input clock is 10Mhz
    TIM8->PSC = 170-1;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <TIM8Init+0x94>)
 8001be0:	22a9      	movs	r2, #169	; 0xa9
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
    //initialize shadow registers before counter starts
    TIM8->EGR |= (0x01 << TIM_EGR_UG_Pos);
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <TIM8Init+0x94>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <TIM8Init+0x94>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6153      	str	r3, [r2, #20]
    //counter is enabled
    TIM8->CR1 |= (0x01 << TIM_CR1_CEN_Pos);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <TIM8Init+0x94>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <TIM8Init+0x94>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

    //PWM Frequency = TIM_CLK / (PSC + 1) / (ARR + 1)
    //PWM Frequency = 1700000000 / 170 / 50
    //PWM Frequency = 20Khz

}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40013400 	.word	0x40013400

08001c0c <TIM15Init>:
/**
 * Function to initialize and start Timer 15. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM15Init(){
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    //clock enabled in clockconfig.c
    //interrupts only occur on update (overflow/underflow)
    TIM15->CR1 |= (0x01 << TIM_CR1_URS_Pos);
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <TIM15Init+0x5c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <TIM15Init+0x5c>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6013      	str	r3, [r2, #0]
    //auto-reload preload enabled
    TIM15->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <TIM15Init+0x5c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <TIM15Init+0x5c>)
 8001c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c26:	6013      	str	r3, [r2, #0]
    //update interrupt is enabled
    TIM15->DIER |= (0x01 << TIM_DIER_UIE_Pos);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <TIM15Init+0x5c>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <TIM15Init+0x5c>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	60d3      	str	r3, [r2, #12]
    //prescalar value, so the input clock is 100Mhz
    TIM15->PSC = 1700-1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <TIM15Init+0x5c>)
 8001c36:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
    //auto-reload preload
    TIM15->ARR = 50000-1;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <TIM15Init+0x5c>)
 8001c3e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    //enable auto-reload
    TIM15->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <TIM15Init+0x5c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <TIM15Init+0x5c>)
 8001c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4e:	6013      	str	r3, [r2, #0]
    //counter is enabled
    TIM15->CR1 |= (0x01 << TIM_CR1_CEN_Pos);
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <TIM15Init+0x5c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <TIM15Init+0x5c>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

    //Update Frequency = TIM_CLK / (PSC + 1) / (ARR + 1) / (RSR + 1)
    //Update Frequency = 170000000 / 1700 / 50000 / 1
    //Update Frequency = 2Hz (500ms)

}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40014000 	.word	0x40014000

08001c6c <delayMs>:
/**
 * Function to delay in increments of millisecond.
 * Parameters: Number of milliseconds to delay.
 * Returns: none
 */
void delayMs(uint16_t ms){
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
    gMsTicks = 0;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <delayMs+0x2c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
    while (gMsTicks < ms);
 8001c7c:	bf00      	nop
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <delayMs+0x2c>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8f9      	bhi.n	8001c7e <delayMs+0x12>
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200001ac 	.word	0x200001ac

08001c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca0:	f7ff fedc 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	; (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	; (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cca:	f001 fd6f 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cce:	f7ff fbfb 	bl	80014c8 <main>

08001cd2 <LoopForever>:

LoopForever:
  b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   r0, =_estack
 8001cd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ce0:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 8001ce4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ce8:	200005c0 	.word	0x200005c0

08001cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_2_IRQHandler>

08001cee <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b088      	sub	sp, #32
 8001cf2:	af02      	add	r7, sp, #8
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	4608      	mov	r0, r1
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	460b      	mov	r3, r1
 8001d02:	813b      	strh	r3, [r7, #8]
 8001d04:	4613      	mov	r3, r2
 8001d06:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001d0c:	897a      	ldrh	r2, [r7, #10]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4413      	add	r3, r2
 8001d12:	b298      	uxth	r0, r3
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	8c3b      	ldrh	r3, [r7, #32]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4603      	mov	r3, r0
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 ffc8 	bl	8002cba <u8g2_IsIntersection>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d037      	beq.n	8001da0 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	893a      	ldrh	r2, [r7, #8]
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	2000      	movs	r0, #0
 8001d38:	9000      	str	r0, [sp, #0]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 feff 	bl	8002b3e <u8g2_DrawHVLine>
  if (h >= 2) {
 8001d40:	8c3b      	ldrh	r3, [r7, #32]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d92d      	bls.n	8001da2 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001d46:	8c3b      	ldrh	r3, [r7, #32]
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	843b      	strh	r3, [r7, #32]
    y++;
 8001d4c:	893b      	ldrh	r3, [r7, #8]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001d52:	8c3b      	ldrh	r3, [r7, #32]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01a      	beq.n	8001d8e <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001d58:	8c3b      	ldrh	r3, [r7, #32]
 8001d5a:	893a      	ldrh	r2, [r7, #8]
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	2001      	movs	r0, #1
 8001d60:	9000      	str	r0, [sp, #0]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 feeb 	bl	8002b3e <u8g2_DrawHVLine>
      x+=w;
 8001d68:	897a      	ldrh	r2, [r7, #10]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	817b      	strh	r3, [r7, #10]
      x--;
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001d76:	8c3b      	ldrh	r3, [r7, #32]
 8001d78:	893a      	ldrh	r2, [r7, #8]
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	9000      	str	r0, [sp, #0]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fedc 	bl	8002b3e <u8g2_DrawHVLine>
      y+=h;
 8001d86:	893a      	ldrh	r2, [r7, #8]
 8001d88:	8c3b      	ldrh	r3, [r7, #32]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	893a      	ldrh	r2, [r7, #8]
 8001d92:	8af9      	ldrh	r1, [r7, #22]
 8001d94:	2000      	movs	r0, #0
 8001d96:	9000      	str	r0, [sp, #0]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fed0 	bl	8002b3e <u8g2_DrawHVLine>
 8001d9e:	e000      	b.n	8001da2 <u8g2_DrawFrame+0xb4>
    return;
 8001da0:	bf00      	nop
  }
}
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	7c1b      	ldrb	r3, [r3, #16]
 8001db6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fd0c 	bl	80037f4 <memset>
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
 8001df0:	4613      	mov	r3, r2
 8001df2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	7c1b      	ldrb	r3, [r3, #16]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	89ba      	ldrh	r2, [r7, #12]
 8001e0c:	fb12 f303 	smulbb	r3, r2, r3
 8001e10:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001e12:	89bb      	ldrh	r3, [r7, #12]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001e18:	89bb      	ldrh	r3, [r7, #12]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001e20:	7bf9      	ldrb	r1, [r7, #15]
 8001e22:	78ba      	ldrb	r2, [r7, #2]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 fbe8 	bl	8003602 <u8x8_DrawTile>
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e4c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e54:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	7c5b      	ldrb	r3, [r3, #17]
 8001e5c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001e5e:	7bba      	ldrb	r2, [r7, #14]
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	4619      	mov	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ffbd 	bl	8001de4 <u8g2_send_tile_row>
    src_row++;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	7b7b      	ldrb	r3, [r7, #13]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d203      	bcs.n	8001e86 <u8g2_send_buffer+0x4c>
 8001e7e:	7bba      	ldrb	r2, [r7, #14]
 8001e80:	7b3b      	ldrb	r3, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3eb      	bcc.n	8001e5e <u8g2_send_buffer+0x24>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffcf 	bl	8001e3a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f001 fc01 	bl	80036a4 <u8x8_RefreshDisplay>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	701a      	strb	r2, [r3, #0]
  return buf;
 8001eba:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	200001b0 	.word	0x200001b0

08001ecc <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8001ee2:	490c      	ldr	r1, [pc, #48]	; (8001f14 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f001 fc3d 	bl	8003764 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001eea:	f107 0313 	add.w	r3, r7, #19
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffdc 	bl	8001eac <u8g2_m_16_8_f>
 8001ef4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001ef6:	7cfa      	ldrb	r2, [r7, #19]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 ffc4 	bl	8002e8e <u8g2_SetupBuffer>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	08003325 	.word	0x08003325
 8001f14:	080034fd 	.word	0x080034fd
 8001f18:	08002d11 	.word	0x08002d11

08001f1c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	781b      	ldrb	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	81fb      	strh	r3, [r7, #14]
    font++;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001f60:	89fb      	ldrh	r3, [r7, #14]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	4413      	add	r3, r2
 8001f70:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001f72:	89fb      	ldrh	r3, [r7, #14]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f7ff ffc5 	bl	8001f1c <u8g2_font_get_byte>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f7ff ffbd 	bl	8001f1c <u8g2_font_get_byte>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001faa:	2102      	movs	r1, #2
 8001fac:	6838      	ldr	r0, [r7, #0]
 8001fae:	f7ff ffb5 	bl	8001f1c <u8g2_font_get_byte>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001fba:	2103      	movs	r1, #3
 8001fbc:	6838      	ldr	r0, [r7, #0]
 8001fbe:	f7ff ffad 	bl	8001f1c <u8g2_font_get_byte>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001fca:	2104      	movs	r1, #4
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	f7ff ffa5 	bl	8001f1c <u8g2_font_get_byte>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001fda:	2105      	movs	r1, #5
 8001fdc:	6838      	ldr	r0, [r7, #0]
 8001fde:	f7ff ff9d 	bl	8001f1c <u8g2_font_get_byte>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001fea:	2106      	movs	r1, #6
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f7ff ff95 	bl	8001f1c <u8g2_font_get_byte>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001ffa:	2107      	movs	r1, #7
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f7ff ff8d 	bl	8001f1c <u8g2_font_get_byte>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800200a:	2108      	movs	r1, #8
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f7ff ff85 	bl	8001f1c <u8g2_font_get_byte>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800201a:	2109      	movs	r1, #9
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f7ff ff7d 	bl	8001f1c <u8g2_font_get_byte>
 8002022:	4603      	mov	r3, r0
 8002024:	b25a      	sxtb	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800202a:	210a      	movs	r1, #10
 800202c:	6838      	ldr	r0, [r7, #0]
 800202e:	f7ff ff75 	bl	8001f1c <u8g2_font_get_byte>
 8002032:	4603      	mov	r3, r0
 8002034:	b25a      	sxtb	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800203a:	210b      	movs	r1, #11
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f7ff ff6d 	bl	8001f1c <u8g2_font_get_byte>
 8002042:	4603      	mov	r3, r0
 8002044:	b25a      	sxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800204a:	210c      	movs	r1, #12
 800204c:	6838      	ldr	r0, [r7, #0]
 800204e:	f7ff ff65 	bl	8001f1c <u8g2_font_get_byte>
 8002052:	4603      	mov	r3, r0
 8002054:	b25a      	sxtb	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800205a:	210d      	movs	r1, #13
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f7ff ff5d 	bl	8001f1c <u8g2_font_get_byte>
 8002062:	4603      	mov	r3, r0
 8002064:	b25a      	sxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800206a:	210e      	movs	r1, #14
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f7ff ff55 	bl	8001f1c <u8g2_font_get_byte>
 8002072:	4603      	mov	r3, r0
 8002074:	b25a      	sxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800207a:	210f      	movs	r1, #15
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f7ff ff4d 	bl	8001f1c <u8g2_font_get_byte>
 8002082:	4603      	mov	r3, r0
 8002084:	b25a      	sxtb	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800208a:	2110      	movs	r1, #16
 800208c:	6838      	ldr	r0, [r7, #0]
 800208e:	f7ff ff45 	bl	8001f1c <u8g2_font_get_byte>
 8002092:	4603      	mov	r3, r0
 8002094:	b25a      	sxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800209a:	2111      	movs	r1, #17
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f7ff ff4f 	bl	8001f40 <u8g2_font_get_word>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80020aa:	2113      	movs	r1, #19
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f7ff ff47 	bl	8001f40 <u8g2_font_get_word>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80020ba:	2115      	movs	r1, #21
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f7ff ff3f 	bl	8001f40 <u8g2_font_get_word>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	82da      	strh	r2, [r3, #22]
#endif
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7b1b      	ldrb	r3, [r3, #12]
 80020e2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	fa42 f303 	asr.w	r3, r2, r3
 80020f4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80020fa:	7bba      	ldrb	r2, [r7, #14]
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	4413      	add	r3, r2
 8002100:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002102:	7bbb      	ldrb	r3, [r7, #14]
 8002104:	2b07      	cmp	r3, #7
 8002106:	d91a      	bls.n	800213e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002108:	2308      	movs	r3, #8
 800210a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800210c:	7b3a      	ldrb	r2, [r7, #12]
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	7b3b      	ldrb	r3, [r7, #12]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	b25a      	sxtb	r2, r3
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4313      	orrs	r3, r2
 8002134:	b25b      	sxtb	r3, r3
 8002136:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	3b08      	subs	r3, #8
 800213c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4013      	ands	r3, r2
 8002152:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7bba      	ldrb	r2, [r7, #14]
 8002158:	731a      	strb	r2, [r3, #12]
  return val;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffaa 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	3b01      	subs	r3, #1
 800218a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800218c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	7bbb      	ldrb	r3, [r7, #14]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73fb      	strb	r3, [r7, #15]
  return v;
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80021ae:	b490      	push	{r4, r7}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4604      	mov	r4, r0
 80021b6:	4608      	mov	r0, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	461a      	mov	r2, r3
 80021bc:	4623      	mov	r3, r4
 80021be:	80fb      	strh	r3, [r7, #6]
 80021c0:	4603      	mov	r3, r0
 80021c2:	717b      	strb	r3, [r7, #5]
 80021c4:	460b      	mov	r3, r1
 80021c6:	713b      	strb	r3, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d014      	beq.n	80021fc <u8g2_add_vector_y+0x4e>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	dc19      	bgt.n	800220a <u8g2_add_vector_y+0x5c>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <u8g2_add_vector_y+0x32>
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d007      	beq.n	80021ee <u8g2_add_vector_y+0x40>
 80021de:	e014      	b.n	800220a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80021e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4413      	add	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
      break;
 80021ec:	e014      	b.n	8002218 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80021ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4413      	add	r3, r2
 80021f8:	80fb      	strh	r3, [r7, #6]
      break;
 80021fa:	e00d      	b.n	8002218 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80021fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002200:	b29b      	uxth	r3, r3
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	80fb      	strh	r3, [r7, #6]
      break;
 8002208:	e006      	b.n	8002218 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800220a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800220e:	b29b      	uxth	r3, r3
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	80fb      	strh	r3, [r7, #6]
      break;      
 8002216:	bf00      	nop
  }
  return dy;
 8002218:	88fb      	ldrh	r3, [r7, #6]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bc90      	pop	{r4, r7}
 8002222:	4770      	bx	lr

08002224 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002224:	b490      	push	{r4, r7}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4604      	mov	r4, r0
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4623      	mov	r3, r4
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	4603      	mov	r3, r0
 8002238:	717b      	strb	r3, [r7, #5]
 800223a:	460b      	mov	r3, r1
 800223c:	713b      	strb	r3, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d014      	beq.n	8002272 <u8g2_add_vector_x+0x4e>
 8002248:	2b02      	cmp	r3, #2
 800224a:	dc19      	bgt.n	8002280 <u8g2_add_vector_x+0x5c>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <u8g2_add_vector_x+0x32>
 8002250:	2b01      	cmp	r3, #1
 8002252:	d007      	beq.n	8002264 <u8g2_add_vector_x+0x40>
 8002254:	e014      	b.n	8002280 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8002256:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800225a:	b29a      	uxth	r2, r3
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4413      	add	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
      break;
 8002262:	e014      	b.n	800228e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8002264:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002268:	b29b      	uxth	r3, r3
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	80fb      	strh	r3, [r7, #6]
      break;
 8002270:	e00d      	b.n	800228e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8002272:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002276:	b29b      	uxth	r3, r3
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	80fb      	strh	r3, [r7, #6]
      break;
 800227e:	e006      	b.n	800228e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8002280:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002284:	b29a      	uxth	r2, r3
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	4413      	add	r3, r2
 800228a:	80fb      	strh	r3, [r7, #6]
      break;      
 800228c:	bf00      	nop
  }
  return dx;
 800228e:	88fb      	ldrh	r3, [r7, #6]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bc90      	pop	{r4, r7}
 8002298:	4770      	bx	lr

0800229a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af02      	add	r7, sp, #8
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
 80022a6:	4613      	mov	r3, r2
 80022a8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80022ba:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80022c2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022ca:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	7d7b      	ldrb	r3, [r7, #21]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80022d8:	7dfa      	ldrb	r2, [r7, #23]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d201      	bcs.n	80022e4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	889b      	ldrh	r3, [r3, #4]
 80022e8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	88db      	ldrh	r3, [r3, #6]
 80022ee:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80022f0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80022f4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	7c1b      	ldrb	r3, [r3, #16]
 80022fc:	89b8      	ldrh	r0, [r7, #12]
 80022fe:	f7ff ff91 	bl	8002224 <u8g2_add_vector_x>
 8002302:	4603      	mov	r3, r0
 8002304:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002306:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800230a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	7c1b      	ldrb	r3, [r3, #16]
 8002312:	8978      	ldrh	r0, [r7, #10]
 8002314:	f7ff ff4b 	bl	80021ae <u8g2_add_vector_y>
 8002318:	4603      	mov	r3, r0
 800231a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800231c:	78bb      	ldrb	r3, [r7, #2]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	7b9a      	ldrb	r2, [r3, #14]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800232c:	7dbb      	ldrb	r3, [r7, #22]
 800232e:	b298      	uxth	r0, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	7c1b      	ldrb	r3, [r3, #16]
 8002334:	897a      	ldrh	r2, [r7, #10]
 8002336:	89b9      	ldrh	r1, [r7, #12]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4603      	mov	r3, r0
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fbfe 	bl	8002b3e <u8g2_DrawHVLine>
 8002342:	e013      	b.n	800236c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	7b5b      	ldrb	r3, [r3, #13]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	7bda      	ldrb	r2, [r3, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8002356:	7dbb      	ldrb	r3, [r7, #22]
 8002358:	b298      	uxth	r0, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	7c1b      	ldrb	r3, [r3, #16]
 800235e:	897a      	ldrh	r2, [r7, #10]
 8002360:	89b9      	ldrh	r1, [r7, #12]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	4603      	mov	r3, r0
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fbe9 	bl	8002b3e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800236c:	7dfa      	ldrb	r2, [r7, #23]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	429a      	cmp	r2, r3
 8002372:	d309      	bcc.n	8002388 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002374:	7dfa      	ldrb	r2, [r7, #23]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	757b      	strb	r3, [r7, #21]
    ly++;
 8002380:	7d3b      	ldrb	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002386:	e79d      	b.n	80022c4 <u8g2_font_decode_len+0x2a>
      break;
 8002388:	bf00      	nop
  }
  lx += cnt;
 800238a:	7d7a      	ldrb	r2, [r7, #21]
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	4413      	add	r3, r2
 8002390:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8002392:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800239a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	725a      	strb	r2, [r3, #9]
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3360      	adds	r3, #96	; 0x60
 80023b8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80023cc:	4619      	mov	r1, r3
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff fe7f 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b25a      	sxtb	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80023e2:	4619      	mov	r1, r3
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fe74 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b25a      	sxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	7b9b      	ldrb	r3, [r3, #14]
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	73da      	strb	r2, [r3, #15]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af02      	add	r7, sp, #8
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3360      	adds	r3, #96	; 0x60
 8002426:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffbd 	bl	80023aa <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002436:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800243e:	4619      	mov	r1, r3
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7ff fe91 	bl	8002168 <u8g2_font_decode_get_signed_bits>
 8002446:	4603      	mov	r3, r0
 8002448:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002450:	4619      	mov	r1, r3
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff fe88 	bl	8002168 <u8g2_font_decode_get_signed_bits>
 8002458:	4603      	mov	r3, r0
 800245a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002462:	4619      	mov	r1, r3
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff fe7f 	bl	8002168 <u8g2_font_decode_get_signed_bits>
 800246a:	4603      	mov	r3, r0
 800246c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f340 80d7 	ble.w	8002628 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	8898      	ldrh	r0, [r3, #4]
 800247e:	7cfa      	ldrb	r2, [r7, #19]
 8002480:	7c7b      	ldrb	r3, [r7, #17]
 8002482:	4413      	add	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	425b      	negs	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	b25a      	sxtb	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	7c1b      	ldrb	r3, [r3, #16]
 8002490:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002494:	f7ff fec6 	bl	8002224 <u8g2_add_vector_x>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	88d8      	ldrh	r0, [r3, #6]
 80024a4:	7cfa      	ldrb	r2, [r7, #19]
 80024a6:	7c7b      	ldrb	r3, [r7, #17]
 80024a8:	4413      	add	r3, r2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	425b      	negs	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	b25a      	sxtb	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	7c1b      	ldrb	r3, [r3, #16]
 80024b6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80024ba:	f7ff fe78 	bl	80021ae <u8g2_add_vector_y>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	889b      	ldrh	r3, [r3, #4]
 80024ca:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	88db      	ldrh	r3, [r3, #6]
 80024d0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80024d2:	8bfb      	ldrh	r3, [r7, #30]
 80024d4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80024d6:	8b7b      	ldrh	r3, [r7, #26]
 80024d8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	7c1b      	ldrb	r3, [r3, #16]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d85a      	bhi.n	8002598 <u8g2_font_decode_glyph+0x180>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <u8g2_font_decode_glyph+0xd0>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002515 	.word	0x08002515
 80024f0:	0800253d 	.word	0x0800253d
 80024f4:	08002571 	.word	0x08002571
      {
	case 0:
	    x1 += decode->glyph_width;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	8bbb      	ldrh	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002506:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800250a:	b29a      	uxth	r2, r3
 800250c:	8b3b      	ldrh	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	833b      	strh	r3, [r7, #24]
	    break;
 8002512:	e041      	b.n	8002598 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002514:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002518:	b29b      	uxth	r3, r3
 800251a:	8bfa      	ldrh	r2, [r7, #30]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002520:	8bfb      	ldrh	r3, [r7, #30]
 8002522:	3301      	adds	r3, #1
 8002524:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002526:	8bbb      	ldrh	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002532:	b29a      	uxth	r2, r3
 8002534:	8b3b      	ldrh	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	833b      	strh	r3, [r7, #24]
	    break;
 800253a:	e02d      	b.n	8002598 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002542:	b29b      	uxth	r3, r3
 8002544:	8bfa      	ldrh	r2, [r7, #30]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800254a:	8bfb      	ldrh	r3, [r7, #30]
 800254c:	3301      	adds	r3, #1
 800254e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002550:	8bbb      	ldrh	r3, [r7, #28]
 8002552:	3301      	adds	r3, #1
 8002554:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8002556:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800255a:	b29b      	uxth	r3, r3
 800255c:	8b7a      	ldrh	r2, [r7, #26]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002562:	8b7b      	ldrh	r3, [r7, #26]
 8002564:	3301      	adds	r3, #1
 8002566:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002568:	8b3b      	ldrh	r3, [r7, #24]
 800256a:	3301      	adds	r3, #1
 800256c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800256e:	e013      	b.n	8002598 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8002570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002574:	b29a      	uxth	r2, r3
 8002576:	8bbb      	ldrh	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002582:	b29b      	uxth	r3, r3
 8002584:	8b7a      	ldrh	r2, [r7, #26]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	3301      	adds	r3, #1
 800258e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002590:	8b3b      	ldrh	r3, [r7, #24]
 8002592:	3301      	adds	r3, #1
 8002594:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002596:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002598:	8bb8      	ldrh	r0, [r7, #28]
 800259a:	8b7a      	ldrh	r2, [r7, #26]
 800259c:	8bf9      	ldrh	r1, [r7, #30]
 800259e:	8b3b      	ldrh	r3, [r7, #24]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4603      	mov	r3, r0
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fb88 	bl	8002cba <u8g2_IsIntersection>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80025b0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80025b4:	e03a      	b.n	800262c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2200      	movs	r2, #0
 80025c0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80025c8:	4619      	mov	r1, r3
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff fd81 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80025da:	4619      	mov	r1, r3
 80025dc:	6978      	ldr	r0, [r7, #20]
 80025de:	f7ff fd78 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fe54 	bl	800229a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	2201      	movs	r2, #1
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff fe4e 	bl	800229a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80025fe:	2101      	movs	r1, #1
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7ff fd66 	bl	80020d2 <u8g2_font_decode_get_unsigned_bits>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ec      	bne.n	80025e6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002612:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002616:	429a      	cmp	r2, r3
 8002618:	dd00      	ble.n	800261c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800261a:	e7d2      	b.n	80025c2 <u8g2_font_decode_glyph+0x1aa>
	break;
 800261c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	7b9a      	ldrb	r2, [r3, #14]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8002628:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3317      	adds	r3, #23
 800264a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d82a      	bhi.n	80026a8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	2b60      	cmp	r3, #96	; 0x60
 8002656:	d907      	bls.n	8002668 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800265e:	461a      	mov	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4413      	add	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e009      	b.n	800267c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d906      	bls.n	800267c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002674:	461a      	mov	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d04e      	beq.n	8002724 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	429a      	cmp	r2, r3
 8002690:	d102      	bne.n	8002698 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3302      	adds	r3, #2
 8002696:	e049      	b.n	800272c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80026a6:	e7e9      	b.n	800267c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80026ae:	461a      	mov	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	4413      	add	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80026ba:	2100      	movs	r1, #0
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f7ff fc3f 	bl	8001f40 <u8g2_font_get_word>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4413      	add	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80026cc:	2102      	movs	r1, #2
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f7ff fc36 	bl	8001f40 <u8g2_font_get_word>
 80026d4:	4603      	mov	r3, r0
 80026d6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	3304      	adds	r3, #4
 80026dc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80026de:	89fa      	ldrh	r2, [r7, #14]
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3e9      	bcc.n	80026ba <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80026ec:	89fb      	ldrh	r3, [r7, #14]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002706:	89fa      	ldrh	r2, [r7, #14]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	429a      	cmp	r2, r3
 800270c:	d102      	bne.n	8002714 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3303      	adds	r3, #3
 8002712:	e00b      	b.n	800272c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3302      	adds	r3, #2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	4413      	add	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002722:	e7e0      	b.n	80026e6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <u8g2_font_get_glyph_data+0xf6>
	break;
 8002728:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
 8002746:	460b      	mov	r3, r1
 8002748:	813b      	strh	r3, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	897a      	ldrh	r2, [r7, #10]
 8002756:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	893a      	ldrh	r2, [r7, #8]
 800275e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	4619      	mov	r1, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff64 	bl	8002634 <u8g2_font_get_glyph_data>
 800276c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fe4e 	bl	8002418 <u8g2_font_decode_glyph>
 800277c:	4603      	mov	r3, r0
 800277e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8002780:	8afb      	ldrh	r3, [r7, #22]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d833      	bhi.n	8002818 <u8g2_DrawGlyph+0x8c>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <u8g2_DrawGlyph+0x2c>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027dd 	.word	0x080027dd
 80027c0:	080027f1 	.word	0x080027f1
 80027c4:	08002805 	.word	0x08002805
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	4798      	blx	r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	813b      	strh	r3, [r7, #8]
      break;
 80027da:	e01d      	b.n	8002818 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	4798      	blx	r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	817b      	strh	r3, [r7, #10]
      break;
 80027ee:	e013      	b.n	8002818 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	4798      	blx	r3
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	813b      	strh	r3, [r7, #8]
      break;
 8002802:	e009      	b.n	8002818 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	4798      	blx	r3
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	4413      	add	r3, r2
 8002814:	817b      	strh	r3, [r7, #10]
      break;
 8002816:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	893a      	ldrh	r2, [r7, #8]
 800281c:	8979      	ldrh	r1, [r7, #10]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff ff88 	bl	8002734 <u8g2_font_draw_glyph>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop

08002830 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	4613      	mov	r3, r2
 8002840:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fc6a 	bl	800311c <u8x8_utf8_init>
  sum = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	4611      	mov	r1, r2
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	4798      	blx	r3
 800285a:	4603      	mov	r3, r0
 800285c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800285e:	8abb      	ldrh	r3, [r7, #20]
 8002860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002864:	4293      	cmp	r3, r2
 8002866:	d038      	beq.n	80028da <u8g2_draw_string+0xaa>
      break;
    str++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3301      	adds	r3, #1
 800286c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800286e:	8abb      	ldrh	r3, [r7, #20]
 8002870:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002874:	4293      	cmp	r3, r2
 8002876:	d0e9      	beq.n	800284c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002878:	8abb      	ldrh	r3, [r7, #20]
 800287a:	893a      	ldrh	r2, [r7, #8]
 800287c:	8979      	ldrh	r1, [r7, #10]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff84 	bl	800278c <u8g2_DrawGlyph>
 8002884:	4603      	mov	r3, r0
 8002886:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800288e:	2b03      	cmp	r3, #3
 8002890:	d81e      	bhi.n	80028d0 <u8g2_draw_string+0xa0>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <u8g2_draw_string+0x68>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028b3 	.word	0x080028b3
 80028a0:	080028bd 	.word	0x080028bd
 80028a4:	080028c7 	.word	0x080028c7
      {
	case 0:
	  x += delta;
 80028a8:	897a      	ldrh	r2, [r7, #10]
 80028aa:	8a7b      	ldrh	r3, [r7, #18]
 80028ac:	4413      	add	r3, r2
 80028ae:	817b      	strh	r3, [r7, #10]
	  break;
 80028b0:	e00e      	b.n	80028d0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80028b2:	893a      	ldrh	r2, [r7, #8]
 80028b4:	8a7b      	ldrh	r3, [r7, #18]
 80028b6:	4413      	add	r3, r2
 80028b8:	813b      	strh	r3, [r7, #8]
	  break;
 80028ba:	e009      	b.n	80028d0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80028bc:	897a      	ldrh	r2, [r7, #10]
 80028be:	8a7b      	ldrh	r3, [r7, #18]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	817b      	strh	r3, [r7, #10]
	  break;
 80028c4:	e004      	b.n	80028d0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80028c6:	893a      	ldrh	r2, [r7, #8]
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	813b      	strh	r3, [r7, #8]
	  break;
 80028ce:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80028d0:	8afa      	ldrh	r2, [r7, #22]
 80028d2:	8a7b      	ldrh	r3, [r7, #18]
 80028d4:	4413      	add	r3, r2
 80028d6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80028d8:	e7b8      	b.n	800284c <u8g2_draw_string+0x1c>
      break;
 80028da:	bf00      	nop
    }
  }
  return sum;
 80028dc:	8afb      	ldrh	r3, [r7, #22]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop

080028e8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	4613      	mov	r3, r2
 80028f8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <u8g2_DrawStr+0x30>)
 80028fe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002900:	893a      	ldrh	r2, [r7, #8]
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff ff92 	bl	8002830 <u8g2_draw_string>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	08003139 	.word	0x08003139

0800291c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05d      	beq.n	80029e8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04d      	beq.n	80029ea <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002954:	2b01      	cmp	r3, #1
 8002956:	d11c      	bne.n	8002992 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002964:	429a      	cmp	r2, r3
 8002966:	da05      	bge.n	8002974 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002980:	429a      	cmp	r2, r3
 8002982:	dd32      	ble.n	80029ea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002990:	e02b      	b.n	80029ea <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002998:	461a      	mov	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80029a0:	4619      	mov	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80029a8:	440b      	add	r3, r1
 80029aa:	429a      	cmp	r2, r3
 80029ac:	da0d      	bge.n	80029ca <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4413      	add	r3, r2
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	b25a      	sxtb	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dd07      	ble.n	80029ea <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80029e6:	e000      	b.n	80029ea <u8g2_UpdateRefHeight+0xce>
    return;
 80029e8:	bf00      	nop
  }  
}
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <u8g2_SetFontPosBaseline+0x1c>)
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	080029f5 	.word	0x080029f5

08002a2c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d00b      	beq.n	8002a58 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3374      	adds	r3, #116	; 0x74
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fa97 	bl	8001f80 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff62 	bl	800291c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	460b      	mov	r3, r1
 8002a70:	80fb      	strh	r3, [r7, #6]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002a7c:	8afb      	ldrh	r3, [r7, #22]
 8002a7e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	8abb      	ldrh	r3, [r7, #20]
 8002a86:	4413      	add	r3, r2
 8002a88:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002a8a:	8afa      	ldrh	r2, [r7, #22]
 8002a8c:	8abb      	ldrh	r3, [r7, #20]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d90b      	bls.n	8002aaa <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002a92:	8afa      	ldrh	r2, [r7, #22]
 8002a94:	88bb      	ldrh	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d205      	bcs.n	8002aa6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002a9a:	88bb      	ldrh	r3, [r7, #4]
 8002a9c:	82bb      	strh	r3, [r7, #20]
      b--;
 8002a9e:	8abb      	ldrh	r3, [r7, #20]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	82bb      	strh	r3, [r7, #20]
 8002aa4:	e001      	b.n	8002aaa <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002aaa:	8afa      	ldrh	r2, [r7, #22]
 8002aac:	88bb      	ldrh	r3, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d301      	bcc.n	8002ab6 <u8g2_clip_intersection2+0x56>
    return 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e01c      	b.n	8002af0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002ab6:	8aba      	ldrh	r2, [r7, #20]
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d801      	bhi.n	8002ac2 <u8g2_clip_intersection2+0x62>
    return 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e016      	b.n	8002af0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002ac2:	8afa      	ldrh	r2, [r7, #22]
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d201      	bcs.n	8002ace <u8g2_clip_intersection2+0x6e>
    a = c;
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002ace:	8aba      	ldrh	r2, [r7, #20]
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d901      	bls.n	8002ada <u8g2_clip_intersection2+0x7a>
    b = d;
 8002ad6:	88bb      	ldrh	r3, [r7, #4]
 8002ad8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8afa      	ldrh	r2, [r7, #22]
 8002ade:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002ae0:	8aba      	ldrh	r2, [r7, #20]
 8002ae2:	8afb      	ldrh	r3, [r7, #22]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	8aba      	ldrh	r2, [r7, #20]
 8002aec:	801a      	strh	r2, [r3, #0]
  return 1;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	893a      	ldrh	r2, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002b24:	88f8      	ldrh	r0, [r7, #6]
 8002b26:	893a      	ldrh	r2, [r7, #8]
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4603      	mov	r3, r0
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	47a0      	blx	r4
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}

08002b3e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b3e:	b590      	push	{r4, r7, lr}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	4608      	mov	r0, r1
 8002b48:	4611      	mov	r1, r2
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	817b      	strh	r3, [r7, #10]
 8002b50:	460b      	mov	r3, r1
 8002b52:	813b      	strh	r3, [r7, #8]
 8002b54:	4613      	mov	r3, r2
 8002b56:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d075      	beq.n	8002c4e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d072      	beq.n	8002c4e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d91a      	bls.n	8002ba4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002b6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d109      	bne.n	8002b8a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002b76:	897a      	ldrh	r2, [r7, #10]
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	817b      	strh	r3, [r7, #10]
	  x++;
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	817b      	strh	r3, [r7, #10]
 8002b88:	e00c      	b.n	8002ba4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d108      	bne.n	8002ba4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002b92:	893a      	ldrh	r2, [r7, #8]
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	813b      	strh	r3, [r7, #8]
	  y++;
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002ba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11a      	bne.n	8002bee <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d83b      	bhi.n	8002c3c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002bca:	893b      	ldrh	r3, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d937      	bls.n	8002c40 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002bdc:	1db9      	adds	r1, r7, #6
 8002bde:	f107 000a 	add.w	r0, r7, #10
 8002be2:	f7ff ff3d 	bl	8002a60 <u8g2_clip_intersection2>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11a      	bne.n	8002c22 <u8g2_DrawHVLine+0xe4>
	  return;
 8002bec:	e02f      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d824      	bhi.n	8002c44 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d920      	bls.n	8002c48 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002c12:	1db9      	adds	r1, r7, #6
 8002c14:	f107 0008 	add.w	r0, r7, #8
 8002c18:	f7ff ff22 	bl	8002a60 <u8g2_clip_intersection2>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d014      	beq.n	8002c4c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	689c      	ldr	r4, [r3, #8]
 8002c28:	8979      	ldrh	r1, [r7, #10]
 8002c2a:	893a      	ldrh	r2, [r7, #8]
 8002c2c:	88f8      	ldrh	r0, [r7, #6]
 8002c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4603      	mov	r3, r0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	47a0      	blx	r4
 8002c3a:	e008      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
	  return;
 8002c3c:	bf00      	nop
 8002c3e:	e006      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
	  return;
 8002c40:	bf00      	nop
 8002c42:	e004      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
	  return;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
	  return;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <u8g2_DrawHVLine+0x110>
	  return;
 8002c4c:	bf00      	nop
    }
}
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002c54:	b490      	push	{r4, r7}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	80fb      	strh	r3, [r7, #6]
 8002c66:	4603      	mov	r3, r0
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	807b      	strh	r3, [r7, #2]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	88bb      	ldrh	r3, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20d      	bcs.n	8002c96 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002c7a:	883a      	ldrh	r2, [r7, #0]
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d901      	bls.n	8002c86 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e014      	b.n	8002cb0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d901      	bls.n	8002c92 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e00c      	b.n	8002cb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002c96:	883a      	ldrh	r2, [r7, #0]
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d907      	bls.n	8002cae <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	883b      	ldrh	r3, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e002      	b.n	8002cb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002cae:	2300      	movs	r3, #0
    }
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc90      	pop	{r4, r7}
 8002cb8:	4770      	bx	lr

08002cba <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	813b      	strh	r3, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002ce0:	8b3b      	ldrh	r3, [r7, #24]
 8002ce2:	893a      	ldrh	r2, [r7, #8]
 8002ce4:	f7ff ffb6 	bl	8002c54 <u8g2_is_intersection_decision_tree>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <u8g2_IsIntersection+0x38>
    return 0; 
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e00a      	b.n	8002d08 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	897a      	ldrh	r2, [r7, #10]
 8002d02:	f7ff ffa7 	bl	8002c54 <u8g2_is_intersection_decision_tree>
 8002d06:	4603      	mov	r3, r0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	4608      	mov	r0, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	817b      	strh	r3, [r7, #10]
 8002d22:	460b      	mov	r3, r1
 8002d24:	813b      	strh	r3, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002d2e:	7efb      	ldrb	r3, [r7, #27]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002d3a:	7e3a      	ldrb	r2, [r7, #24]
 8002d3c:	7efb      	ldrb	r3, [r7, #27]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d801      	bhi.n	8002d5a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002d56:	7e3b      	ldrb	r3, [r7, #24]
 8002d58:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002d64:	7e3b      	ldrb	r3, [r7, #24]
 8002d66:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	7c1b      	ldrb	r3, [r3, #16]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	8afa      	ldrh	r2, [r7, #22]
 8002d7e:	fb12 f303 	smulbb	r3, r2, r3
 8002d82:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d117      	bne.n	8002dd2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	7ebb      	ldrb	r3, [r7, #26]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	7e7b      	ldrb	r3, [r7, #25]
 8002db6:	4053      	eors	r3, r2
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
	len--;
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e8      	bne.n	8002da2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002dd0:	e038      	b.n	8002e44 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	7ebb      	ldrb	r3, [r7, #26]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	7e7b      	ldrb	r3, [r7, #25]
 8002de6:	4053      	eors	r3, r2
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002dee:	7efb      	ldrb	r3, [r7, #27]
 8002df0:	3301      	adds	r3, #1
 8002df2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002df4:	7efb      	ldrb	r3, [r7, #27]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	76fb      	strb	r3, [r7, #27]
      len--;
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e02:	7efb      	ldrb	r3, [r7, #27]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d114      	bne.n	8002e32 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d801      	bhi.n	8002e22 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d008      	beq.n	8002e3e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	767b      	strb	r3, [r7, #25]
 8002e30:	e005      	b.n	8002e3e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002e32:	7ebb      	ldrb	r3, [r7, #26]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002e38:	7e7b      	ldrb	r3, [r7, #25]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1c6      	bne.n	8002dd2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002e44:	bf00      	nop
 8002e46:	3724      	adds	r7, #36	; 0x24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ffa9 	bl	8002e50 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff fd84 	bl	8002a0c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f28:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f2a:	89fb      	ldrh	r3, [r7, #14]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	89fa      	ldrh	r2, [r7, #14]
 8002f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	7c1b      	ldrb	r3, [r3, #16]
 8002f3a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	89fa      	ldrh	r2, [r7, #14]
 8002f46:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	89fa      	ldrh	r2, [r7, #14]
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f62:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002f6c:	4413      	add	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	7c52      	ldrb	r2, [r2, #17]
 8002f72:	4293      	cmp	r3, r2
 8002f74:	dd08      	ble.n	8002f88 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	7c5b      	ldrb	r3, [r3, #17]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f88:	89fb      	ldrh	r3, [r7, #14]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	4413      	add	r3, r2
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	8a9a      	ldrh	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	8ada      	ldrh	r2, [r3, #22]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af02      	add	r7, sp, #8
 8002fdc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fe5d 	bl	8002cba <u8g2_IsIntersection>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800300e:	e03b      	b.n	8003088 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003024:	429a      	cmp	r2, r3
 8003026:	d205      	bcs.n	8003034 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003040:	429a      	cmp	r2, r3
 8003042:	d905      	bls.n	8003050 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800305c:	429a      	cmp	r2, r3
 800305e:	d205      	bcs.n	800306c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003078:	429a      	cmp	r2, r3
 800307a:	d905      	bls.n	8003088 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff3b 	bl	8002f14 <u8g2_update_dimension_common>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ff7b 	bl	8002fd6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	817b      	strh	r3, [r7, #10]
 80030fa:	460b      	mov	r3, r1
 80030fc:	813b      	strh	r3, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003102:	88f8      	ldrh	r0, [r7, #6]
 8003104:	893a      	ldrh	r2, [r7, #8]
 8003106:	8979      	ldrh	r1, [r7, #10]
 8003108:	7e3b      	ldrb	r3, [r7, #24]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff fcf4 	bl	8002afc <u8g2_draw_hv_line_2dir>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <u8x8_ascii_next+0x18>
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b0a      	cmp	r3, #10
 800314e:	d102      	bne.n	8003156 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003154:	e001      	b.n	800315a <u8x8_ascii_next+0x22>
  return b;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	b29b      	uxth	r3, r3
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691c      	ldr	r4, [r3, #16]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	2300      	movs	r3, #0
 800317a:	2120      	movs	r1, #32
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	47a0      	blx	r4
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}

0800318a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800318a:	b590      	push	{r4, r7, lr}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	460b      	mov	r3, r1
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691c      	ldr	r4, [r3, #16]
 800319c:	7afa      	ldrb	r2, [r7, #11]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2117      	movs	r1, #23
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	47a0      	blx	r4
 80031a6:	4603      	mov	r3, r0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd90      	pop	{r4, r7, pc}

080031b0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80031bc:	1cfb      	adds	r3, r7, #3
 80031be:	461a      	mov	r2, r3
 80031c0:	2101      	movs	r1, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffe1 	bl	800318a <u8x8_byte_SendBytes>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68dc      	ldr	r4, [r3, #12]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	2300      	movs	r3, #0
 80031e6:	2115      	movs	r1, #21
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	47a0      	blx	r4
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd90      	pop	{r4, r7, pc}

080031f6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80031f6:	b590      	push	{r4, r7, lr}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68dc      	ldr	r4, [r3, #12]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	2300      	movs	r3, #0
 800320a:	2116      	movs	r1, #22
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	47a0      	blx	r4
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}

0800321a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800321a:	b590      	push	{r4, r7, lr}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	460b      	mov	r3, r1
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68dc      	ldr	r4, [r3, #12]
 800322c:	7afa      	ldrb	r2, [r7, #11]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2117      	movs	r1, #23
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	47a0      	blx	r4
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68dc      	ldr	r4, [r3, #12]
 800324c:	2300      	movs	r3, #0
 800324e:	2200      	movs	r2, #0
 8003250:	2118      	movs	r1, #24
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	47a0      	blx	r4
 8003256:	4603      	mov	r3, r0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}

08003260 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68dc      	ldr	r4, [r3, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	2200      	movs	r2, #0
 8003270:	2119      	movs	r1, #25
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	47a0      	blx	r4
 8003276:	4603      	mov	r3, r0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	73fb      	strb	r3, [r7, #15]
    data++;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2bfe      	cmp	r3, #254	; 0xfe
 800329a:	d031      	beq.n	8003300 <u8x8_cad_SendSequence+0x80>
 800329c:	2bfe      	cmp	r3, #254	; 0xfe
 800329e:	dc3d      	bgt.n	800331c <u8x8_cad_SendSequence+0x9c>
 80032a0:	2b19      	cmp	r3, #25
 80032a2:	dc3b      	bgt.n	800331c <u8x8_cad_SendSequence+0x9c>
 80032a4:	2b18      	cmp	r3, #24
 80032a6:	da23      	bge.n	80032f0 <u8x8_cad_SendSequence+0x70>
 80032a8:	2b16      	cmp	r3, #22
 80032aa:	dc02      	bgt.n	80032b2 <u8x8_cad_SendSequence+0x32>
 80032ac:	2b15      	cmp	r3, #21
 80032ae:	da03      	bge.n	80032b8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80032b0:	e034      	b.n	800331c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80032b2:	2b17      	cmp	r3, #23
 80032b4:	d00e      	beq.n	80032d4 <u8x8_cad_SendSequence+0x54>
	return;
 80032b6:	e031      	b.n	800331c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68dc      	ldr	r4, [r3, #12]
 80032c2:	7bba      	ldrb	r2, [r7, #14]
 80032c4:	7bf9      	ldrb	r1, [r7, #15]
 80032c6:	2300      	movs	r3, #0
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	47a0      	blx	r4
	  data++;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	603b      	str	r3, [r7, #0]
	  break;
 80032d2:	e022      	b.n	800331a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80032da:	f107 030e 	add.w	r3, r7, #14
 80032de:	461a      	mov	r2, r3
 80032e0:	2101      	movs	r1, #1
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff99 	bl	800321a <u8x8_cad_SendData>
	  data++;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
	  break;
 80032ee:	e014      	b.n	800331a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68dc      	ldr	r4, [r3, #12]
 80032f4:	7bf9      	ldrb	r1, [r7, #15]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2200      	movs	r2, #0
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	47a0      	blx	r4
	  break;
 80032fe:	e00c      	b.n	800331a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003306:	7bbb      	ldrb	r3, [r7, #14]
 8003308:	461a      	mov	r2, r3
 800330a:	2129      	movs	r1, #41	; 0x29
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f9d8 	bl	80036c2 <u8x8_gpio_call>
	  data++;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	603b      	str	r3, [r7, #0]
	  break;
 8003318:	bf00      	nop
    cmd = *data;
 800331a:	e7b6      	b.n	800328a <u8x8_cad_SendSequence+0xa>
	return;
 800331c:	bf00      	nop
    }
  }
}
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	72fb      	strb	r3, [r7, #11]
 8003332:	4613      	mov	r3, r2
 8003334:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	3b14      	subs	r3, #20
 800333a:	2b05      	cmp	r3, #5
 800333c:	d82f      	bhi.n	800339e <u8x8_cad_001+0x7a>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <u8x8_cad_001+0x20>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	0800338d 	.word	0x0800338d
 8003348:	0800335d 	.word	0x0800335d
 800334c:	08003371 	.word	0x08003371
 8003350:	08003385 	.word	0x08003385
 8003354:	0800338d 	.word	0x0800338d
 8003358:	0800338d 	.word	0x0800338d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800335c:	2100      	movs	r1, #0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff ff01 	bl	8003166 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003364:	7abb      	ldrb	r3, [r7, #10]
 8003366:	4619      	mov	r1, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff ff21 	bl	80031b0 <u8x8_byte_SendByte>
      break;
 800336e:	e018      	b.n	80033a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003370:	2100      	movs	r1, #0
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fef7 	bl	8003166 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003378:	7abb      	ldrb	r3, [r7, #10]
 800337a:	4619      	mov	r1, r3
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff17 	bl	80031b0 <u8x8_byte_SendByte>
      break;
 8003382:	e00e      	b.n	80033a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003384:	2101      	movs	r1, #1
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff feed 	bl	8003166 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691c      	ldr	r4, [r3, #16]
 8003390:	7aba      	ldrb	r2, [r7, #10]
 8003392:	7af9      	ldrb	r1, [r7, #11]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	47a0      	blx	r4
 800339a:	4603      	mov	r3, r0
 800339c:	e002      	b.n	80033a4 <u8x8_cad_001+0x80>
    default:
      return 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <u8x8_cad_001+0x80>
  }
  return 1;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}

080033ac <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	72fb      	strb	r3, [r7, #11]
 80033ba:	4613      	mov	r3, r2
 80033bc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	3b0b      	subs	r3, #11
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	f200 808a 	bhi.w	80034dc <u8x8_d_ssd1306_sh1106_generic+0x130>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e5 	.word	0x080033e5
 80033d4:	080034dd 	.word	0x080034dd
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	08003431 	.word	0x08003431
 80033e0:	08003451 	.word	0x08003451
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80033ea:	4940      	ldr	r1, [pc, #256]	; (80034ec <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff ff47 	bl	8003280 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80033f2:	e075      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80033f4:	493e      	ldr	r1, [pc, #248]	; (80034f0 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff ff42 	bl	8003280 <u8x8_cad_SendSequence>
      break;
 80033fc:	e070      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80033fe:	7abb      	ldrb	r3, [r7, #10]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8003404:	493b      	ldr	r1, [pc, #236]	; (80034f4 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ff3a 	bl	8003280 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	7c9a      	ldrb	r2, [r3, #18]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003418:	e062      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800341a:	4937      	ldr	r1, [pc, #220]	; (80034f8 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff2f 	bl	8003280 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	7cda      	ldrb	r2, [r3, #19]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800342e:	e057      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff ff05 	bl	8003240 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003436:	2181      	movs	r1, #129	; 0x81
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7ff feca 	bl	80031d2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800343e:	7abb      	ldrb	r3, [r7, #10]
 8003440:	4619      	mov	r1, r3
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fed7 	bl	80031f6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff ff09 	bl	8003260 <u8x8_cad_EndTransfer>
      break;
 800344e:	e047      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fef5 	bl	8003240 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	795b      	ldrb	r3, [r3, #5]
 800345a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	4413      	add	r3, r2
 800346c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800346e:	2140      	movs	r1, #64	; 0x40
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff feae 	bl	80031d2 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fea4 	bl	80031d2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff feae 	bl	80031f6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	799b      	ldrb	r3, [r3, #6]
 800349e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff fea5 	bl	80031f6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	791b      	ldrb	r3, [r3, #4]
 80034b0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80034b8:	7dbb      	ldrb	r3, [r7, #22]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4619      	mov	r1, r3
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fea9 	bl	800321a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80034c8:	7abb      	ldrb	r3, [r7, #10]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80034ce:	7abb      	ldrb	r3, [r7, #10]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1eb      	bne.n	80034ac <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fec3 	bl	8003260 <u8x8_cad_EndTransfer>
      break;
 80034da:	e001      	b.n	80034e0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80034e0:	2301      	movs	r3, #1
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080052bc 	.word	0x080052bc
 80034f0:	080052c4 	.word	0x080052c4
 80034f4:	080052cc 	.word	0x080052cc
 80034f8:	080052d4 	.word	0x080052d4

080034fc <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	72fb      	strb	r3, [r7, #11]
 800350a:	4613      	mov	r3, r2
 800350c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800350e:	7aba      	ldrb	r2, [r7, #10]
 8003510:	7af9      	ldrb	r1, [r7, #11]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff ff49 	bl	80033ac <u8x8_d_ssd1306_sh1106_generic>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003520:	2301      	movs	r3, #1
 8003522:	e014      	b.n	800354e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	2b09      	cmp	r3, #9
 8003528:	d009      	beq.n	800353e <u8x8_d_ssd1306_128x64_noname+0x42>
 800352a:	2b0a      	cmp	r3, #10
 800352c:	d10c      	bne.n	8003548 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f82a 	bl	8003588 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003534:	4908      	ldr	r1, [pc, #32]	; (8003558 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fea2 	bl	8003280 <u8x8_cad_SendSequence>
      break;
 800353c:	e006      	b.n	800354c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800353e:	4907      	ldr	r1, [pc, #28]	; (800355c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f80d 	bl	8003560 <u8x8_d_helper_display_setup_memory>
      break;
 8003546:	e001      	b.n	800354c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	08005284 	.word	0x08005284
 800355c:	080052dc 	.word	0x080052dc

08003560 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	7c9a      	ldrb	r2, [r3, #18]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695c      	ldr	r4, [r3, #20]
 8003594:	2300      	movs	r3, #0
 8003596:	2200      	movs	r2, #0
 8003598:	2128      	movs	r1, #40	; 0x28
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68dc      	ldr	r4, [r3, #12]
 80035a2:	2300      	movs	r3, #0
 80035a4:	2200      	movs	r2, #0
 80035a6:	2114      	movs	r1, #20
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80035ac:	2201      	movs	r2, #1
 80035ae:	214b      	movs	r1, #75	; 0x4b
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f886 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	791b      	ldrb	r3, [r3, #4]
 80035bc:	461a      	mov	r2, r3
 80035be:	2129      	movs	r1, #41	; 0x29
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f87e 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	214b      	movs	r1, #75	; 0x4b
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f879 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2129      	movs	r1, #41	; 0x29
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f871 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80035e0:	2201      	movs	r2, #1
 80035e2:	214b      	movs	r1, #75	; 0x4b
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f86c 	bl	80036c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	795b      	ldrb	r3, [r3, #5]
 80035f0:	461a      	mov	r2, r3
 80035f2:	2129      	movs	r1, #41	; 0x29
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f864 	bl	80036c2 <u8x8_gpio_call>
}    
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}

08003602 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003602:	b590      	push	{r4, r7, lr}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	4608      	mov	r0, r1
 800360c:	4611      	mov	r1, r2
 800360e:	461a      	mov	r2, r3
 8003610:	4603      	mov	r3, r0
 8003612:	70fb      	strb	r3, [r7, #3]
 8003614:	460b      	mov	r3, r1
 8003616:	70bb      	strb	r3, [r7, #2]
 8003618:	4613      	mov	r3, r2
 800361a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003620:	78bb      	ldrb	r3, [r7, #2]
 8003622:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689c      	ldr	r4, [r3, #8]
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	2201      	movs	r2, #1
 8003636:	210f      	movs	r1, #15
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	47a0      	blx	r4
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}

08003646 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003646:	b590      	push	{r4, r7, lr}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689c      	ldr	r4, [r3, #8]
 8003652:	2300      	movs	r3, #0
 8003654:	2200      	movs	r2, #0
 8003656:	2109      	movs	r1, #9
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	47a0      	blx	r4
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}

08003664 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689c      	ldr	r4, [r3, #8]
 8003670:	2300      	movs	r3, #0
 8003672:	2200      	movs	r2, #0
 8003674:	210a      	movs	r1, #10
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003682:	b590      	push	{r4, r7, lr}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689c      	ldr	r4, [r3, #8]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	2300      	movs	r3, #0
 8003696:	210b      	movs	r1, #11
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	47a0      	blx	r4
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}

080036a4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689c      	ldr	r4, [r3, #8]
 80036b0:	2300      	movs	r3, #0
 80036b2:	2200      	movs	r2, #0
 80036b4:	2110      	movs	r1, #16
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	47a0      	blx	r4
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]
 80036ce:	4613      	mov	r3, r2
 80036d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695c      	ldr	r4, [r3, #20]
 80036d6:	78ba      	ldrb	r2, [r7, #2]
 80036d8:	78f9      	ldrb	r1, [r7, #3]
 80036da:	2300      	movs	r3, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	47a0      	blx	r4
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}

080036e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	72fb      	strb	r3, [r7, #11]
 80036f6:	4613      	mov	r3, r2
 80036f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <u8x8_SetupDefaults+0x58>)
 800371a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <u8x8_SetupDefaults+0x58>)
 8003720:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <u8x8_SetupDefaults+0x58>)
 8003726:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <u8x8_SetupDefaults+0x58>)
 800372c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	22ff      	movs	r2, #255	; 0xff
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	080036e9 	.word	0x080036e9

08003764 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ffc8 	bl	8003708 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ff58 	bl	8003646 <u8x8_SetupMemory>
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <__errno>:
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <__errno+0x8>)
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000004 	.word	0x20000004

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4d0d      	ldr	r5, [pc, #52]	; (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2600      	movs	r6, #0
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4d0b      	ldr	r5, [pc, #44]	; (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	; (80037f0 <__libc_init_array+0x44>)
 80037c0:	f001 f88e 	bl	80048e0 <_init>
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2600      	movs	r6, #0
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	0800538c 	.word	0x0800538c
 80037e8:	0800538c 	.word	0x0800538c
 80037ec:	0800538c 	.word	0x0800538c
 80037f0:	08005390 	.word	0x08005390

080037f4 <memset>:
 80037f4:	4402      	add	r2, r0
 80037f6:	4603      	mov	r3, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <_puts_r>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	460e      	mov	r6, r1
 8003808:	4605      	mov	r5, r0
 800380a:	b118      	cbz	r0, 8003814 <_puts_r+0x10>
 800380c:	6983      	ldr	r3, [r0, #24]
 800380e:	b90b      	cbnz	r3, 8003814 <_puts_r+0x10>
 8003810:	f000 fa68 	bl	8003ce4 <__sinit>
 8003814:	69ab      	ldr	r3, [r5, #24]
 8003816:	68ac      	ldr	r4, [r5, #8]
 8003818:	b913      	cbnz	r3, 8003820 <_puts_r+0x1c>
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fa62 	bl	8003ce4 <__sinit>
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <_puts_r+0xd0>)
 8003822:	429c      	cmp	r4, r3
 8003824:	d120      	bne.n	8003868 <_puts_r+0x64>
 8003826:	686c      	ldr	r4, [r5, #4]
 8003828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800382a:	07db      	lsls	r3, r3, #31
 800382c:	d405      	bmi.n	800383a <_puts_r+0x36>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	0598      	lsls	r0, r3, #22
 8003832:	d402      	bmi.n	800383a <_puts_r+0x36>
 8003834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003836:	f000 faf3 	bl	8003e20 <__retarget_lock_acquire_recursive>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	0719      	lsls	r1, r3, #28
 800383e:	d51d      	bpl.n	800387c <_puts_r+0x78>
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	b1db      	cbz	r3, 800387c <_puts_r+0x78>
 8003844:	3e01      	subs	r6, #1
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800384c:	3b01      	subs	r3, #1
 800384e:	60a3      	str	r3, [r4, #8]
 8003850:	bb39      	cbnz	r1, 80038a2 <_puts_r+0x9e>
 8003852:	2b00      	cmp	r3, #0
 8003854:	da38      	bge.n	80038c8 <_puts_r+0xc4>
 8003856:	4622      	mov	r2, r4
 8003858:	210a      	movs	r1, #10
 800385a:	4628      	mov	r0, r5
 800385c:	f000 f868 	bl	8003930 <__swbuf_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d011      	beq.n	8003888 <_puts_r+0x84>
 8003864:	250a      	movs	r5, #10
 8003866:	e011      	b.n	800388c <_puts_r+0x88>
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <_puts_r+0xd4>)
 800386a:	429c      	cmp	r4, r3
 800386c:	d101      	bne.n	8003872 <_puts_r+0x6e>
 800386e:	68ac      	ldr	r4, [r5, #8]
 8003870:	e7da      	b.n	8003828 <_puts_r+0x24>
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <_puts_r+0xd8>)
 8003874:	429c      	cmp	r4, r3
 8003876:	bf08      	it	eq
 8003878:	68ec      	ldreq	r4, [r5, #12]
 800387a:	e7d5      	b.n	8003828 <_puts_r+0x24>
 800387c:	4621      	mov	r1, r4
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f8a8 	bl	80039d4 <__swsetup_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0dd      	beq.n	8003844 <_puts_r+0x40>
 8003888:	f04f 35ff 	mov.w	r5, #4294967295
 800388c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800388e:	07da      	lsls	r2, r3, #31
 8003890:	d405      	bmi.n	800389e <_puts_r+0x9a>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	d402      	bmi.n	800389e <_puts_r+0x9a>
 8003898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389a:	f000 fac2 	bl	8003e22 <__retarget_lock_release_recursive>
 800389e:	4628      	mov	r0, r5
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da04      	bge.n	80038b0 <_puts_r+0xac>
 80038a6:	69a2      	ldr	r2, [r4, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc06      	bgt.n	80038ba <_puts_r+0xb6>
 80038ac:	290a      	cmp	r1, #10
 80038ae:	d004      	beq.n	80038ba <_puts_r+0xb6>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	6022      	str	r2, [r4, #0]
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	e7c5      	b.n	8003846 <_puts_r+0x42>
 80038ba:	4622      	mov	r2, r4
 80038bc:	4628      	mov	r0, r5
 80038be:	f000 f837 	bl	8003930 <__swbuf_r>
 80038c2:	3001      	adds	r0, #1
 80038c4:	d1bf      	bne.n	8003846 <_puts_r+0x42>
 80038c6:	e7df      	b.n	8003888 <_puts_r+0x84>
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	250a      	movs	r5, #10
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	6022      	str	r2, [r4, #0]
 80038d0:	701d      	strb	r5, [r3, #0]
 80038d2:	e7db      	b.n	800388c <_puts_r+0x88>
 80038d4:	08005318 	.word	0x08005318
 80038d8:	08005338 	.word	0x08005338
 80038dc:	080052f8 	.word	0x080052f8

080038e0 <puts>:
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <puts+0xc>)
 80038e2:	4601      	mov	r1, r0
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f7ff bf8d 	b.w	8003804 <_puts_r>
 80038ea:	bf00      	nop
 80038ec:	20000004 	.word	0x20000004

080038f0 <siprintf>:
 80038f0:	b40e      	push	{r1, r2, r3}
 80038f2:	b500      	push	{lr}
 80038f4:	b09c      	sub	sp, #112	; 0x70
 80038f6:	ab1d      	add	r3, sp, #116	; 0x74
 80038f8:	9002      	str	r0, [sp, #8]
 80038fa:	9006      	str	r0, [sp, #24]
 80038fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <siprintf+0x38>)
 8003902:	9107      	str	r1, [sp, #28]
 8003904:	9104      	str	r1, [sp, #16]
 8003906:	4909      	ldr	r1, [pc, #36]	; (800392c <siprintf+0x3c>)
 8003908:	f853 2b04 	ldr.w	r2, [r3], #4
 800390c:	9105      	str	r1, [sp, #20]
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	a902      	add	r1, sp, #8
 8003914:	f000 fc28 	bl	8004168 <_svfiprintf_r>
 8003918:	9b02      	ldr	r3, [sp, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	b01c      	add	sp, #112	; 0x70
 8003920:	f85d eb04 	ldr.w	lr, [sp], #4
 8003924:	b003      	add	sp, #12
 8003926:	4770      	bx	lr
 8003928:	20000004 	.word	0x20000004
 800392c:	ffff0208 	.word	0xffff0208

08003930 <__swbuf_r>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	460e      	mov	r6, r1
 8003934:	4614      	mov	r4, r2
 8003936:	4605      	mov	r5, r0
 8003938:	b118      	cbz	r0, 8003942 <__swbuf_r+0x12>
 800393a:	6983      	ldr	r3, [r0, #24]
 800393c:	b90b      	cbnz	r3, 8003942 <__swbuf_r+0x12>
 800393e:	f000 f9d1 	bl	8003ce4 <__sinit>
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <__swbuf_r+0x98>)
 8003944:	429c      	cmp	r4, r3
 8003946:	d12b      	bne.n	80039a0 <__swbuf_r+0x70>
 8003948:	686c      	ldr	r4, [r5, #4]
 800394a:	69a3      	ldr	r3, [r4, #24]
 800394c:	60a3      	str	r3, [r4, #8]
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	071a      	lsls	r2, r3, #28
 8003952:	d52f      	bpl.n	80039b4 <__swbuf_r+0x84>
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	b36b      	cbz	r3, 80039b4 <__swbuf_r+0x84>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	1ac0      	subs	r0, r0, r3
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	b2f6      	uxtb	r6, r6
 8003962:	4283      	cmp	r3, r0
 8003964:	4637      	mov	r7, r6
 8003966:	dc04      	bgt.n	8003972 <__swbuf_r+0x42>
 8003968:	4621      	mov	r1, r4
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f926 	bl	8003bbc <_fflush_r>
 8003970:	bb30      	cbnz	r0, 80039c0 <__swbuf_r+0x90>
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	60a3      	str	r3, [r4, #8]
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	701e      	strb	r6, [r3, #0]
 8003980:	6963      	ldr	r3, [r4, #20]
 8003982:	3001      	adds	r0, #1
 8003984:	4283      	cmp	r3, r0
 8003986:	d004      	beq.n	8003992 <__swbuf_r+0x62>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	07db      	lsls	r3, r3, #31
 800398c:	d506      	bpl.n	800399c <__swbuf_r+0x6c>
 800398e:	2e0a      	cmp	r6, #10
 8003990:	d104      	bne.n	800399c <__swbuf_r+0x6c>
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f911 	bl	8003bbc <_fflush_r>
 800399a:	b988      	cbnz	r0, 80039c0 <__swbuf_r+0x90>
 800399c:	4638      	mov	r0, r7
 800399e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <__swbuf_r+0x9c>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	d101      	bne.n	80039aa <__swbuf_r+0x7a>
 80039a6:	68ac      	ldr	r4, [r5, #8]
 80039a8:	e7cf      	b.n	800394a <__swbuf_r+0x1a>
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <__swbuf_r+0xa0>)
 80039ac:	429c      	cmp	r4, r3
 80039ae:	bf08      	it	eq
 80039b0:	68ec      	ldreq	r4, [r5, #12]
 80039b2:	e7ca      	b.n	800394a <__swbuf_r+0x1a>
 80039b4:	4621      	mov	r1, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f80c 	bl	80039d4 <__swsetup_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d0cb      	beq.n	8003958 <__swbuf_r+0x28>
 80039c0:	f04f 37ff 	mov.w	r7, #4294967295
 80039c4:	e7ea      	b.n	800399c <__swbuf_r+0x6c>
 80039c6:	bf00      	nop
 80039c8:	08005318 	.word	0x08005318
 80039cc:	08005338 	.word	0x08005338
 80039d0:	080052f8 	.word	0x080052f8

080039d4 <__swsetup_r>:
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <__swsetup_r+0xcc>)
 80039d6:	b570      	push	{r4, r5, r6, lr}
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	4606      	mov	r6, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	b125      	cbz	r5, 80039ea <__swsetup_r+0x16>
 80039e0:	69ab      	ldr	r3, [r5, #24]
 80039e2:	b913      	cbnz	r3, 80039ea <__swsetup_r+0x16>
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 f97d 	bl	8003ce4 <__sinit>
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <__swsetup_r+0xd0>)
 80039ec:	429c      	cmp	r4, r3
 80039ee:	d10f      	bne.n	8003a10 <__swsetup_r+0x3c>
 80039f0:	686c      	ldr	r4, [r5, #4]
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039f8:	0719      	lsls	r1, r3, #28
 80039fa:	d42c      	bmi.n	8003a56 <__swsetup_r+0x82>
 80039fc:	06dd      	lsls	r5, r3, #27
 80039fe:	d411      	bmi.n	8003a24 <__swsetup_r+0x50>
 8003a00:	2309      	movs	r3, #9
 8003a02:	6033      	str	r3, [r6, #0]
 8003a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	e03e      	b.n	8003a8e <__swsetup_r+0xba>
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <__swsetup_r+0xd4>)
 8003a12:	429c      	cmp	r4, r3
 8003a14:	d101      	bne.n	8003a1a <__swsetup_r+0x46>
 8003a16:	68ac      	ldr	r4, [r5, #8]
 8003a18:	e7eb      	b.n	80039f2 <__swsetup_r+0x1e>
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <__swsetup_r+0xd8>)
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	bf08      	it	eq
 8003a20:	68ec      	ldreq	r4, [r5, #12]
 8003a22:	e7e6      	b.n	80039f2 <__swsetup_r+0x1e>
 8003a24:	0758      	lsls	r0, r3, #29
 8003a26:	d512      	bpl.n	8003a4e <__swsetup_r+0x7a>
 8003a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a2a:	b141      	cbz	r1, 8003a3e <__swsetup_r+0x6a>
 8003a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a30:	4299      	cmp	r1, r3
 8003a32:	d002      	beq.n	8003a3a <__swsetup_r+0x66>
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 fa5b 	bl	8003ef0 <_free_r>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a44:	81a3      	strh	r3, [r4, #12]
 8003a46:	2300      	movs	r3, #0
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6923      	ldr	r3, [r4, #16]
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	b94b      	cbnz	r3, 8003a6e <__swsetup_r+0x9a>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d003      	beq.n	8003a6e <__swsetup_r+0x9a>
 8003a66:	4621      	mov	r1, r4
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 fa01 	bl	8003e70 <__smakebuf_r>
 8003a6e:	89a0      	ldrh	r0, [r4, #12]
 8003a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a74:	f010 0301 	ands.w	r3, r0, #1
 8003a78:	d00a      	beq.n	8003a90 <__swsetup_r+0xbc>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	6963      	ldr	r3, [r4, #20]
 8003a80:	425b      	negs	r3, r3
 8003a82:	61a3      	str	r3, [r4, #24]
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	b943      	cbnz	r3, 8003a9a <__swsetup_r+0xc6>
 8003a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a8c:	d1ba      	bne.n	8003a04 <__swsetup_r+0x30>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	0781      	lsls	r1, r0, #30
 8003a92:	bf58      	it	pl
 8003a94:	6963      	ldrpl	r3, [r4, #20]
 8003a96:	60a3      	str	r3, [r4, #8]
 8003a98:	e7f4      	b.n	8003a84 <__swsetup_r+0xb0>
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e7f7      	b.n	8003a8e <__swsetup_r+0xba>
 8003a9e:	bf00      	nop
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	08005318 	.word	0x08005318
 8003aa8:	08005338 	.word	0x08005338
 8003aac:	080052f8 	.word	0x080052f8

08003ab0 <__sflush_r>:
 8003ab0:	898a      	ldrh	r2, [r1, #12]
 8003ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	0710      	lsls	r0, r2, #28
 8003aba:	460c      	mov	r4, r1
 8003abc:	d458      	bmi.n	8003b70 <__sflush_r+0xc0>
 8003abe:	684b      	ldr	r3, [r1, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	dc05      	bgt.n	8003ad0 <__sflush_r+0x20>
 8003ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	dc02      	bgt.n	8003ad0 <__sflush_r+0x20>
 8003aca:	2000      	movs	r0, #0
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	d0f9      	beq.n	8003aca <__sflush_r+0x1a>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003adc:	682f      	ldr	r7, [r5, #0]
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	d032      	beq.n	8003b48 <__sflush_r+0x98>
 8003ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	075a      	lsls	r2, r3, #29
 8003ae8:	d505      	bpl.n	8003af6 <__sflush_r+0x46>
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	1ac0      	subs	r0, r0, r3
 8003aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003af0:	b10b      	cbz	r3, 8003af6 <__sflush_r+0x46>
 8003af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af4:	1ac0      	subs	r0, r0, r3
 8003af6:	2300      	movs	r3, #0
 8003af8:	4602      	mov	r2, r0
 8003afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003afc:	6a21      	ldr	r1, [r4, #32]
 8003afe:	4628      	mov	r0, r5
 8003b00:	47b0      	blx	r6
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	d106      	bne.n	8003b16 <__sflush_r+0x66>
 8003b08:	6829      	ldr	r1, [r5, #0]
 8003b0a:	291d      	cmp	r1, #29
 8003b0c:	d82c      	bhi.n	8003b68 <__sflush_r+0xb8>
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <__sflush_r+0x108>)
 8003b10:	40ca      	lsrs	r2, r1
 8003b12:	07d6      	lsls	r6, r2, #31
 8003b14:	d528      	bpl.n	8003b68 <__sflush_r+0xb8>
 8003b16:	2200      	movs	r2, #0
 8003b18:	6062      	str	r2, [r4, #4]
 8003b1a:	04d9      	lsls	r1, r3, #19
 8003b1c:	6922      	ldr	r2, [r4, #16]
 8003b1e:	6022      	str	r2, [r4, #0]
 8003b20:	d504      	bpl.n	8003b2c <__sflush_r+0x7c>
 8003b22:	1c42      	adds	r2, r0, #1
 8003b24:	d101      	bne.n	8003b2a <__sflush_r+0x7a>
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	b903      	cbnz	r3, 8003b2c <__sflush_r+0x7c>
 8003b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b2e:	602f      	str	r7, [r5, #0]
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d0ca      	beq.n	8003aca <__sflush_r+0x1a>
 8003b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d002      	beq.n	8003b42 <__sflush_r+0x92>
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 f9d7 	bl	8003ef0 <_free_r>
 8003b42:	2000      	movs	r0, #0
 8003b44:	6360      	str	r0, [r4, #52]	; 0x34
 8003b46:	e7c1      	b.n	8003acc <__sflush_r+0x1c>
 8003b48:	6a21      	ldr	r1, [r4, #32]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	47b0      	blx	r6
 8003b50:	1c41      	adds	r1, r0, #1
 8003b52:	d1c7      	bne.n	8003ae4 <__sflush_r+0x34>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0c4      	beq.n	8003ae4 <__sflush_r+0x34>
 8003b5a:	2b1d      	cmp	r3, #29
 8003b5c:	d001      	beq.n	8003b62 <__sflush_r+0xb2>
 8003b5e:	2b16      	cmp	r3, #22
 8003b60:	d101      	bne.n	8003b66 <__sflush_r+0xb6>
 8003b62:	602f      	str	r7, [r5, #0]
 8003b64:	e7b1      	b.n	8003aca <__sflush_r+0x1a>
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	e7ad      	b.n	8003acc <__sflush_r+0x1c>
 8003b70:	690f      	ldr	r7, [r1, #16]
 8003b72:	2f00      	cmp	r7, #0
 8003b74:	d0a9      	beq.n	8003aca <__sflush_r+0x1a>
 8003b76:	0793      	lsls	r3, r2, #30
 8003b78:	680e      	ldr	r6, [r1, #0]
 8003b7a:	bf08      	it	eq
 8003b7c:	694b      	ldreq	r3, [r1, #20]
 8003b7e:	600f      	str	r7, [r1, #0]
 8003b80:	bf18      	it	ne
 8003b82:	2300      	movne	r3, #0
 8003b84:	eba6 0807 	sub.w	r8, r6, r7
 8003b88:	608b      	str	r3, [r1, #8]
 8003b8a:	f1b8 0f00 	cmp.w	r8, #0
 8003b8e:	dd9c      	ble.n	8003aca <__sflush_r+0x1a>
 8003b90:	6a21      	ldr	r1, [r4, #32]
 8003b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b94:	4643      	mov	r3, r8
 8003b96:	463a      	mov	r2, r7
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b0      	blx	r6
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	dc06      	bgt.n	8003bae <__sflush_r+0xfe>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	e78e      	b.n	8003acc <__sflush_r+0x1c>
 8003bae:	4407      	add	r7, r0
 8003bb0:	eba8 0800 	sub.w	r8, r8, r0
 8003bb4:	e7e9      	b.n	8003b8a <__sflush_r+0xda>
 8003bb6:	bf00      	nop
 8003bb8:	20400001 	.word	0x20400001

08003bbc <_fflush_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	690b      	ldr	r3, [r1, #16]
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	b913      	cbnz	r3, 8003bcc <_fflush_r+0x10>
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	b118      	cbz	r0, 8003bd6 <_fflush_r+0x1a>
 8003bce:	6983      	ldr	r3, [r0, #24]
 8003bd0:	b90b      	cbnz	r3, 8003bd6 <_fflush_r+0x1a>
 8003bd2:	f000 f887 	bl	8003ce4 <__sinit>
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <_fflush_r+0x6c>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d11b      	bne.n	8003c14 <_fflush_r+0x58>
 8003bdc:	686c      	ldr	r4, [r5, #4]
 8003bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ef      	beq.n	8003bc6 <_fflush_r+0xa>
 8003be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003be8:	07d0      	lsls	r0, r2, #31
 8003bea:	d404      	bmi.n	8003bf6 <_fflush_r+0x3a>
 8003bec:	0599      	lsls	r1, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <_fflush_r+0x3a>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf2:	f000 f915 	bl	8003e20 <__retarget_lock_acquire_recursive>
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7ff ff59 	bl	8003ab0 <__sflush_r>
 8003bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c00:	07da      	lsls	r2, r3, #31
 8003c02:	4605      	mov	r5, r0
 8003c04:	d4e0      	bmi.n	8003bc8 <_fflush_r+0xc>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	059b      	lsls	r3, r3, #22
 8003c0a:	d4dd      	bmi.n	8003bc8 <_fflush_r+0xc>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c0e:	f000 f908 	bl	8003e22 <__retarget_lock_release_recursive>
 8003c12:	e7d9      	b.n	8003bc8 <_fflush_r+0xc>
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <_fflush_r+0x70>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d101      	bne.n	8003c1e <_fflush_r+0x62>
 8003c1a:	68ac      	ldr	r4, [r5, #8]
 8003c1c:	e7df      	b.n	8003bde <_fflush_r+0x22>
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <_fflush_r+0x74>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	bf08      	it	eq
 8003c24:	68ec      	ldreq	r4, [r5, #12]
 8003c26:	e7da      	b.n	8003bde <_fflush_r+0x22>
 8003c28:	08005318 	.word	0x08005318
 8003c2c:	08005338 	.word	0x08005338
 8003c30:	080052f8 	.word	0x080052f8

08003c34 <std>:
 8003c34:	2300      	movs	r3, #0
 8003c36:	b510      	push	{r4, lr}
 8003c38:	4604      	mov	r4, r0
 8003c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c42:	6083      	str	r3, [r0, #8]
 8003c44:	8181      	strh	r1, [r0, #12]
 8003c46:	6643      	str	r3, [r0, #100]	; 0x64
 8003c48:	81c2      	strh	r2, [r0, #14]
 8003c4a:	6183      	str	r3, [r0, #24]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	2208      	movs	r2, #8
 8003c50:	305c      	adds	r0, #92	; 0x5c
 8003c52:	f7ff fdcf 	bl	80037f4 <memset>
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <std+0x38>)
 8003c58:	6263      	str	r3, [r4, #36]	; 0x24
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <std+0x3c>)
 8003c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <std+0x40>)
 8003c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <std+0x44>)
 8003c64:	6224      	str	r4, [r4, #32]
 8003c66:	6323      	str	r3, [r4, #48]	; 0x30
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	080046b1 	.word	0x080046b1
 8003c70:	080046d3 	.word	0x080046d3
 8003c74:	0800470b 	.word	0x0800470b
 8003c78:	0800472f 	.word	0x0800472f

08003c7c <_cleanup_r>:
 8003c7c:	4901      	ldr	r1, [pc, #4]	; (8003c84 <_cleanup_r+0x8>)
 8003c7e:	f000 b8af 	b.w	8003de0 <_fwalk_reent>
 8003c82:	bf00      	nop
 8003c84:	08003bbd 	.word	0x08003bbd

08003c88 <__sfmoreglue>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	2268      	movs	r2, #104	; 0x68
 8003c8c:	1e4d      	subs	r5, r1, #1
 8003c8e:	4355      	muls	r5, r2
 8003c90:	460e      	mov	r6, r1
 8003c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c96:	f000 f997 	bl	8003fc8 <_malloc_r>
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	b140      	cbz	r0, 8003cb0 <__sfmoreglue+0x28>
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ca4:	300c      	adds	r0, #12
 8003ca6:	60a0      	str	r0, [r4, #8]
 8003ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cac:	f7ff fda2 	bl	80037f4 <memset>
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}

08003cb4 <__sfp_lock_acquire>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__sfp_lock_acquire+0x8>)
 8003cb6:	f000 b8b3 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	200005b1 	.word	0x200005b1

08003cc0 <__sfp_lock_release>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__sfp_lock_release+0x8>)
 8003cc2:	f000 b8ae 	b.w	8003e22 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	200005b1 	.word	0x200005b1

08003ccc <__sinit_lock_acquire>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__sinit_lock_acquire+0x8>)
 8003cce:	f000 b8a7 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	200005b2 	.word	0x200005b2

08003cd8 <__sinit_lock_release>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__sinit_lock_release+0x8>)
 8003cda:	f000 b8a2 	b.w	8003e22 <__retarget_lock_release_recursive>
 8003cde:	bf00      	nop
 8003ce0:	200005b2 	.word	0x200005b2

08003ce4 <__sinit>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	f7ff fff0 	bl	8003ccc <__sinit_lock_acquire>
 8003cec:	69a3      	ldr	r3, [r4, #24]
 8003cee:	b11b      	cbz	r3, 8003cf8 <__sinit+0x14>
 8003cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf4:	f7ff bff0 	b.w	8003cd8 <__sinit_lock_release>
 8003cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <__sinit+0x68>)
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <__sinit+0x6c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	bf04      	itt	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	61a3      	streq	r3, [r4, #24]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f820 	bl	8003d54 <__sfp>
 8003d14:	6060      	str	r0, [r4, #4]
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 f81c 	bl	8003d54 <__sfp>
 8003d1c:	60a0      	str	r0, [r4, #8]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f818 	bl	8003d54 <__sfp>
 8003d24:	2200      	movs	r2, #0
 8003d26:	60e0      	str	r0, [r4, #12]
 8003d28:	2104      	movs	r1, #4
 8003d2a:	6860      	ldr	r0, [r4, #4]
 8003d2c:	f7ff ff82 	bl	8003c34 <std>
 8003d30:	68a0      	ldr	r0, [r4, #8]
 8003d32:	2201      	movs	r2, #1
 8003d34:	2109      	movs	r1, #9
 8003d36:	f7ff ff7d 	bl	8003c34 <std>
 8003d3a:	68e0      	ldr	r0, [r4, #12]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2112      	movs	r1, #18
 8003d40:	f7ff ff78 	bl	8003c34 <std>
 8003d44:	2301      	movs	r3, #1
 8003d46:	61a3      	str	r3, [r4, #24]
 8003d48:	e7d2      	b.n	8003cf0 <__sinit+0xc>
 8003d4a:	bf00      	nop
 8003d4c:	080052f4 	.word	0x080052f4
 8003d50:	08003c7d 	.word	0x08003c7d

08003d54 <__sfp>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	4607      	mov	r7, r0
 8003d58:	f7ff ffac 	bl	8003cb4 <__sfp_lock_acquire>
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <__sfp+0x84>)
 8003d5e:	681e      	ldr	r6, [r3, #0]
 8003d60:	69b3      	ldr	r3, [r6, #24]
 8003d62:	b913      	cbnz	r3, 8003d6a <__sfp+0x16>
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7ff ffbd 	bl	8003ce4 <__sinit>
 8003d6a:	3648      	adds	r6, #72	; 0x48
 8003d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	d503      	bpl.n	8003d7c <__sfp+0x28>
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	b30b      	cbz	r3, 8003dbc <__sfp+0x68>
 8003d78:	6836      	ldr	r6, [r6, #0]
 8003d7a:	e7f7      	b.n	8003d6c <__sfp+0x18>
 8003d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d80:	b9d5      	cbnz	r5, 8003db8 <__sfp+0x64>
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <__sfp+0x88>)
 8003d84:	60e3      	str	r3, [r4, #12]
 8003d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8003d8c:	f000 f847 	bl	8003e1e <__retarget_lock_init_recursive>
 8003d90:	f7ff ff96 	bl	8003cc0 <__sfp_lock_release>
 8003d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d9c:	6025      	str	r5, [r4, #0]
 8003d9e:	61a5      	str	r5, [r4, #24]
 8003da0:	2208      	movs	r2, #8
 8003da2:	4629      	mov	r1, r5
 8003da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003da8:	f7ff fd24 	bl	80037f4 <memset>
 8003dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003db4:	4620      	mov	r0, r4
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db8:	3468      	adds	r4, #104	; 0x68
 8003dba:	e7d9      	b.n	8003d70 <__sfp+0x1c>
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f7ff ff62 	bl	8003c88 <__sfmoreglue>
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	6030      	str	r0, [r6, #0]
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1d5      	bne.n	8003d78 <__sfp+0x24>
 8003dcc:	f7ff ff78 	bl	8003cc0 <__sfp_lock_release>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	e7ee      	b.n	8003db4 <__sfp+0x60>
 8003dd6:	bf00      	nop
 8003dd8:	080052f4 	.word	0x080052f4
 8003ddc:	ffff0001 	.word	0xffff0001

08003de0 <_fwalk_reent>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4606      	mov	r6, r0
 8003de6:	4688      	mov	r8, r1
 8003de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dec:	2700      	movs	r7, #0
 8003dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df2:	f1b9 0901 	subs.w	r9, r9, #1
 8003df6:	d505      	bpl.n	8003e04 <_fwalk_reent+0x24>
 8003df8:	6824      	ldr	r4, [r4, #0]
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d1f7      	bne.n	8003dee <_fwalk_reent+0xe>
 8003dfe:	4638      	mov	r0, r7
 8003e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e04:	89ab      	ldrh	r3, [r5, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d907      	bls.n	8003e1a <_fwalk_reent+0x3a>
 8003e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	d003      	beq.n	8003e1a <_fwalk_reent+0x3a>
 8003e12:	4629      	mov	r1, r5
 8003e14:	4630      	mov	r0, r6
 8003e16:	47c0      	blx	r8
 8003e18:	4307      	orrs	r7, r0
 8003e1a:	3568      	adds	r5, #104	; 0x68
 8003e1c:	e7e9      	b.n	8003df2 <_fwalk_reent+0x12>

08003e1e <__retarget_lock_init_recursive>:
 8003e1e:	4770      	bx	lr

08003e20 <__retarget_lock_acquire_recursive>:
 8003e20:	4770      	bx	lr

08003e22 <__retarget_lock_release_recursive>:
 8003e22:	4770      	bx	lr

08003e24 <__swhatbuf_r>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	460e      	mov	r6, r1
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	b096      	sub	sp, #88	; 0x58
 8003e30:	4614      	mov	r4, r2
 8003e32:	461d      	mov	r5, r3
 8003e34:	da08      	bge.n	8003e48 <__swhatbuf_r+0x24>
 8003e36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	602a      	str	r2, [r5, #0]
 8003e3e:	061a      	lsls	r2, r3, #24
 8003e40:	d410      	bmi.n	8003e64 <__swhatbuf_r+0x40>
 8003e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e46:	e00e      	b.n	8003e66 <__swhatbuf_r+0x42>
 8003e48:	466a      	mov	r2, sp
 8003e4a:	f000 fc97 	bl	800477c <_fstat_r>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	dbf1      	blt.n	8003e36 <__swhatbuf_r+0x12>
 8003e52:	9a01      	ldr	r2, [sp, #4]
 8003e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e5c:	425a      	negs	r2, r3
 8003e5e:	415a      	adcs	r2, r3
 8003e60:	602a      	str	r2, [r5, #0]
 8003e62:	e7ee      	b.n	8003e42 <__swhatbuf_r+0x1e>
 8003e64:	2340      	movs	r3, #64	; 0x40
 8003e66:	2000      	movs	r0, #0
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	b016      	add	sp, #88	; 0x58
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e70 <__smakebuf_r>:
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e74:	079d      	lsls	r5, r3, #30
 8003e76:	4606      	mov	r6, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	d507      	bpl.n	8003e8c <__smakebuf_r+0x1c>
 8003e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	2301      	movs	r3, #1
 8003e86:	6163      	str	r3, [r4, #20]
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	ab01      	add	r3, sp, #4
 8003e8e:	466a      	mov	r2, sp
 8003e90:	f7ff ffc8 	bl	8003e24 <__swhatbuf_r>
 8003e94:	9900      	ldr	r1, [sp, #0]
 8003e96:	4605      	mov	r5, r0
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f895 	bl	8003fc8 <_malloc_r>
 8003e9e:	b948      	cbnz	r0, 8003eb4 <__smakebuf_r+0x44>
 8003ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea4:	059a      	lsls	r2, r3, #22
 8003ea6:	d4ef      	bmi.n	8003e88 <__smakebuf_r+0x18>
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	e7e3      	b.n	8003e7c <__smakebuf_r+0xc>
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <__smakebuf_r+0x7c>)
 8003eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	6020      	str	r0, [r4, #0]
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	9b00      	ldr	r3, [sp, #0]
 8003ec4:	6163      	str	r3, [r4, #20]
 8003ec6:	9b01      	ldr	r3, [sp, #4]
 8003ec8:	6120      	str	r0, [r4, #16]
 8003eca:	b15b      	cbz	r3, 8003ee4 <__smakebuf_r+0x74>
 8003ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 fc65 	bl	80047a0 <_isatty_r>
 8003ed6:	b128      	cbz	r0, 8003ee4 <__smakebuf_r+0x74>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	89a0      	ldrh	r0, [r4, #12]
 8003ee6:	4305      	orrs	r5, r0
 8003ee8:	81a5      	strh	r5, [r4, #12]
 8003eea:	e7cd      	b.n	8003e88 <__smakebuf_r+0x18>
 8003eec:	08003c7d 	.word	0x08003c7d

08003ef0 <_free_r>:
 8003ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	d044      	beq.n	8003f80 <_free_r+0x90>
 8003ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003efa:	9001      	str	r0, [sp, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f1a1 0404 	sub.w	r4, r1, #4
 8003f02:	bfb8      	it	lt
 8003f04:	18e4      	addlt	r4, r4, r3
 8003f06:	f000 fc95 	bl	8004834 <__malloc_lock>
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <_free_r+0x94>)
 8003f0c:	9801      	ldr	r0, [sp, #4]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	b933      	cbnz	r3, 8003f20 <_free_r+0x30>
 8003f12:	6063      	str	r3, [r4, #4]
 8003f14:	6014      	str	r4, [r2, #0]
 8003f16:	b003      	add	sp, #12
 8003f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f1c:	f000 bc90 	b.w	8004840 <__malloc_unlock>
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d908      	bls.n	8003f36 <_free_r+0x46>
 8003f24:	6825      	ldr	r5, [r4, #0]
 8003f26:	1961      	adds	r1, r4, r5
 8003f28:	428b      	cmp	r3, r1
 8003f2a:	bf01      	itttt	eq
 8003f2c:	6819      	ldreq	r1, [r3, #0]
 8003f2e:	685b      	ldreq	r3, [r3, #4]
 8003f30:	1949      	addeq	r1, r1, r5
 8003f32:	6021      	streq	r1, [r4, #0]
 8003f34:	e7ed      	b.n	8003f12 <_free_r+0x22>
 8003f36:	461a      	mov	r2, r3
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	b10b      	cbz	r3, 8003f40 <_free_r+0x50>
 8003f3c:	42a3      	cmp	r3, r4
 8003f3e:	d9fa      	bls.n	8003f36 <_free_r+0x46>
 8003f40:	6811      	ldr	r1, [r2, #0]
 8003f42:	1855      	adds	r5, r2, r1
 8003f44:	42a5      	cmp	r5, r4
 8003f46:	d10b      	bne.n	8003f60 <_free_r+0x70>
 8003f48:	6824      	ldr	r4, [r4, #0]
 8003f4a:	4421      	add	r1, r4
 8003f4c:	1854      	adds	r4, r2, r1
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	d1e0      	bne.n	8003f16 <_free_r+0x26>
 8003f54:	681c      	ldr	r4, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	6053      	str	r3, [r2, #4]
 8003f5a:	4421      	add	r1, r4
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	e7da      	b.n	8003f16 <_free_r+0x26>
 8003f60:	d902      	bls.n	8003f68 <_free_r+0x78>
 8003f62:	230c      	movs	r3, #12
 8003f64:	6003      	str	r3, [r0, #0]
 8003f66:	e7d6      	b.n	8003f16 <_free_r+0x26>
 8003f68:	6825      	ldr	r5, [r4, #0]
 8003f6a:	1961      	adds	r1, r4, r5
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	bf04      	itt	eq
 8003f70:	6819      	ldreq	r1, [r3, #0]
 8003f72:	685b      	ldreq	r3, [r3, #4]
 8003f74:	6063      	str	r3, [r4, #4]
 8003f76:	bf04      	itt	eq
 8003f78:	1949      	addeq	r1, r1, r5
 8003f7a:	6021      	streq	r1, [r4, #0]
 8003f7c:	6054      	str	r4, [r2, #4]
 8003f7e:	e7ca      	b.n	8003f16 <_free_r+0x26>
 8003f80:	b003      	add	sp, #12
 8003f82:	bd30      	pop	{r4, r5, pc}
 8003f84:	200005b4 	.word	0x200005b4

08003f88 <sbrk_aligned>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4e0e      	ldr	r6, [pc, #56]	; (8003fc4 <sbrk_aligned+0x3c>)
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	6831      	ldr	r1, [r6, #0]
 8003f90:	4605      	mov	r5, r0
 8003f92:	b911      	cbnz	r1, 8003f9a <sbrk_aligned+0x12>
 8003f94:	f000 fb7c 	bl	8004690 <_sbrk_r>
 8003f98:	6030      	str	r0, [r6, #0]
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 fb77 	bl	8004690 <_sbrk_r>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	d00a      	beq.n	8003fbc <sbrk_aligned+0x34>
 8003fa6:	1cc4      	adds	r4, r0, #3
 8003fa8:	f024 0403 	bic.w	r4, r4, #3
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d007      	beq.n	8003fc0 <sbrk_aligned+0x38>
 8003fb0:	1a21      	subs	r1, r4, r0
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 fb6c 	bl	8004690 <_sbrk_r>
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d101      	bne.n	8003fc0 <sbrk_aligned+0x38>
 8003fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	200005b8 	.word	0x200005b8

08003fc8 <_malloc_r>:
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	1ccd      	adds	r5, r1, #3
 8003fce:	f025 0503 	bic.w	r5, r5, #3
 8003fd2:	3508      	adds	r5, #8
 8003fd4:	2d0c      	cmp	r5, #12
 8003fd6:	bf38      	it	cc
 8003fd8:	250c      	movcc	r5, #12
 8003fda:	2d00      	cmp	r5, #0
 8003fdc:	4607      	mov	r7, r0
 8003fde:	db01      	blt.n	8003fe4 <_malloc_r+0x1c>
 8003fe0:	42a9      	cmp	r1, r5
 8003fe2:	d905      	bls.n	8003ff0 <_malloc_r+0x28>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	2600      	movs	r6, #0
 8003fea:	4630      	mov	r0, r6
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	4e2e      	ldr	r6, [pc, #184]	; (80040ac <_malloc_r+0xe4>)
 8003ff2:	f000 fc1f 	bl	8004834 <__malloc_lock>
 8003ff6:	6833      	ldr	r3, [r6, #0]
 8003ff8:	461c      	mov	r4, r3
 8003ffa:	bb34      	cbnz	r4, 800404a <_malloc_r+0x82>
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4638      	mov	r0, r7
 8004000:	f7ff ffc2 	bl	8003f88 <sbrk_aligned>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	4604      	mov	r4, r0
 8004008:	d14d      	bne.n	80040a6 <_malloc_r+0xde>
 800400a:	6834      	ldr	r4, [r6, #0]
 800400c:	4626      	mov	r6, r4
 800400e:	2e00      	cmp	r6, #0
 8004010:	d140      	bne.n	8004094 <_malloc_r+0xcc>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	4631      	mov	r1, r6
 8004016:	4638      	mov	r0, r7
 8004018:	eb04 0803 	add.w	r8, r4, r3
 800401c:	f000 fb38 	bl	8004690 <_sbrk_r>
 8004020:	4580      	cmp	r8, r0
 8004022:	d13a      	bne.n	800409a <_malloc_r+0xd2>
 8004024:	6821      	ldr	r1, [r4, #0]
 8004026:	3503      	adds	r5, #3
 8004028:	1a6d      	subs	r5, r5, r1
 800402a:	f025 0503 	bic.w	r5, r5, #3
 800402e:	3508      	adds	r5, #8
 8004030:	2d0c      	cmp	r5, #12
 8004032:	bf38      	it	cc
 8004034:	250c      	movcc	r5, #12
 8004036:	4629      	mov	r1, r5
 8004038:	4638      	mov	r0, r7
 800403a:	f7ff ffa5 	bl	8003f88 <sbrk_aligned>
 800403e:	3001      	adds	r0, #1
 8004040:	d02b      	beq.n	800409a <_malloc_r+0xd2>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	442b      	add	r3, r5
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	e00e      	b.n	8004068 <_malloc_r+0xa0>
 800404a:	6822      	ldr	r2, [r4, #0]
 800404c:	1b52      	subs	r2, r2, r5
 800404e:	d41e      	bmi.n	800408e <_malloc_r+0xc6>
 8004050:	2a0b      	cmp	r2, #11
 8004052:	d916      	bls.n	8004082 <_malloc_r+0xba>
 8004054:	1961      	adds	r1, r4, r5
 8004056:	42a3      	cmp	r3, r4
 8004058:	6025      	str	r5, [r4, #0]
 800405a:	bf18      	it	ne
 800405c:	6059      	strne	r1, [r3, #4]
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	bf08      	it	eq
 8004062:	6031      	streq	r1, [r6, #0]
 8004064:	5162      	str	r2, [r4, r5]
 8004066:	604b      	str	r3, [r1, #4]
 8004068:	4638      	mov	r0, r7
 800406a:	f104 060b 	add.w	r6, r4, #11
 800406e:	f000 fbe7 	bl	8004840 <__malloc_unlock>
 8004072:	f026 0607 	bic.w	r6, r6, #7
 8004076:	1d23      	adds	r3, r4, #4
 8004078:	1af2      	subs	r2, r6, r3
 800407a:	d0b6      	beq.n	8003fea <_malloc_r+0x22>
 800407c:	1b9b      	subs	r3, r3, r6
 800407e:	50a3      	str	r3, [r4, r2]
 8004080:	e7b3      	b.n	8003fea <_malloc_r+0x22>
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	42a3      	cmp	r3, r4
 8004086:	bf0c      	ite	eq
 8004088:	6032      	streq	r2, [r6, #0]
 800408a:	605a      	strne	r2, [r3, #4]
 800408c:	e7ec      	b.n	8004068 <_malloc_r+0xa0>
 800408e:	4623      	mov	r3, r4
 8004090:	6864      	ldr	r4, [r4, #4]
 8004092:	e7b2      	b.n	8003ffa <_malloc_r+0x32>
 8004094:	4634      	mov	r4, r6
 8004096:	6876      	ldr	r6, [r6, #4]
 8004098:	e7b9      	b.n	800400e <_malloc_r+0x46>
 800409a:	230c      	movs	r3, #12
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4638      	mov	r0, r7
 80040a0:	f000 fbce 	bl	8004840 <__malloc_unlock>
 80040a4:	e7a1      	b.n	8003fea <_malloc_r+0x22>
 80040a6:	6025      	str	r5, [r4, #0]
 80040a8:	e7de      	b.n	8004068 <_malloc_r+0xa0>
 80040aa:	bf00      	nop
 80040ac:	200005b4 	.word	0x200005b4

080040b0 <__ssputs_r>:
 80040b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	688e      	ldr	r6, [r1, #8]
 80040b6:	429e      	cmp	r6, r3
 80040b8:	4682      	mov	sl, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	4690      	mov	r8, r2
 80040be:	461f      	mov	r7, r3
 80040c0:	d838      	bhi.n	8004134 <__ssputs_r+0x84>
 80040c2:	898a      	ldrh	r2, [r1, #12]
 80040c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c8:	d032      	beq.n	8004130 <__ssputs_r+0x80>
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	6909      	ldr	r1, [r1, #16]
 80040ce:	eba5 0901 	sub.w	r9, r5, r1
 80040d2:	6965      	ldr	r5, [r4, #20]
 80040d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040dc:	3301      	adds	r3, #1
 80040de:	444b      	add	r3, r9
 80040e0:	106d      	asrs	r5, r5, #1
 80040e2:	429d      	cmp	r5, r3
 80040e4:	bf38      	it	cc
 80040e6:	461d      	movcc	r5, r3
 80040e8:	0553      	lsls	r3, r2, #21
 80040ea:	d531      	bpl.n	8004150 <__ssputs_r+0xa0>
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7ff ff6b 	bl	8003fc8 <_malloc_r>
 80040f2:	4606      	mov	r6, r0
 80040f4:	b950      	cbnz	r0, 800410c <__ssputs_r+0x5c>
 80040f6:	230c      	movs	r3, #12
 80040f8:	f8ca 3000 	str.w	r3, [sl]
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	6921      	ldr	r1, [r4, #16]
 800410e:	464a      	mov	r2, r9
 8004110:	f000 fb68 	bl	80047e4 <memcpy>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	6126      	str	r6, [r4, #16]
 8004122:	6165      	str	r5, [r4, #20]
 8004124:	444e      	add	r6, r9
 8004126:	eba5 0509 	sub.w	r5, r5, r9
 800412a:	6026      	str	r6, [r4, #0]
 800412c:	60a5      	str	r5, [r4, #8]
 800412e:	463e      	mov	r6, r7
 8004130:	42be      	cmp	r6, r7
 8004132:	d900      	bls.n	8004136 <__ssputs_r+0x86>
 8004134:	463e      	mov	r6, r7
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	4632      	mov	r2, r6
 800413a:	4641      	mov	r1, r8
 800413c:	f000 fb60 	bl	8004800 <memmove>
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	1b9b      	subs	r3, r3, r6
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	4433      	add	r3, r6
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	2000      	movs	r0, #0
 800414e:	e7db      	b.n	8004108 <__ssputs_r+0x58>
 8004150:	462a      	mov	r2, r5
 8004152:	f000 fb7b 	bl	800484c <_realloc_r>
 8004156:	4606      	mov	r6, r0
 8004158:	2800      	cmp	r0, #0
 800415a:	d1e1      	bne.n	8004120 <__ssputs_r+0x70>
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	4650      	mov	r0, sl
 8004160:	f7ff fec6 	bl	8003ef0 <_free_r>
 8004164:	e7c7      	b.n	80040f6 <__ssputs_r+0x46>
	...

08004168 <_svfiprintf_r>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	4698      	mov	r8, r3
 800416e:	898b      	ldrh	r3, [r1, #12]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	b09d      	sub	sp, #116	; 0x74
 8004174:	4607      	mov	r7, r0
 8004176:	460d      	mov	r5, r1
 8004178:	4614      	mov	r4, r2
 800417a:	d50e      	bpl.n	800419a <_svfiprintf_r+0x32>
 800417c:	690b      	ldr	r3, [r1, #16]
 800417e:	b963      	cbnz	r3, 800419a <_svfiprintf_r+0x32>
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	f7ff ff21 	bl	8003fc8 <_malloc_r>
 8004186:	6028      	str	r0, [r5, #0]
 8004188:	6128      	str	r0, [r5, #16]
 800418a:	b920      	cbnz	r0, 8004196 <_svfiprintf_r+0x2e>
 800418c:	230c      	movs	r3, #12
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e0d1      	b.n	800433a <_svfiprintf_r+0x1d2>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	616b      	str	r3, [r5, #20]
 800419a:	2300      	movs	r3, #0
 800419c:	9309      	str	r3, [sp, #36]	; 0x24
 800419e:	2320      	movs	r3, #32
 80041a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a8:	2330      	movs	r3, #48	; 0x30
 80041aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004354 <_svfiprintf_r+0x1ec>
 80041ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b2:	f04f 0901 	mov.w	r9, #1
 80041b6:	4623      	mov	r3, r4
 80041b8:	469a      	mov	sl, r3
 80041ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041be:	b10a      	cbz	r2, 80041c4 <_svfiprintf_r+0x5c>
 80041c0:	2a25      	cmp	r2, #37	; 0x25
 80041c2:	d1f9      	bne.n	80041b8 <_svfiprintf_r+0x50>
 80041c4:	ebba 0b04 	subs.w	fp, sl, r4
 80041c8:	d00b      	beq.n	80041e2 <_svfiprintf_r+0x7a>
 80041ca:	465b      	mov	r3, fp
 80041cc:	4622      	mov	r2, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	4638      	mov	r0, r7
 80041d2:	f7ff ff6d 	bl	80040b0 <__ssputs_r>
 80041d6:	3001      	adds	r0, #1
 80041d8:	f000 80aa 	beq.w	8004330 <_svfiprintf_r+0x1c8>
 80041dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041de:	445a      	add	r2, fp
 80041e0:	9209      	str	r2, [sp, #36]	; 0x24
 80041e2:	f89a 3000 	ldrb.w	r3, [sl]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a2 	beq.w	8004330 <_svfiprintf_r+0x1c8>
 80041ec:	2300      	movs	r3, #0
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f6:	f10a 0a01 	add.w	sl, sl, #1
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	9307      	str	r3, [sp, #28]
 80041fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004202:	931a      	str	r3, [sp, #104]	; 0x68
 8004204:	4654      	mov	r4, sl
 8004206:	2205      	movs	r2, #5
 8004208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420c:	4851      	ldr	r0, [pc, #324]	; (8004354 <_svfiprintf_r+0x1ec>)
 800420e:	f7fc f807 	bl	8000220 <memchr>
 8004212:	9a04      	ldr	r2, [sp, #16]
 8004214:	b9d8      	cbnz	r0, 800424e <_svfiprintf_r+0xe6>
 8004216:	06d0      	lsls	r0, r2, #27
 8004218:	bf44      	itt	mi
 800421a:	2320      	movmi	r3, #32
 800421c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004220:	0711      	lsls	r1, r2, #28
 8004222:	bf44      	itt	mi
 8004224:	232b      	movmi	r3, #43	; 0x2b
 8004226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422a:	f89a 3000 	ldrb.w	r3, [sl]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d015      	beq.n	800425e <_svfiprintf_r+0xf6>
 8004232:	9a07      	ldr	r2, [sp, #28]
 8004234:	4654      	mov	r4, sl
 8004236:	2000      	movs	r0, #0
 8004238:	f04f 0c0a 	mov.w	ip, #10
 800423c:	4621      	mov	r1, r4
 800423e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004242:	3b30      	subs	r3, #48	; 0x30
 8004244:	2b09      	cmp	r3, #9
 8004246:	d94e      	bls.n	80042e6 <_svfiprintf_r+0x17e>
 8004248:	b1b0      	cbz	r0, 8004278 <_svfiprintf_r+0x110>
 800424a:	9207      	str	r2, [sp, #28]
 800424c:	e014      	b.n	8004278 <_svfiprintf_r+0x110>
 800424e:	eba0 0308 	sub.w	r3, r0, r8
 8004252:	fa09 f303 	lsl.w	r3, r9, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	46a2      	mov	sl, r4
 800425c:	e7d2      	b.n	8004204 <_svfiprintf_r+0x9c>
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	1d19      	adds	r1, r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	9103      	str	r1, [sp, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	bfbb      	ittet	lt
 800426a:	425b      	neglt	r3, r3
 800426c:	f042 0202 	orrlt.w	r2, r2, #2
 8004270:	9307      	strge	r3, [sp, #28]
 8004272:	9307      	strlt	r3, [sp, #28]
 8004274:	bfb8      	it	lt
 8004276:	9204      	strlt	r2, [sp, #16]
 8004278:	7823      	ldrb	r3, [r4, #0]
 800427a:	2b2e      	cmp	r3, #46	; 0x2e
 800427c:	d10c      	bne.n	8004298 <_svfiprintf_r+0x130>
 800427e:	7863      	ldrb	r3, [r4, #1]
 8004280:	2b2a      	cmp	r3, #42	; 0x2a
 8004282:	d135      	bne.n	80042f0 <_svfiprintf_r+0x188>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295
 8004294:	3402      	adds	r4, #2
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004364 <_svfiprintf_r+0x1fc>
 800429c:	7821      	ldrb	r1, [r4, #0]
 800429e:	2203      	movs	r2, #3
 80042a0:	4650      	mov	r0, sl
 80042a2:	f7fb ffbd 	bl	8000220 <memchr>
 80042a6:	b140      	cbz	r0, 80042ba <_svfiprintf_r+0x152>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	eba0 000a 	sub.w	r0, r0, sl
 80042ae:	fa03 f000 	lsl.w	r0, r3, r0
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	4303      	orrs	r3, r0
 80042b6:	3401      	adds	r4, #1
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042be:	4826      	ldr	r0, [pc, #152]	; (8004358 <_svfiprintf_r+0x1f0>)
 80042c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c4:	2206      	movs	r2, #6
 80042c6:	f7fb ffab 	bl	8000220 <memchr>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d038      	beq.n	8004340 <_svfiprintf_r+0x1d8>
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <_svfiprintf_r+0x1f4>)
 80042d0:	bb1b      	cbnz	r3, 800431a <_svfiprintf_r+0x1b2>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	3307      	adds	r3, #7
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	3308      	adds	r3, #8
 80042dc:	9303      	str	r3, [sp, #12]
 80042de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e0:	4433      	add	r3, r6
 80042e2:	9309      	str	r3, [sp, #36]	; 0x24
 80042e4:	e767      	b.n	80041b6 <_svfiprintf_r+0x4e>
 80042e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ea:	460c      	mov	r4, r1
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7a5      	b.n	800423c <_svfiprintf_r+0xd4>
 80042f0:	2300      	movs	r3, #0
 80042f2:	3401      	adds	r4, #1
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0c0a 	mov.w	ip, #10
 80042fc:	4620      	mov	r0, r4
 80042fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004302:	3a30      	subs	r2, #48	; 0x30
 8004304:	2a09      	cmp	r2, #9
 8004306:	d903      	bls.n	8004310 <_svfiprintf_r+0x1a8>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0c5      	beq.n	8004298 <_svfiprintf_r+0x130>
 800430c:	9105      	str	r1, [sp, #20]
 800430e:	e7c3      	b.n	8004298 <_svfiprintf_r+0x130>
 8004310:	fb0c 2101 	mla	r1, ip, r1, r2
 8004314:	4604      	mov	r4, r0
 8004316:	2301      	movs	r3, #1
 8004318:	e7f0      	b.n	80042fc <_svfiprintf_r+0x194>
 800431a:	ab03      	add	r3, sp, #12
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	462a      	mov	r2, r5
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_svfiprintf_r+0x1f8>)
 8004322:	a904      	add	r1, sp, #16
 8004324:	4638      	mov	r0, r7
 8004326:	f3af 8000 	nop.w
 800432a:	1c42      	adds	r2, r0, #1
 800432c:	4606      	mov	r6, r0
 800432e:	d1d6      	bne.n	80042de <_svfiprintf_r+0x176>
 8004330:	89ab      	ldrh	r3, [r5, #12]
 8004332:	065b      	lsls	r3, r3, #25
 8004334:	f53f af2c 	bmi.w	8004190 <_svfiprintf_r+0x28>
 8004338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433a:	b01d      	add	sp, #116	; 0x74
 800433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004340:	ab03      	add	r3, sp, #12
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	462a      	mov	r2, r5
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <_svfiprintf_r+0x1f8>)
 8004348:	a904      	add	r1, sp, #16
 800434a:	4638      	mov	r0, r7
 800434c:	f000 f87a 	bl	8004444 <_printf_i>
 8004350:	e7eb      	b.n	800432a <_svfiprintf_r+0x1c2>
 8004352:	bf00      	nop
 8004354:	08005358 	.word	0x08005358
 8004358:	08005362 	.word	0x08005362
 800435c:	00000000 	.word	0x00000000
 8004360:	080040b1 	.word	0x080040b1
 8004364:	0800535e 	.word	0x0800535e

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4699      	mov	r9, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004378:	4293      	cmp	r3, r2
 800437a:	bfb8      	it	lt
 800437c:	4613      	movlt	r3, r2
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004384:	4607      	mov	r7, r0
 8004386:	460c      	mov	r4, r1
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc26      	bgt.n	80043fe <_printf_common+0x96>
 80043b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d42b      	bmi.n	8004418 <_printf_common+0xb0>
 80043c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c4:	4649      	mov	r1, r9
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d01e      	beq.n	800440c <_printf_common+0xa4>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	68e5      	ldr	r5, [r4, #12]
 80043d2:	6832      	ldr	r2, [r6, #0]
 80043d4:	f003 0306 	and.w	r3, r3, #6
 80043d8:	2b04      	cmp	r3, #4
 80043da:	bf08      	it	eq
 80043dc:	1aad      	subeq	r5, r5, r2
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	bf0c      	ite	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	2500      	movne	r5, #0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bfc4      	itt	gt
 80043ee:	1a9b      	subgt	r3, r3, r2
 80043f0:	18ed      	addgt	r5, r5, r3
 80043f2:	2600      	movs	r6, #0
 80043f4:	341a      	adds	r4, #26
 80043f6:	42b5      	cmp	r5, r6
 80043f8:	d11a      	bne.n	8004430 <_printf_common+0xc8>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e008      	b.n	8004410 <_printf_common+0xa8>
 80043fe:	2301      	movs	r3, #1
 8004400:	4652      	mov	r2, sl
 8004402:	4649      	mov	r1, r9
 8004404:	4638      	mov	r0, r7
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d103      	bne.n	8004414 <_printf_common+0xac>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	3501      	adds	r5, #1
 8004416:	e7c6      	b.n	80043a6 <_printf_common+0x3e>
 8004418:	18e1      	adds	r1, r4, r3
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	2030      	movs	r0, #48	; 0x30
 800441e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004422:	4422      	add	r2, r4
 8004424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442c:	3302      	adds	r3, #2
 800442e:	e7c7      	b.n	80043c0 <_printf_common+0x58>
 8004430:	2301      	movs	r3, #1
 8004432:	4622      	mov	r2, r4
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d0e6      	beq.n	800440c <_printf_common+0xa4>
 800443e:	3601      	adds	r6, #1
 8004440:	e7d9      	b.n	80043f6 <_printf_common+0x8e>
	...

08004444 <_printf_i>:
 8004444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	7e0f      	ldrb	r7, [r1, #24]
 800444a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800444c:	2f78      	cmp	r7, #120	; 0x78
 800444e:	4691      	mov	r9, r2
 8004450:	4680      	mov	r8, r0
 8004452:	460c      	mov	r4, r1
 8004454:	469a      	mov	sl, r3
 8004456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800445a:	d807      	bhi.n	800446c <_printf_i+0x28>
 800445c:	2f62      	cmp	r7, #98	; 0x62
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x32>
 8004460:	2f00      	cmp	r7, #0
 8004462:	f000 80d8 	beq.w	8004616 <_printf_i+0x1d2>
 8004466:	2f58      	cmp	r7, #88	; 0x58
 8004468:	f000 80a3 	beq.w	80045b2 <_printf_i+0x16e>
 800446c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004474:	e03a      	b.n	80044ec <_printf_i+0xa8>
 8004476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800447a:	2b15      	cmp	r3, #21
 800447c:	d8f6      	bhi.n	800446c <_printf_i+0x28>
 800447e:	a101      	add	r1, pc, #4	; (adr r1, 8004484 <_printf_i+0x40>)
 8004480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044f1 	.word	0x080044f1
 800448c:	0800446d 	.word	0x0800446d
 8004490:	0800446d 	.word	0x0800446d
 8004494:	0800446d 	.word	0x0800446d
 8004498:	0800446d 	.word	0x0800446d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800446d 	.word	0x0800446d
 80044a4:	0800446d 	.word	0x0800446d
 80044a8:	0800446d 	.word	0x0800446d
 80044ac:	0800446d 	.word	0x0800446d
 80044b0:	080045fd 	.word	0x080045fd
 80044b4:	08004521 	.word	0x08004521
 80044b8:	080045df 	.word	0x080045df
 80044bc:	0800446d 	.word	0x0800446d
 80044c0:	0800446d 	.word	0x0800446d
 80044c4:	0800461f 	.word	0x0800461f
 80044c8:	0800446d 	.word	0x0800446d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800446d 	.word	0x0800446d
 80044d4:	0800446d 	.word	0x0800446d
 80044d8:	080045e7 	.word	0x080045e7
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	602a      	str	r2, [r5, #0]
 80044e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0a3      	b.n	8004638 <_printf_i+0x1f4>
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	6829      	ldr	r1, [r5, #0]
 80044f4:	0606      	lsls	r6, r0, #24
 80044f6:	f101 0304 	add.w	r3, r1, #4
 80044fa:	d50a      	bpl.n	8004512 <_printf_i+0xce>
 80044fc:	680e      	ldr	r6, [r1, #0]
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	2e00      	cmp	r6, #0
 8004502:	da03      	bge.n	800450c <_printf_i+0xc8>
 8004504:	232d      	movs	r3, #45	; 0x2d
 8004506:	4276      	negs	r6, r6
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	485e      	ldr	r0, [pc, #376]	; (8004688 <_printf_i+0x244>)
 800450e:	230a      	movs	r3, #10
 8004510:	e019      	b.n	8004546 <_printf_i+0x102>
 8004512:	680e      	ldr	r6, [r1, #0]
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800451a:	bf18      	it	ne
 800451c:	b236      	sxthne	r6, r6
 800451e:	e7ef      	b.n	8004500 <_printf_i+0xbc>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	6029      	str	r1, [r5, #0]
 8004528:	0601      	lsls	r1, r0, #24
 800452a:	d501      	bpl.n	8004530 <_printf_i+0xec>
 800452c:	681e      	ldr	r6, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0xf2>
 8004530:	0646      	lsls	r6, r0, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0xe8>
 8004534:	881e      	ldrh	r6, [r3, #0]
 8004536:	4854      	ldr	r0, [pc, #336]	; (8004688 <_printf_i+0x244>)
 8004538:	2f6f      	cmp	r7, #111	; 0x6f
 800453a:	bf0c      	ite	eq
 800453c:	2308      	moveq	r3, #8
 800453e:	230a      	movne	r3, #10
 8004540:	2100      	movs	r1, #0
 8004542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004546:	6865      	ldr	r5, [r4, #4]
 8004548:	60a5      	str	r5, [r4, #8]
 800454a:	2d00      	cmp	r5, #0
 800454c:	bfa2      	ittt	ge
 800454e:	6821      	ldrge	r1, [r4, #0]
 8004550:	f021 0104 	bicge.w	r1, r1, #4
 8004554:	6021      	strge	r1, [r4, #0]
 8004556:	b90e      	cbnz	r6, 800455c <_printf_i+0x118>
 8004558:	2d00      	cmp	r5, #0
 800455a:	d04d      	beq.n	80045f8 <_printf_i+0x1b4>
 800455c:	4615      	mov	r5, r2
 800455e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004562:	fb03 6711 	mls	r7, r3, r1, r6
 8004566:	5dc7      	ldrb	r7, [r0, r7]
 8004568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800456c:	4637      	mov	r7, r6
 800456e:	42bb      	cmp	r3, r7
 8004570:	460e      	mov	r6, r1
 8004572:	d9f4      	bls.n	800455e <_printf_i+0x11a>
 8004574:	2b08      	cmp	r3, #8
 8004576:	d10b      	bne.n	8004590 <_printf_i+0x14c>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	07de      	lsls	r6, r3, #31
 800457c:	d508      	bpl.n	8004590 <_printf_i+0x14c>
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	6861      	ldr	r1, [r4, #4]
 8004582:	4299      	cmp	r1, r3
 8004584:	bfde      	ittt	le
 8004586:	2330      	movle	r3, #48	; 0x30
 8004588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800458c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004590:	1b52      	subs	r2, r2, r5
 8004592:	6122      	str	r2, [r4, #16]
 8004594:	f8cd a000 	str.w	sl, [sp]
 8004598:	464b      	mov	r3, r9
 800459a:	aa03      	add	r2, sp, #12
 800459c:	4621      	mov	r1, r4
 800459e:	4640      	mov	r0, r8
 80045a0:	f7ff fee2 	bl	8004368 <_printf_common>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d14c      	bne.n	8004642 <_printf_i+0x1fe>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	b004      	add	sp, #16
 80045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b2:	4835      	ldr	r0, [pc, #212]	; (8004688 <_printf_i+0x244>)
 80045b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045b8:	6829      	ldr	r1, [r5, #0]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80045c0:	6029      	str	r1, [r5, #0]
 80045c2:	061d      	lsls	r5, r3, #24
 80045c4:	d514      	bpl.n	80045f0 <_printf_i+0x1ac>
 80045c6:	07df      	lsls	r7, r3, #31
 80045c8:	bf44      	itt	mi
 80045ca:	f043 0320 	orrmi.w	r3, r3, #32
 80045ce:	6023      	strmi	r3, [r4, #0]
 80045d0:	b91e      	cbnz	r6, 80045da <_printf_i+0x196>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f023 0320 	bic.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	2310      	movs	r3, #16
 80045dc:	e7b0      	b.n	8004540 <_printf_i+0xfc>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	2378      	movs	r3, #120	; 0x78
 80045e8:	4828      	ldr	r0, [pc, #160]	; (800468c <_printf_i+0x248>)
 80045ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ee:	e7e3      	b.n	80045b8 <_printf_i+0x174>
 80045f0:	0659      	lsls	r1, r3, #25
 80045f2:	bf48      	it	mi
 80045f4:	b2b6      	uxthmi	r6, r6
 80045f6:	e7e6      	b.n	80045c6 <_printf_i+0x182>
 80045f8:	4615      	mov	r5, r2
 80045fa:	e7bb      	b.n	8004574 <_printf_i+0x130>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	6826      	ldr	r6, [r4, #0]
 8004600:	6961      	ldr	r1, [r4, #20]
 8004602:	1d18      	adds	r0, r3, #4
 8004604:	6028      	str	r0, [r5, #0]
 8004606:	0635      	lsls	r5, r6, #24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	d501      	bpl.n	8004610 <_printf_i+0x1cc>
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	e002      	b.n	8004616 <_printf_i+0x1d2>
 8004610:	0670      	lsls	r0, r6, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0x1c8>
 8004614:	8019      	strh	r1, [r3, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	4615      	mov	r5, r2
 800461c:	e7ba      	b.n	8004594 <_printf_i+0x150>
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	681d      	ldr	r5, [r3, #0]
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	2100      	movs	r1, #0
 800462a:	4628      	mov	r0, r5
 800462c:	f7fb fdf8 	bl	8000220 <memchr>
 8004630:	b108      	cbz	r0, 8004636 <_printf_i+0x1f2>
 8004632:	1b40      	subs	r0, r0, r5
 8004634:	6060      	str	r0, [r4, #4]
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	2300      	movs	r3, #0
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004640:	e7a8      	b.n	8004594 <_printf_i+0x150>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	462a      	mov	r2, r5
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d0ab      	beq.n	80045a8 <_printf_i+0x164>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	079b      	lsls	r3, r3, #30
 8004654:	d413      	bmi.n	800467e <_printf_i+0x23a>
 8004656:	68e0      	ldr	r0, [r4, #12]
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	4298      	cmp	r0, r3
 800465c:	bfb8      	it	lt
 800465e:	4618      	movlt	r0, r3
 8004660:	e7a4      	b.n	80045ac <_printf_i+0x168>
 8004662:	2301      	movs	r3, #1
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d09b      	beq.n	80045a8 <_printf_i+0x164>
 8004670:	3501      	adds	r5, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	9903      	ldr	r1, [sp, #12]
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	42ab      	cmp	r3, r5
 800467a:	dcf2      	bgt.n	8004662 <_printf_i+0x21e>
 800467c:	e7eb      	b.n	8004656 <_printf_i+0x212>
 800467e:	2500      	movs	r5, #0
 8004680:	f104 0619 	add.w	r6, r4, #25
 8004684:	e7f5      	b.n	8004672 <_printf_i+0x22e>
 8004686:	bf00      	nop
 8004688:	08005369 	.word	0x08005369
 800468c:	0800537a 	.word	0x0800537a

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4d06      	ldr	r5, [pc, #24]	; (80046ac <_sbrk_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4604      	mov	r4, r0
 8004698:	4608      	mov	r0, r1
 800469a:	602b      	str	r3, [r5, #0]
 800469c:	f7fd f9a8 	bl	80019f0 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200005bc 	.word	0x200005bc

080046b0 <__sread>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	460c      	mov	r4, r1
 80046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b8:	f000 f8f8 	bl	80048ac <_read_r>
 80046bc:	2800      	cmp	r0, #0
 80046be:	bfab      	itete	ge
 80046c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046c2:	89a3      	ldrhlt	r3, [r4, #12]
 80046c4:	181b      	addge	r3, r3, r0
 80046c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ca:	bfac      	ite	ge
 80046cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ce:	81a3      	strhlt	r3, [r4, #12]
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <__swrite>:
 80046d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	461f      	mov	r7, r3
 80046d8:	898b      	ldrh	r3, [r1, #12]
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	4605      	mov	r5, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	4616      	mov	r6, r2
 80046e2:	d505      	bpl.n	80046f0 <__swrite+0x1e>
 80046e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e8:	2302      	movs	r3, #2
 80046ea:	2200      	movs	r2, #0
 80046ec:	f000 f868 	bl	80047c0 <_lseek_r>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	4632      	mov	r2, r6
 80046fe:	463b      	mov	r3, r7
 8004700:	4628      	mov	r0, r5
 8004702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004706:	f000 b817 	b.w	8004738 <_write_r>

0800470a <__sseek>:
 800470a:	b510      	push	{r4, lr}
 800470c:	460c      	mov	r4, r1
 800470e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004712:	f000 f855 	bl	80047c0 <_lseek_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	bf15      	itete	ne
 800471c:	6560      	strne	r0, [r4, #84]	; 0x54
 800471e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004726:	81a3      	strheq	r3, [r4, #12]
 8004728:	bf18      	it	ne
 800472a:	81a3      	strhne	r3, [r4, #12]
 800472c:	bd10      	pop	{r4, pc}

0800472e <__sclose>:
 800472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004732:	f000 b813 	b.w	800475c <_close_r>
	...

08004738 <_write_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	; (8004758 <_write_r+0x20>)
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	2200      	movs	r2, #0
 8004744:	602a      	str	r2, [r5, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fc fef8 	bl	800153c <_write>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_write_r+0x1e>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_write_r+0x1e>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	200005bc 	.word	0x200005bc

0800475c <_close_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d06      	ldr	r5, [pc, #24]	; (8004778 <_close_r+0x1c>)
 8004760:	2300      	movs	r3, #0
 8004762:	4604      	mov	r4, r0
 8004764:	4608      	mov	r0, r1
 8004766:	602b      	str	r3, [r5, #0]
 8004768:	f7fd f90d 	bl	8001986 <_close>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_close_r+0x1a>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_close_r+0x1a>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200005bc 	.word	0x200005bc

0800477c <_fstat_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	; (800479c <_fstat_r+0x20>)
 8004780:	2300      	movs	r3, #0
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	602b      	str	r3, [r5, #0]
 800478a:	f7fd f908 	bl	800199e <_fstat>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d102      	bne.n	8004798 <_fstat_r+0x1c>
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	b103      	cbz	r3, 8004798 <_fstat_r+0x1c>
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	bd38      	pop	{r3, r4, r5, pc}
 800479a:	bf00      	nop
 800479c:	200005bc 	.word	0x200005bc

080047a0 <_isatty_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d06      	ldr	r5, [pc, #24]	; (80047bc <_isatty_r+0x1c>)
 80047a4:	2300      	movs	r3, #0
 80047a6:	4604      	mov	r4, r0
 80047a8:	4608      	mov	r0, r1
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	f7fd f907 	bl	80019be <_isatty>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d102      	bne.n	80047ba <_isatty_r+0x1a>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	b103      	cbz	r3, 80047ba <_isatty_r+0x1a>
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	200005bc 	.word	0x200005bc

080047c0 <_lseek_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d07      	ldr	r5, [pc, #28]	; (80047e0 <_lseek_r+0x20>)
 80047c4:	4604      	mov	r4, r0
 80047c6:	4608      	mov	r0, r1
 80047c8:	4611      	mov	r1, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	602a      	str	r2, [r5, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f7fd f900 	bl	80019d4 <_lseek>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_lseek_r+0x1e>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_lseek_r+0x1e>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200005bc 	.word	0x200005bc

080047e4 <memcpy>:
 80047e4:	440a      	add	r2, r1
 80047e6:	4291      	cmp	r1, r2
 80047e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	4770      	bx	lr
 80047f0:	b510      	push	{r4, lr}
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fa:	4291      	cmp	r1, r2
 80047fc:	d1f9      	bne.n	80047f2 <memcpy+0xe>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <memmove>:
 8004800:	4288      	cmp	r0, r1
 8004802:	b510      	push	{r4, lr}
 8004804:	eb01 0402 	add.w	r4, r1, r2
 8004808:	d902      	bls.n	8004810 <memmove+0x10>
 800480a:	4284      	cmp	r4, r0
 800480c:	4623      	mov	r3, r4
 800480e:	d807      	bhi.n	8004820 <memmove+0x20>
 8004810:	1e43      	subs	r3, r0, #1
 8004812:	42a1      	cmp	r1, r4
 8004814:	d008      	beq.n	8004828 <memmove+0x28>
 8004816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800481e:	e7f8      	b.n	8004812 <memmove+0x12>
 8004820:	4402      	add	r2, r0
 8004822:	4601      	mov	r1, r0
 8004824:	428a      	cmp	r2, r1
 8004826:	d100      	bne.n	800482a <memmove+0x2a>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800482e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004832:	e7f7      	b.n	8004824 <memmove+0x24>

08004834 <__malloc_lock>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__malloc_lock+0x8>)
 8004836:	f7ff baf3 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 800483a:	bf00      	nop
 800483c:	200005b0 	.word	0x200005b0

08004840 <__malloc_unlock>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__malloc_unlock+0x8>)
 8004842:	f7ff baee 	b.w	8003e22 <__retarget_lock_release_recursive>
 8004846:	bf00      	nop
 8004848:	200005b0 	.word	0x200005b0

0800484c <_realloc_r>:
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	4680      	mov	r8, r0
 8004852:	4614      	mov	r4, r2
 8004854:	460e      	mov	r6, r1
 8004856:	b921      	cbnz	r1, 8004862 <_realloc_r+0x16>
 8004858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4611      	mov	r1, r2
 800485e:	f7ff bbb3 	b.w	8003fc8 <_malloc_r>
 8004862:	b92a      	cbnz	r2, 8004870 <_realloc_r+0x24>
 8004864:	f7ff fb44 	bl	8003ef0 <_free_r>
 8004868:	4625      	mov	r5, r4
 800486a:	4628      	mov	r0, r5
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	f000 f82e 	bl	80048d0 <_malloc_usable_size_r>
 8004874:	4284      	cmp	r4, r0
 8004876:	4607      	mov	r7, r0
 8004878:	d802      	bhi.n	8004880 <_realloc_r+0x34>
 800487a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800487e:	d812      	bhi.n	80048a6 <_realloc_r+0x5a>
 8004880:	4621      	mov	r1, r4
 8004882:	4640      	mov	r0, r8
 8004884:	f7ff fba0 	bl	8003fc8 <_malloc_r>
 8004888:	4605      	mov	r5, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d0ed      	beq.n	800486a <_realloc_r+0x1e>
 800488e:	42bc      	cmp	r4, r7
 8004890:	4622      	mov	r2, r4
 8004892:	4631      	mov	r1, r6
 8004894:	bf28      	it	cs
 8004896:	463a      	movcs	r2, r7
 8004898:	f7ff ffa4 	bl	80047e4 <memcpy>
 800489c:	4631      	mov	r1, r6
 800489e:	4640      	mov	r0, r8
 80048a0:	f7ff fb26 	bl	8003ef0 <_free_r>
 80048a4:	e7e1      	b.n	800486a <_realloc_r+0x1e>
 80048a6:	4635      	mov	r5, r6
 80048a8:	e7df      	b.n	800486a <_realloc_r+0x1e>
	...

080048ac <_read_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d07      	ldr	r5, [pc, #28]	; (80048cc <_read_r+0x20>)
 80048b0:	4604      	mov	r4, r0
 80048b2:	4608      	mov	r0, r1
 80048b4:	4611      	mov	r1, r2
 80048b6:	2200      	movs	r2, #0
 80048b8:	602a      	str	r2, [r5, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f7fd f846 	bl	800194c <_read>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_read_r+0x1e>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_read_r+0x1e>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	200005bc 	.word	0x200005bc

080048d0 <_malloc_usable_size_r>:
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f18      	subs	r0, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbc      	itt	lt
 80048da:	580b      	ldrlt	r3, [r1, r0]
 80048dc:	18c0      	addlt	r0, r0, r3
 80048de:	4770      	bx	lr

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
