
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800182c  0800182c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800182c  0800182c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800182c  0800182c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800182c  0800182c  0001182c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000044  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f33  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c8b  00000000  00000000  00022fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00023c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00023ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001517b  00000000  00000000  00024090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003df2  00000000  00000000  0003920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076260  00000000  00000000  0003cffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b325d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d80  00000000  00000000  000b32b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001784 	.word	0x08001784

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	08001784 	.word	0x08001784

08000218 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 800021c:	4b52      	ldr	r3, [pc, #328]	; (8000368 <sysClockConfig+0x150>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a51      	ldr	r2, [pc, #324]	; (8000368 <sysClockConfig+0x150>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 8000228:	4b50      	ldr	r3, [pc, #320]	; (800036c <sysClockConfig+0x154>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a4f      	ldr	r2, [pc, #316]	; (800036c <sysClockConfig+0x154>)
 800022e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000232:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 8000234:	bf00      	nop
 8000236:	4b4d      	ldr	r3, [pc, #308]	; (800036c <sysClockConfig+0x154>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <sysClockConfig+0x1e>

	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 8000242:	4b4a      	ldr	r3, [pc, #296]	; (800036c <sysClockConfig+0x154>)
 8000244:	4a49      	ldr	r2, [pc, #292]	; (800036c <sysClockConfig+0x154>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 800024a:	4b48      	ldr	r3, [pc, #288]	; (800036c <sysClockConfig+0x154>)
 800024c:	4a47      	ldr	r2, [pc, #284]	; (800036c <sysClockConfig+0x154>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 8000252:	4b46      	ldr	r3, [pc, #280]	; (800036c <sysClockConfig+0x154>)
 8000254:	4a45      	ldr	r2, [pc, #276]	; (800036c <sysClockConfig+0x154>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 800025a:	4b44      	ldr	r3, [pc, #272]	; (800036c <sysClockConfig+0x154>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a43      	ldr	r2, [pc, #268]	; (800036c <sysClockConfig+0x154>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 8000266:	4b41      	ldr	r3, [pc, #260]	; (800036c <sysClockConfig+0x154>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a40      	ldr	r2, [pc, #256]	; (800036c <sysClockConfig+0x154>)
 800026c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000270:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 8000272:	4b3e      	ldr	r3, [pc, #248]	; (800036c <sysClockConfig+0x154>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a3d      	ldr	r2, [pc, #244]	; (800036c <sysClockConfig+0x154>)
 8000278:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800027c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 800027e:	4b3b      	ldr	r3, [pc, #236]	; (800036c <sysClockConfig+0x154>)
 8000280:	4a3a      	ldr	r2, [pc, #232]	; (800036c <sysClockConfig+0x154>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 8000286:	4b39      	ldr	r3, [pc, #228]	; (800036c <sysClockConfig+0x154>)
 8000288:	4a38      	ldr	r2, [pc, #224]	; (800036c <sysClockConfig+0x154>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 800028e:	4b37      	ldr	r3, [pc, #220]	; (800036c <sysClockConfig+0x154>)
 8000290:	4a36      	ldr	r2, [pc, #216]	; (800036c <sysClockConfig+0x154>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 8000296:	4b35      	ldr	r3, [pc, #212]	; (800036c <sysClockConfig+0x154>)
 8000298:	4a34      	ldr	r2, [pc, #208]	; (800036c <sysClockConfig+0x154>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 800029e:	4b33      	ldr	r3, [pc, #204]	; (800036c <sysClockConfig+0x154>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a32      	ldr	r2, [pc, #200]	; (800036c <sysClockConfig+0x154>)
 80002a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 80002aa:	4b30      	ldr	r3, [pc, #192]	; (800036c <sysClockConfig+0x154>)
 80002ac:	4a2f      	ldr	r2, [pc, #188]	; (800036c <sysClockConfig+0x154>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 80002b2:	4b2e      	ldr	r3, [pc, #184]	; (800036c <sysClockConfig+0x154>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a2d      	ldr	r2, [pc, #180]	; (800036c <sysClockConfig+0x154>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <sysClockConfig+0x154>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a2a      	ldr	r2, [pc, #168]	; (800036c <sysClockConfig+0x154>)
 80002c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 80002ca:	bf00      	nop
 80002cc:	4b27      	ldr	r3, [pc, #156]	; (800036c <sysClockConfig+0x154>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f9      	beq.n	80002cc <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 80002d8:	4b24      	ldr	r3, [pc, #144]	; (800036c <sysClockConfig+0x154>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a23      	ldr	r2, [pc, #140]	; (800036c <sysClockConfig+0x154>)
 80002de:	f043 0303 	orr.w	r3, r3, #3
 80002e2:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 80002e4:	bf00      	nop
 80002e6:	4b21      	ldr	r3, [pc, #132]	; (800036c <sysClockConfig+0x154>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f003 030c 	and.w	r3, r3, #12
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <sysClockConfig+0x154>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a1d      	ldr	r2, [pc, #116]	; (800036c <sysClockConfig+0x154>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80002fe:	4b1b      	ldr	r3, [pc, #108]	; (800036c <sysClockConfig+0x154>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <sysClockConfig+0x154>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 800030a:	4b18      	ldr	r3, [pc, #96]	; (800036c <sysClockConfig+0x154>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a17      	ldr	r2, [pc, #92]	; (800036c <sysClockConfig+0x154>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <sysClockConfig+0x154>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a14      	ldr	r2, [pc, #80]	; (800036c <sysClockConfig+0x154>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM3, TIM4, TIM8, TIM15
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM3EN_Pos);
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <sysClockConfig+0x154>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	4a11      	ldr	r2, [pc, #68]	; (800036c <sysClockConfig+0x154>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <sysClockConfig+0x154>)
 8000330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <sysClockConfig+0x154>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM8EN_Pos);
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <sysClockConfig+0x154>)
 800033c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <sysClockConfig+0x154>)
 8000340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000344:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM15EN_Pos);
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <sysClockConfig+0x154>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <sysClockConfig+0x154>)
 800034c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000350:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <sysClockConfig+0x154>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000356:	4a05      	ldr	r2, [pc, #20]	; (800036c <sysClockConfig+0x154>)
 8000358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800035c:	6613      	str	r3, [r2, #96]	; 0x60


}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000
 800036c:	40021000 	.word	0x40021000

08000370 <rotaryEncoderRotation>:
 * State machine for detecting encoder rotation.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 *
 */
int32_t rotaryEncoderRotation()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	4829      	ldr	r0, [pc, #164]	; (8000420 <rotaryEncoderRotation+0xb0>)
 800037a:	f000 f933 	bl	80005e4 <readPin>
 800037e:	4603      	mov	r3, r0
 8000380:	b25a      	sxtb	r2, r3
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <rotaryEncoderRotation+0xb4>)
 8000384:	701a      	strb	r2, [r3, #0]
currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 8000386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800038a:	4825      	ldr	r0, [pc, #148]	; (8000420 <rotaryEncoderRotation+0xb0>)
 800038c:	f000 f92a 	bl	80005e4 <readPin>
 8000390:	4603      	mov	r3, r0
 8000392:	b25a      	sxtb	r2, r3
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <rotaryEncoderRotation+0xb8>)
 8000396:	701a      	strb	r2, [r3, #0]

  if (currentStateCLK != currentStateDT) { 			//encoder is moving
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <rotaryEncoderRotation+0xb4>)
 800039a:	f993 2000 	ldrsb.w	r2, [r3]
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <rotaryEncoderRotation+0xb8>)
 80003a0:	f993 3000 	ldrsb.w	r3, [r3]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d010      	beq.n	80003ca <rotaryEncoderRotation+0x5a>
    if (currentStateCLK != lastStateCLK) { 			//CLK changed first; CW
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <rotaryEncoderRotation+0xb4>)
 80003aa:	f993 3000 	ldrsb.w	r3, [r3]
 80003ae:	b21a      	sxth	r2, r3
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <rotaryEncoderRotation+0xbc>)
 80003b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d003      	beq.n	80003c2 <rotaryEncoderRotation+0x52>
    	rotationDirection = 1;
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <rotaryEncoderRotation+0xc0>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	e01b      	b.n	80003fa <rotaryEncoderRotation+0x8a>
    }
     else {											//else DT changed first; CCW
    	rotationDirection = -1;
 80003c2:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <rotaryEncoderRotation+0xc0>)
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	e017      	b.n	80003fa <rotaryEncoderRotation+0x8a>
    }
  }
    else { 							    		    //both pins are at same state, so encoder has stopped moving
       if (currentStateCLK != lastStateCLK) {
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <rotaryEncoderRotation+0xb4>)
 80003cc:	f993 3000 	ldrsb.w	r3, [r3]
 80003d0:	b21a      	sxth	r2, r3
 80003d2:	4b16      	ldr	r3, [pc, #88]	; (800042c <rotaryEncoderRotation+0xbc>)
 80003d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d008      	beq.n	80003ee <rotaryEncoderRotation+0x7e>
          counter += rotationDirection;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <rotaryEncoderRotation+0xc0>)
 80003de:	f993 3000 	ldrsb.w	r3, [r3]
 80003e2:	461a      	mov	r2, r3
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <rotaryEncoderRotation+0xc4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4413      	add	r3, r2
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <rotaryEncoderRotation+0xc4>)
 80003ec:	6013      	str	r3, [r2, #0]
       }
       lastStateCLK = currentStateCLK;			    //update last CLK state to be ready to detect next movement
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <rotaryEncoderRotation+0xb4>)
 80003f0:	f993 3000 	ldrsb.w	r3, [r3]
 80003f4:	b21a      	sxth	r2, r3
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <rotaryEncoderRotation+0xbc>)
 80003f8:	801a      	strh	r2, [r3, #0]
    }



  if (counter < 0) 								    //keep counter between 0 and 100
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <rotaryEncoderRotation+0xc4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	da03      	bge.n	800040a <rotaryEncoderRotation+0x9a>
    counter = 0;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <rotaryEncoderRotation+0xc4>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e006      	b.n	8000418 <rotaryEncoderRotation+0xa8>
  else if (counter > 100)
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <rotaryEncoderRotation+0xc4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b64      	cmp	r3, #100	; 0x64
 8000410:	dd02      	ble.n	8000418 <rotaryEncoderRotation+0xa8>
   counter = 100;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <rotaryEncoderRotation+0xc4>)
 8000414:	2264      	movs	r2, #100	; 0x64
 8000416:	601a      	str	r2, [r3, #0]

 return counter;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <rotaryEncoderRotation+0xc4>)
 800041a:	681b      	ldr	r3, [r3, #0]
}
 800041c:	4618      	mov	r0, r3
 800041e:	bd80      	pop	{r7, pc}
 8000420:	48000400 	.word	0x48000400
 8000424:	20000082 	.word	0x20000082
 8000428:	20000083 	.word	0x20000083
 800042c:	20000080 	.word	0x20000080
 8000430:	20000088 	.word	0x20000088
 8000434:	20000084 	.word	0x20000084

08000438 <gpioInit>:
 * Function to set the GPIO registers.
 * Parameters: none
 * Returns: none
 */

void gpioInit(){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x03FFFFFF);
 800043c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000446:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 800044a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFFFFFC3F);
 800044c:	4b63      	ldr	r3, [pc, #396]	; (80005dc <gpioInit+0x1a4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a62      	ldr	r2, [pc, #392]	; (80005dc <gpioInit+0x1a4>)
 8000452:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8000456:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 8000458:	4b61      	ldr	r3, [pc, #388]	; (80005e0 <gpioInit+0x1a8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <gpioInit+0x1a8>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]



	//set PB13, PB14, PB15 set as inputs (rotary encoder)
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 8000462:	4b5e      	ldr	r3, [pc, #376]	; (80005dc <gpioInit+0x1a4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a5d      	ldr	r2, [pc, #372]	; (80005dc <gpioInit+0x1a4>)
 8000468:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800046c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 800046e:	4b5b      	ldr	r3, [pc, #364]	; (80005dc <gpioInit+0x1a4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a5a      	ldr	r2, [pc, #360]	; (80005dc <gpioInit+0x1a4>)
 8000474:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000478:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 800047a:	4b58      	ldr	r3, [pc, #352]	; (80005dc <gpioInit+0x1a4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a57      	ldr	r2, [pc, #348]	; (80005dc <gpioInit+0x1a4>)
 8000480:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000484:	6013      	str	r3, [r2, #0]

	//set pull-up pull-down register for inputs
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8000486:	4b55      	ldr	r3, [pc, #340]	; (80005dc <gpioInit+0x1a4>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4a54      	ldr	r2, [pc, #336]	; (80005dc <gpioInit+0x1a4>)
 800048c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000490:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 8000492:	4b52      	ldr	r3, [pc, #328]	; (80005dc <gpioInit+0x1a4>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	4a51      	ldr	r2, [pc, #324]	; (80005dc <gpioInit+0x1a4>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 800049e:	4b4f      	ldr	r3, [pc, #316]	; (80005dc <gpioInit+0x1a4>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	4a4e      	ldr	r2, [pc, #312]	; (80005dc <gpioInit+0x1a4>)
 80004a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004a8:	60d3      	str	r3, [r2, #12]



	//set PA6, PA9, PC7 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);  //Display_DC
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);  //Motor Driver In2
 80004ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);  //Motor Driver In1
 80004ca:	4b45      	ldr	r3, [pc, #276]	; (80005e0 <gpioInit+0x1a8>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a44      	ldr	r2, [pc, #272]	; (80005e0 <gpioInit+0x1a8>)
 80004d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d4:	6013      	str	r3, [r2, #0]

	//set PA6, PA9, PC7 as push-pull output
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE6_Pos);
 80004d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004e4:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 80004e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f4:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 80004f6:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <gpioInit+0x1a8>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	4a39      	ldr	r2, [pc, #228]	; (80005e0 <gpioInit+0x1a8>)
 80004fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000500:	6053      	str	r3, [r2, #4]



	//set PA11, PA12 to alternate function mode (TIM4)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 8000502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800050c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000510:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000520:	6013      	str	r3, [r2, #0]

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 8000522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000528:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000530:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 8000532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000540:	6253      	str	r3, [r2, #36]	; 0x24

	//set PB6 to alternate function mode AF5 (TIM8)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <gpioInit+0x1a4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a25      	ldr	r2, [pc, #148]	; (80005dc <gpioInit+0x1a4>)
 8000548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800054c:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <gpioInit+0x1a4>)
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <gpioInit+0x1a4>)
 8000554:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000558:	6213      	str	r3, [r2, #32]

	//set PA4, PA5, PA7 to alternate function mode (SPI1)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE4_Pos);
 800055a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000568:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 800056a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000578:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 800057a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000588:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS
 800058a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000594:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000598:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 800059a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80005a8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 80005aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b4:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80005b8:	6213      	str	r3, [r2, #32]
	//set PA0? to ADC input



	//set PB1 as output for LED debugging
	GPIOB->MODER |= (0x01 << GPIO_MODER_MODE1_Pos);
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <gpioInit+0x1a4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <gpioInit+0x1a4>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0x01 << GPIO_MODER_MODE1_Pos);
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <gpioInit+0x1a4>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <gpioInit+0x1a4>)
 80005cc:	f023 0304 	bic.w	r3, r3, #4
 80005d0:	6053      	str	r3, [r2, #4]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000800 	.word	0x48000800

080005e4 <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 * Returns: PIN_LOW or PIN_HIGH for state of pin.
 */

int16_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & GPIO_PIN_x) != PIN_LOW) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	691a      	ldr	r2, [r3, #16]
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	4013      	ands	r3, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <readPin+0x1c>
		return PIN_HIGH;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e000      	b.n	8000602 <readPin+0x1e>
	}
	else {
		return PIN_LOW;
 8000600:	2300      	movs	r3, #0
	}
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <setPin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void setPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x, pinstate_t pinState){
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	807b      	strh	r3, [r7, #2]
 800061a:	4613      	mov	r3, r2
 800061c:	707b      	strb	r3, [r7, #1]
	if (pinState == PIN_LOW){
 800061e:	787b      	ldrb	r3, [r7, #1]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <setPin+0x22>
	GPIOx->BSRR = (GPIO_PIN_x << 16U);          //set pin LOW
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	041b      	lsls	r3, r3, #16
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	619a      	str	r2, [r3, #24]
	}
	else if (pinState == PIN_HIGH){
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
	}
}
 800062e:	e005      	b.n	800063c <setPin+0x2e>
	else if (pinState == PIN_HIGH){
 8000630:	787b      	ldrb	r3, [r7, #1]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d102      	bne.n	800063c <setPin+0x2e>
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
 8000636:	887a      	ldrh	r2, [r7, #2]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	619a      	str	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <togglePin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void togglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]

	if ((GPIOx->ODR & GPIO_PIN_x) != PIN_LOW) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	4013      	ands	r3, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	d005      	beq.n	800066c <togglePin+0x24>
		GPIOx->BSRR = (GPIO_PIN_x << 16U);    //set pin LOW
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	041b      	lsls	r3, r3, #16
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	619a      	str	r2, [r3, #24]
	}
	else {
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
	}
}
 800066a:	e002      	b.n	8000672 <togglePin+0x2a>
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
 800066c:	887a      	ldrh	r2, [r7, #2]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	619a      	str	r2, [r3, #24]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <__NVIC_EnableIRQ+0x38>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db0a      	blt.n	80006e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <__NVIC_SetPriority+0x4c>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e4:	e00a      	b.n	80006fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4908      	ldr	r1, [pc, #32]	; (800070c <__NVIC_SetPriority+0x50>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	3b04      	subs	r3, #4
 80006f4:	0112      	lsls	r2, r2, #4
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	440b      	add	r3, r1
 80006fa:	761a      	strb	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <interruptInit>:
/**
 * Function to initialize interrupts.
 * Parameters: none
 * Returns: none
 */
void interruptInit(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c

//GPIO interrupt for encoder switch
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);		//EXTI Line15 Interrupt, PB15 (Rotary Encoder SW)
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <interruptInit+0x58>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	4a13      	ldr	r2, [pc, #76]	; (8000768 <interruptInit+0x58>)
 800071a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071e:	6153      	str	r3, [r2, #20]
EXTI->IMR1 |= (0x01 << EXTI_IMR1_IM15_Pos);     				//set interrupt mask register
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <interruptInit+0x5c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <interruptInit+0x5c>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072a:	6013      	str	r3, [r2, #0]
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);					//trigger on falling edge
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <interruptInit+0x5c>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <interruptInit+0x5c>)
 8000732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000736:	60d3      	str	r3, [r2, #12]
NVIC_SetPriority(EXTI15_10_IRQn, 0);							//set priority and enable EXTI15_10_IRQHandler
 8000738:	2100      	movs	r1, #0
 800073a:	2028      	movs	r0, #40	; 0x28
 800073c:	f7ff ffbe 	bl	80006bc <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000740:	2028      	movs	r0, #40	; 0x28
 8000742:	f7ff ff9d 	bl	8000680 <__NVIC_EnableIRQ>

//enable timer interrupt for TIM3
NVIC_SetPriority(TIM3_IRQn, 0);
 8000746:	2100      	movs	r1, #0
 8000748:	201d      	movs	r0, #29
 800074a:	f7ff ffb7 	bl	80006bc <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM3_IRQn);
 800074e:	201d      	movs	r0, #29
 8000750:	f7ff ff96 	bl	8000680 <__NVIC_EnableIRQ>

//enable timer interrupt for TIM15
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 8000754:	2100      	movs	r1, #0
 8000756:	2018      	movs	r0, #24
 8000758:	f7ff ffb0 	bl	80006bc <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800075c:	2018      	movs	r0, #24
 800075e:	f7ff ff8f 	bl	8000680 <__NVIC_EnableIRQ>


}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010000 	.word	0x40010000
 800076c:	40010400 	.word	0x40010400

08000770 <EXTI15_10_IRQHandler>:
/**
 * IRQ Handler and ISR for EXTI lines 10-15 interrupts.
 * Parameters: none
 * Returns: none
 */
void EXTI15_10_IRQHandler(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	if ((EXTI->PR1 & (ENC_SW_PIN)) != 0) {				       //check if the encoder switch pin is the one triggering interrupt
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <EXTI15_10_IRQHandler+0x58>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d021      	beq.n	80007c4 <EXTI15_10_IRQHandler+0x54>
		EXTI->PR1 = (ENC_SW_PIN);						       //clear interrupt pending bit
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <EXTI15_10_IRQHandler+0x58>)
 8000782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000786:	615a      	str	r2, [r3, #20]
		if (TIM8->CCR1 == 0) {								   //check if motor is stopped
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <EXTI15_10_IRQHandler+0x5c>)
 800078a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078c:	2b00      	cmp	r3, #0
 800078e:	d115      	bne.n	80007bc <EXTI15_10_IRQHandler+0x4c>
		   switch (gMotorDirection) {							//switch motor direction based on current setting
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <EXTI15_10_IRQHandler+0x60>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <EXTI15_10_IRQHandler+0x30>
 800079a:	2b01      	cmp	r3, #1
 800079c:	d007      	beq.n	80007ae <EXTI15_10_IRQHandler+0x3e>
 800079e:	e00e      	b.n	80007be <EXTI15_10_IRQHandler+0x4e>
			   case MOTOR_FORWARD:
			      setMotorDirection(MOTOR_REVERSE);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 f8c5 	bl	8000930 <setMotorDirection>
			      gMotorDirection = MOTOR_REVERSE;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <EXTI15_10_IRQHandler+0x60>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	801a      	strh	r2, [r3, #0]
			      break;
 80007ac:	e007      	b.n	80007be <EXTI15_10_IRQHandler+0x4e>
			   case MOTOR_REVERSE:
				   setMotorDirection(MOTOR_FORWARD);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f8be 	bl	8000930 <setMotorDirection>
				   gMotorDirection = MOTOR_FORWARD;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <EXTI15_10_IRQHandler+0x60>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
				   break;
 80007ba:	e000      	b.n	80007be <EXTI15_10_IRQHandler+0x4e>
		   }
		   //else {
			   //blink screen
		   //}
		}
 80007bc:	bf00      	nop
		printf("switch interrupt\n");
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <EXTI15_10_IRQHandler+0x64>)
 80007c0:	f000 fb50 	bl	8000e64 <puts>

		//These don't work? Interrupt keeps firing.
		//NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		//NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010400 	.word	0x40010400
 80007cc:	40013400 	.word	0x40013400
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	0800179c 	.word	0x0800179c

080007d8 <TIM3_IRQHandler>:
/**
 * IRQ Handler and ISR for TIM3 interrupts.
 * Parameters: none
 * Returns: none
 */
void TIM3_IRQHandler(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (TIM_SR_UIF)) != 0) {				//check if the interrupt is caused by update event
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <TIM3_IRQHandler+0x48>)
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d019      	beq.n	800081c <TIM3_IRQHandler+0x44>
	   TIM3->SR = ~(TIM_SR_UIF);					    //clear interrupt pending bit
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <TIM3_IRQHandler+0x48>)
 80007ea:	f06f 0201 	mvn.w	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
	   gRotaryEncoderCount = rotaryEncoderRotation();				//check encoder movement, update count
 80007f0:	f7ff fdbe 	bl	8000370 <rotaryEncoderRotation>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <TIM3_IRQHandler+0x4c>)
 80007fa:	801a      	strh	r2, [r3, #0]
	   setMotorDuty(gRotaryEncoderCount);					//set motor duty cycle based on encoder count
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <TIM3_IRQHandler+0x4c>)
 80007fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f8c0 	bl	8000988 <setMotorDuty>
	   gMotorSpeed = measureMotorSpeed();				 //measure the motor speed
 8000808:	f000 f8d8 	bl	80009bc <measureMotorSpeed>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <TIM3_IRQHandler+0x50>)
 8000812:	801a      	strh	r2, [r3, #0]
	//measure motor temperature (consider longer time)
	//update display based on motor speed and temp
	   togglePin(DBG_LED_PORT, DBG_LED_PIN);
 8000814:	2102      	movs	r1, #2
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <TIM3_IRQHandler+0x54>)
 8000818:	f7ff ff16 	bl	8000648 <togglePin>
	}
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40000400 	.word	0x40000400
 8000824:	2000008a 	.word	0x2000008a
 8000828:	2000008e 	.word	0x2000008e
 800082c:	48000400 	.word	0x48000400

08000830 <TIM1_BRK_TIM15_IRQHandler>:
/**
 * IRQ Handler and ISR for TIM1 Break, Transition error, Index error and TIM15 global interrupt
 * Parameters: none
 * Returns: none
 */
void TIM1_BRK_TIM15_IRQHandler(void){
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	if ((TIM15->SR & (TIM_SR_UIF)) != 0) {				//check if the interrupt is caused by TIM15 update event
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <TIM1_BRK_TIM15_IRQHandler+0x18>
		TIM15->SR = ~(TIM_SR_UIF);						//clear interrupt pending bit
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000842:	f06f 0201 	mvn.w	r2, #1
 8000846:	611a      	str	r2, [r3, #16]


	}
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40014000 	.word	0x40014000

08000858 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000860:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000864:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d013      	beq.n	8000898 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000870:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000874:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000878:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00b      	beq.n	8000898 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000880:	e000      	b.n	8000884 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000882:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000884:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f9      	beq.n	8000882 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800088e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <main>:

int32_t motorEnc;


int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	sysClockConfig();
 80008ac:	f7ff fcb4 	bl	8000218 <sysClockConfig>
	gpioInit();
 80008b0:	f7ff fdc2 	bl	8000438 <gpioInit>
	interruptInit();
 80008b4:	f7ff ff2c 	bl	8000710 <interruptInit>
	TIM3Init();
 80008b8:	f000 f92a 	bl	8000b10 <TIM3Init>
	TIM4Init();
 80008bc:	f000 f946 	bl	8000b4c <TIM4Init>
	TIM8Init();
 80008c0:	f000 f996 	bl	8000bf0 <TIM8Init>
	TIM15Init();
 80008c4:	f000 f9e0 	bl	8000c88 <TIM15Init>
	setMotorDirection(MOTOR_FORWARD);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 f831 	bl	8000930 <setMotorDirection>
	setMotorDuty(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f85a 	bl	8000988 <setMotorDuty>
	printf("Initialization done.\n");
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <main+0x40>)
 80008d6:	f000 fac5 	bl	8000e64 <puts>

	while(1){
		motorEnc = TIM4->CNT;
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <main+0x44>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	461a      	mov	r2, r3
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <main+0x48>)
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e7f9      	b.n	80008da <main+0x32>
 80008e6:	bf00      	nop
 80008e8:	080017b0 	.word	0x080017b0
 80008ec:	40000800 	.word	0x40000800
 80008f0:	20000090 	.word	0x20000090

080008f4 <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  int i=0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e009      	b.n	800091e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	60ba      	str	r2, [r7, #8]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffa0 	bl	8000858 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf1      	blt.n	800090a <_write+0x16>
  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <setMotorDirection>:
/**
 * Function to set the desired direction of the motor.
 * Parameters: Direction of the motor, either forward or reverse.
 * Returns: none
 */
void setMotorDirection(motordirection_t direction){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
			switch (direction) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <setMotorDirection+0x16>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00d      	beq.n	8000960 <setMotorDirection+0x30>
				case MOTOR_REVERSE:
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
					break;
			}
}
 8000944:	e019      	b.n	800097a <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_HIGH);		//in1 HIGH, in2 LOW for forward
 8000946:	2201      	movs	r2, #1
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <setMotorDirection+0x54>)
 800094c:	f7ff fe5f 	bl	800060e <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_LOW);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f7ff fe58 	bl	800060e <setPin>
					break;
 800095e:	e00c      	b.n	800097a <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
 8000960:	2200      	movs	r2, #0
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <setMotorDirection+0x54>)
 8000966:	f7ff fe52 	bl	800060e <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f7ff fe4b 	bl	800060e <setPin>
					break;
 8000978:	bf00      	nop
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	48000800 	.word	0x48000800

08000988 <setMotorDuty>:
/**
 * Function to set the desired speed of the motor.
 * Parameters: Desired duty cycle from 1-100.
 * Returns: none
 */
void setMotorDuty(int16_t duty){					//input speed, no output
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	if (duty <= 100 && duty >= 0){
 8000992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000996:	2b64      	cmp	r3, #100	; 0x64
 8000998:	dc07      	bgt.n	80009aa <setMotorDuty+0x22>
 800099a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db03      	blt.n	80009aa <setMotorDuty+0x22>
	   TIM8->CCR1 = duty;							//set duty cycle by CCR1 register
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <setMotorDuty+0x30>)
 80009a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a8:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40013400 	.word	0x40013400

080009bc <measureMotorSpeed>:
/**
 * Function to measure the speed of the motor.
 * Parameters: none
 * Returns: Speed of the motor in RPM
 */
int16_t measureMotorSpeed(){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	int16_t motorEncCounter = TIM4->CNT;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <measureMotorSpeed+0x1c>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	80fb      	strh	r3, [r7, #6]
	return motorEncCounter;
 80009c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40000800 	.word	0x40000800

080009dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
  }

  return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f000 f938 	bl	8000d24 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20008000 	.word	0x20008000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	20000094 	.word	0x20000094
 8000ae8:	200000a8 	.word	0x200000a8

08000aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <TIM3Init>:
/**
 * Function to initialize and start Timer 3. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM3Init(){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM3->CR1 |= (0x01 << TIM_CR1_URS_Pos);		//interrupts only occur on update (overflow/underflow)
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <TIM3Init+0x38>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <TIM3Init+0x38>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//update interrupt is enabled
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <TIM3Init+0x38>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <TIM3Init+0x38>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	60d3      	str	r3, [r2, #12]
	TIM3->PSC = 85-1; 						    //prescalar value (set to yield interrupt at 30 Hz)
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <TIM3Init+0x38>)
 8000b2e:	2254      	movs	r2, #84	; 0x54
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CR1 |= (0x01 << TIM_CR1_CEN_Pos);		//counter is enabled
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <TIM3Init+0x38>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <TIM3Init+0x38>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]


}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40000400 	.word	0x40000400

08000b4c <TIM4Init>:
/**
 * Function to initialize and start Timer 4.
 * Parameters: none
 * Returns: none
 */
void TIM4Init(){
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);      //both inputs are active on both rising and falling edges
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <TIM4Init+0xa0>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a25      	ldr	r2, [pc, #148]	; (8000bec <TIM4Init+0xa0>)
 8000b56:	f043 0303 	orr.w	r3, r3, #3
 8000b5a:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <TIM4Init+0xa0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <TIM4Init+0xa0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <TIM4Init+0xa0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <TIM4Init+0xa0>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);   //set input filter on capture 1
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <TIM4Init+0xa0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <TIM4Init+0xa0>)
 8000b7a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b7e:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);   //set input filter on capture 2
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <TIM4Init+0xa0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <TIM4Init+0xa0>)
 8000b86:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000b8a:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);    //tim_ti1fp1 noninverted
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <TIM4Init+0xa0>)
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <TIM4Init+0xa0>)
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <TIM4Init+0xa0>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <TIM4Init+0xa0>)
 8000b9e:	f023 0308 	bic.w	r3, r3, #8
 8000ba2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);    //tim_ti2fp2 noninverted
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <TIM4Init+0xa0>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <TIM4Init+0xa0>)
 8000baa:	f023 0320 	bic.w	r3, r3, #32
 8000bae:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <TIM4Init+0xa0>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <TIM4Init+0xa0>)
 8000bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bba:	6213      	str	r3, [r2, #32]
	//TIM4->CCER |= (0x01 << TIM_CCER_CC1E_Pos);
	//TIM4->CCER |= (0x01 << TIM_CCER_CC2E_Pos);
	TIM4->PSC = 1-1;                           	   //prescalar set to 0
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <TIM4Init+0xa0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	   //enable auto-reload preload
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <TIM4Init+0xa0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <TIM4Init+0xa0>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6013      	str	r3, [r2, #0]
	TIM4->ARR = 0xFFFF;                     	   //auto-reload register
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <TIM4Init+0xa0>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <TIM4Init+0xa0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <TIM4Init+0xa0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6013      	str	r3, [r2, #0]

}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40000800 	.word	0x40000800

08000bf0 <TIM8Init>:
/**
 * Function to initialize and start Timer 8.
 * Parameters: none
 * Returns: none
 */
void TIM8Init(){
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM8->CCMR1 |= (0x06 << TIM_CCMR1_OC1M_Pos);		//set PWM mode 1
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <TIM8Init+0x94>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <TIM8Init+0x94>)
 8000bfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000bfe:	6193      	str	r3, [r2, #24]
	TIM8->CCMR1 |= (0x01 << TIM_CCMR1_OC1PE_Pos);		//preload register is enabled, for duty cycle
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <TIM8Init+0x94>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <TIM8Init+0x94>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);			//auto-reload preload is enabled, for frequency
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <TIM8Init+0x94>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <TIM8Init+0x94>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	6013      	str	r3, [r2, #0]
	TIM8->CR1 &= ~(0x03 << TIM_CR1_CMS_Pos);			//edge-aligned mode
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <TIM8Init+0x94>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <TIM8Init+0x94>)
 8000c1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000c22:	6013      	str	r3, [r2, #0]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);			//OC1 active high
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <TIM8Init+0x94>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <TIM8Init+0x94>)
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	6213      	str	r3, [r2, #32]
	TIM8->CCER |= (0x01 << TIM_CCER_CC1E_Pos);			//OC1 is output on the output pin
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <TIM8Init+0x94>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <TIM8Init+0x94>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6213      	str	r3, [r2, #32]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1NE_Pos);		//tim_oc1n signal is not output
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <TIM8Init+0x94>)
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <TIM8Init+0x94>)
 8000c42:	f023 0304 	bic.w	r3, r3, #4
 8000c46:	6213      	str	r3, [r2, #32]
	TIM8->BDTR |= (0x01 << TIM_BDTR_MOE_Pos);			//main output enabled
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <TIM8Init+0x94>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <TIM8Init+0x94>)
 8000c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c52:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->ARR = 100-1;									//auto-reload, corresponds with PWM frequency
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <TIM8Init+0x94>)
 8000c56:	2263      	movs	r2, #99	; 0x63
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM8->PSC = 170-1;	   								//prescalar of 18, so the input clock is 10Mhz
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <TIM8Init+0x94>)
 8000c5c:	22a9      	movs	r2, #169	; 0xa9
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->EGR |= (0x01 << TIM_EGR_UG_Pos);				//initialize shadow registers before counter starts
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <TIM8Init+0x94>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <TIM8Init+0x94>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6153      	str	r3, [r2, #20]
	TIM8->CR1 |= (0x01 << TIM_CR1_CEN_Pos);             //counter is enabled
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <TIM8Init+0x94>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <TIM8Init+0x94>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40013400 	.word	0x40013400

08000c88 <TIM15Init>:
/**
 * Function to initialize and start Timer 15. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM15Init(){
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM15->CR1 |= (0x01 << TIM_CR1_URS_Pos);	//interrupts only occur on update (overflow/underflow)
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <TIM15Init+0x44>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <TIM15Init+0x44>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6013      	str	r3, [r2, #0]
	TIM15->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//update interrupt is enabled
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <TIM15Init+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <TIM15Init+0x44>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	60d3      	str	r3, [r2, #12]
	TIM15->PSC = 1700-1; 						//prescalar value, so the input clock is 100Mhz
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <TIM15Init+0x44>)
 8000ca6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->ARR = 50000-1;						//auto-reload, so this timer will trigger every 500ms
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <TIM15Init+0x44>)
 8000cae:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->CR1 |= (0x01 << TIM_CR1_CEN_Pos);	//counter is enabled
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <TIM15Init+0x44>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <TIM15Init+0x44>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]


}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40014000 	.word	0x40014000

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f7ff ff0a 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f000 f817 	bl	8000d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fdd1 	bl	80008a8 <main>

08000d06 <LoopForever>:

LoopForever:
  b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d14:	08001834 	.word	0x08001834
  ldr r2, =_sbss
 8000d18:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d1c:	200000a8 	.word	0x200000a8

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <__errno>:
 8000d24:	4b01      	ldr	r3, [pc, #4]	; (8000d2c <__errno+0x8>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000

08000d30 <__libc_init_array>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4d0d      	ldr	r5, [pc, #52]	; (8000d68 <__libc_init_array+0x38>)
 8000d34:	4c0d      	ldr	r4, [pc, #52]	; (8000d6c <__libc_init_array+0x3c>)
 8000d36:	1b64      	subs	r4, r4, r5
 8000d38:	10a4      	asrs	r4, r4, #2
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	42a6      	cmp	r6, r4
 8000d3e:	d109      	bne.n	8000d54 <__libc_init_array+0x24>
 8000d40:	4d0b      	ldr	r5, [pc, #44]	; (8000d70 <__libc_init_array+0x40>)
 8000d42:	4c0c      	ldr	r4, [pc, #48]	; (8000d74 <__libc_init_array+0x44>)
 8000d44:	f000 fd1e 	bl	8001784 <_init>
 8000d48:	1b64      	subs	r4, r4, r5
 8000d4a:	10a4      	asrs	r4, r4, #2
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	42a6      	cmp	r6, r4
 8000d50:	d105      	bne.n	8000d5e <__libc_init_array+0x2e>
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d58:	4798      	blx	r3
 8000d5a:	3601      	adds	r6, #1
 8000d5c:	e7ee      	b.n	8000d3c <__libc_init_array+0xc>
 8000d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d62:	4798      	blx	r3
 8000d64:	3601      	adds	r6, #1
 8000d66:	e7f2      	b.n	8000d4e <__libc_init_array+0x1e>
 8000d68:	0800182c 	.word	0x0800182c
 8000d6c:	0800182c 	.word	0x0800182c
 8000d70:	0800182c 	.word	0x0800182c
 8000d74:	08001830 	.word	0x08001830

08000d78 <memset>:
 8000d78:	4402      	add	r2, r0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <memset+0xa>
 8000d80:	4770      	bx	lr
 8000d82:	f803 1b01 	strb.w	r1, [r3], #1
 8000d86:	e7f9      	b.n	8000d7c <memset+0x4>

08000d88 <_puts_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	460e      	mov	r6, r1
 8000d8c:	4605      	mov	r5, r0
 8000d8e:	b118      	cbz	r0, 8000d98 <_puts_r+0x10>
 8000d90:	6983      	ldr	r3, [r0, #24]
 8000d92:	b90b      	cbnz	r3, 8000d98 <_puts_r+0x10>
 8000d94:	f000 fa48 	bl	8001228 <__sinit>
 8000d98:	69ab      	ldr	r3, [r5, #24]
 8000d9a:	68ac      	ldr	r4, [r5, #8]
 8000d9c:	b913      	cbnz	r3, 8000da4 <_puts_r+0x1c>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f000 fa42 	bl	8001228 <__sinit>
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <_puts_r+0xd0>)
 8000da6:	429c      	cmp	r4, r3
 8000da8:	d120      	bne.n	8000dec <_puts_r+0x64>
 8000daa:	686c      	ldr	r4, [r5, #4]
 8000dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dae:	07db      	lsls	r3, r3, #31
 8000db0:	d405      	bmi.n	8000dbe <_puts_r+0x36>
 8000db2:	89a3      	ldrh	r3, [r4, #12]
 8000db4:	0598      	lsls	r0, r3, #22
 8000db6:	d402      	bmi.n	8000dbe <_puts_r+0x36>
 8000db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dba:	f000 fad3 	bl	8001364 <__retarget_lock_acquire_recursive>
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	0719      	lsls	r1, r3, #28
 8000dc2:	d51d      	bpl.n	8000e00 <_puts_r+0x78>
 8000dc4:	6923      	ldr	r3, [r4, #16]
 8000dc6:	b1db      	cbz	r3, 8000e00 <_puts_r+0x78>
 8000dc8:	3e01      	subs	r6, #1
 8000dca:	68a3      	ldr	r3, [r4, #8]
 8000dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60a3      	str	r3, [r4, #8]
 8000dd4:	bb39      	cbnz	r1, 8000e26 <_puts_r+0x9e>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da38      	bge.n	8000e4c <_puts_r+0xc4>
 8000dda:	4622      	mov	r2, r4
 8000ddc:	210a      	movs	r1, #10
 8000dde:	4628      	mov	r0, r5
 8000de0:	f000 f848 	bl	8000e74 <__swbuf_r>
 8000de4:	3001      	adds	r0, #1
 8000de6:	d011      	beq.n	8000e0c <_puts_r+0x84>
 8000de8:	250a      	movs	r5, #10
 8000dea:	e011      	b.n	8000e10 <_puts_r+0x88>
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <_puts_r+0xd4>)
 8000dee:	429c      	cmp	r4, r3
 8000df0:	d101      	bne.n	8000df6 <_puts_r+0x6e>
 8000df2:	68ac      	ldr	r4, [r5, #8]
 8000df4:	e7da      	b.n	8000dac <_puts_r+0x24>
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <_puts_r+0xd8>)
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	bf08      	it	eq
 8000dfc:	68ec      	ldreq	r4, [r5, #12]
 8000dfe:	e7d5      	b.n	8000dac <_puts_r+0x24>
 8000e00:	4621      	mov	r1, r4
 8000e02:	4628      	mov	r0, r5
 8000e04:	f000 f888 	bl	8000f18 <__swsetup_r>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d0dd      	beq.n	8000dc8 <_puts_r+0x40>
 8000e0c:	f04f 35ff 	mov.w	r5, #4294967295
 8000e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e12:	07da      	lsls	r2, r3, #31
 8000e14:	d405      	bmi.n	8000e22 <_puts_r+0x9a>
 8000e16:	89a3      	ldrh	r3, [r4, #12]
 8000e18:	059b      	lsls	r3, r3, #22
 8000e1a:	d402      	bmi.n	8000e22 <_puts_r+0x9a>
 8000e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e1e:	f000 faa2 	bl	8001366 <__retarget_lock_release_recursive>
 8000e22:	4628      	mov	r0, r5
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da04      	bge.n	8000e34 <_puts_r+0xac>
 8000e2a:	69a2      	ldr	r2, [r4, #24]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dc06      	bgt.n	8000e3e <_puts_r+0xb6>
 8000e30:	290a      	cmp	r1, #10
 8000e32:	d004      	beq.n	8000e3e <_puts_r+0xb6>
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	6022      	str	r2, [r4, #0]
 8000e3a:	7019      	strb	r1, [r3, #0]
 8000e3c:	e7c5      	b.n	8000dca <_puts_r+0x42>
 8000e3e:	4622      	mov	r2, r4
 8000e40:	4628      	mov	r0, r5
 8000e42:	f000 f817 	bl	8000e74 <__swbuf_r>
 8000e46:	3001      	adds	r0, #1
 8000e48:	d1bf      	bne.n	8000dca <_puts_r+0x42>
 8000e4a:	e7df      	b.n	8000e0c <_puts_r+0x84>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	250a      	movs	r5, #10
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	6022      	str	r2, [r4, #0]
 8000e54:	701d      	strb	r5, [r3, #0]
 8000e56:	e7db      	b.n	8000e10 <_puts_r+0x88>
 8000e58:	080017ec 	.word	0x080017ec
 8000e5c:	0800180c 	.word	0x0800180c
 8000e60:	080017cc 	.word	0x080017cc

08000e64 <puts>:
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <puts+0xc>)
 8000e66:	4601      	mov	r1, r0
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	f7ff bf8d 	b.w	8000d88 <_puts_r>
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000

08000e74 <__swbuf_r>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	460e      	mov	r6, r1
 8000e78:	4614      	mov	r4, r2
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	b118      	cbz	r0, 8000e86 <__swbuf_r+0x12>
 8000e7e:	6983      	ldr	r3, [r0, #24]
 8000e80:	b90b      	cbnz	r3, 8000e86 <__swbuf_r+0x12>
 8000e82:	f000 f9d1 	bl	8001228 <__sinit>
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <__swbuf_r+0x98>)
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d12b      	bne.n	8000ee4 <__swbuf_r+0x70>
 8000e8c:	686c      	ldr	r4, [r5, #4]
 8000e8e:	69a3      	ldr	r3, [r4, #24]
 8000e90:	60a3      	str	r3, [r4, #8]
 8000e92:	89a3      	ldrh	r3, [r4, #12]
 8000e94:	071a      	lsls	r2, r3, #28
 8000e96:	d52f      	bpl.n	8000ef8 <__swbuf_r+0x84>
 8000e98:	6923      	ldr	r3, [r4, #16]
 8000e9a:	b36b      	cbz	r3, 8000ef8 <__swbuf_r+0x84>
 8000e9c:	6923      	ldr	r3, [r4, #16]
 8000e9e:	6820      	ldr	r0, [r4, #0]
 8000ea0:	1ac0      	subs	r0, r0, r3
 8000ea2:	6963      	ldr	r3, [r4, #20]
 8000ea4:	b2f6      	uxtb	r6, r6
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	dc04      	bgt.n	8000eb6 <__swbuf_r+0x42>
 8000eac:	4621      	mov	r1, r4
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f000 f926 	bl	8001100 <_fflush_r>
 8000eb4:	bb30      	cbnz	r0, 8000f04 <__swbuf_r+0x90>
 8000eb6:	68a3      	ldr	r3, [r4, #8]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	60a3      	str	r3, [r4, #8]
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	6022      	str	r2, [r4, #0]
 8000ec2:	701e      	strb	r6, [r3, #0]
 8000ec4:	6963      	ldr	r3, [r4, #20]
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	4283      	cmp	r3, r0
 8000eca:	d004      	beq.n	8000ed6 <__swbuf_r+0x62>
 8000ecc:	89a3      	ldrh	r3, [r4, #12]
 8000ece:	07db      	lsls	r3, r3, #31
 8000ed0:	d506      	bpl.n	8000ee0 <__swbuf_r+0x6c>
 8000ed2:	2e0a      	cmp	r6, #10
 8000ed4:	d104      	bne.n	8000ee0 <__swbuf_r+0x6c>
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	4628      	mov	r0, r5
 8000eda:	f000 f911 	bl	8001100 <_fflush_r>
 8000ede:	b988      	cbnz	r0, 8000f04 <__swbuf_r+0x90>
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <__swbuf_r+0x9c>)
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	d101      	bne.n	8000eee <__swbuf_r+0x7a>
 8000eea:	68ac      	ldr	r4, [r5, #8]
 8000eec:	e7cf      	b.n	8000e8e <__swbuf_r+0x1a>
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <__swbuf_r+0xa0>)
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	bf08      	it	eq
 8000ef4:	68ec      	ldreq	r4, [r5, #12]
 8000ef6:	e7ca      	b.n	8000e8e <__swbuf_r+0x1a>
 8000ef8:	4621      	mov	r1, r4
 8000efa:	4628      	mov	r0, r5
 8000efc:	f000 f80c 	bl	8000f18 <__swsetup_r>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d0cb      	beq.n	8000e9c <__swbuf_r+0x28>
 8000f04:	f04f 37ff 	mov.w	r7, #4294967295
 8000f08:	e7ea      	b.n	8000ee0 <__swbuf_r+0x6c>
 8000f0a:	bf00      	nop
 8000f0c:	080017ec 	.word	0x080017ec
 8000f10:	0800180c 	.word	0x0800180c
 8000f14:	080017cc 	.word	0x080017cc

08000f18 <__swsetup_r>:
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <__swsetup_r+0xcc>)
 8000f1a:	b570      	push	{r4, r5, r6, lr}
 8000f1c:	681d      	ldr	r5, [r3, #0]
 8000f1e:	4606      	mov	r6, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	b125      	cbz	r5, 8000f2e <__swsetup_r+0x16>
 8000f24:	69ab      	ldr	r3, [r5, #24]
 8000f26:	b913      	cbnz	r3, 8000f2e <__swsetup_r+0x16>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	f000 f97d 	bl	8001228 <__sinit>
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <__swsetup_r+0xd0>)
 8000f30:	429c      	cmp	r4, r3
 8000f32:	d10f      	bne.n	8000f54 <__swsetup_r+0x3c>
 8000f34:	686c      	ldr	r4, [r5, #4]
 8000f36:	89a3      	ldrh	r3, [r4, #12]
 8000f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f3c:	0719      	lsls	r1, r3, #28
 8000f3e:	d42c      	bmi.n	8000f9a <__swsetup_r+0x82>
 8000f40:	06dd      	lsls	r5, r3, #27
 8000f42:	d411      	bmi.n	8000f68 <__swsetup_r+0x50>
 8000f44:	2309      	movs	r3, #9
 8000f46:	6033      	str	r3, [r6, #0]
 8000f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f52:	e03e      	b.n	8000fd2 <__swsetup_r+0xba>
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <__swsetup_r+0xd4>)
 8000f56:	429c      	cmp	r4, r3
 8000f58:	d101      	bne.n	8000f5e <__swsetup_r+0x46>
 8000f5a:	68ac      	ldr	r4, [r5, #8]
 8000f5c:	e7eb      	b.n	8000f36 <__swsetup_r+0x1e>
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <__swsetup_r+0xd8>)
 8000f60:	429c      	cmp	r4, r3
 8000f62:	bf08      	it	eq
 8000f64:	68ec      	ldreq	r4, [r5, #12]
 8000f66:	e7e6      	b.n	8000f36 <__swsetup_r+0x1e>
 8000f68:	0758      	lsls	r0, r3, #29
 8000f6a:	d512      	bpl.n	8000f92 <__swsetup_r+0x7a>
 8000f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f6e:	b141      	cbz	r1, 8000f82 <__swsetup_r+0x6a>
 8000f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d002      	beq.n	8000f7e <__swsetup_r+0x66>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f000 fa5b 	bl	8001434 <_free_r>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	6363      	str	r3, [r4, #52]	; 0x34
 8000f82:	89a3      	ldrh	r3, [r4, #12]
 8000f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000f88:	81a3      	strh	r3, [r4, #12]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6063      	str	r3, [r4, #4]
 8000f8e:	6923      	ldr	r3, [r4, #16]
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	89a3      	ldrh	r3, [r4, #12]
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	81a3      	strh	r3, [r4, #12]
 8000f9a:	6923      	ldr	r3, [r4, #16]
 8000f9c:	b94b      	cbnz	r3, 8000fb2 <__swsetup_r+0x9a>
 8000f9e:	89a3      	ldrh	r3, [r4, #12]
 8000fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa8:	d003      	beq.n	8000fb2 <__swsetup_r+0x9a>
 8000faa:	4621      	mov	r1, r4
 8000fac:	4630      	mov	r0, r6
 8000fae:	f000 fa01 	bl	80013b4 <__smakebuf_r>
 8000fb2:	89a0      	ldrh	r0, [r4, #12]
 8000fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fb8:	f010 0301 	ands.w	r3, r0, #1
 8000fbc:	d00a      	beq.n	8000fd4 <__swsetup_r+0xbc>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60a3      	str	r3, [r4, #8]
 8000fc2:	6963      	ldr	r3, [r4, #20]
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	61a3      	str	r3, [r4, #24]
 8000fc8:	6923      	ldr	r3, [r4, #16]
 8000fca:	b943      	cbnz	r3, 8000fde <__swsetup_r+0xc6>
 8000fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000fd0:	d1ba      	bne.n	8000f48 <__swsetup_r+0x30>
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
 8000fd4:	0781      	lsls	r1, r0, #30
 8000fd6:	bf58      	it	pl
 8000fd8:	6963      	ldrpl	r3, [r4, #20]
 8000fda:	60a3      	str	r3, [r4, #8]
 8000fdc:	e7f4      	b.n	8000fc8 <__swsetup_r+0xb0>
 8000fde:	2000      	movs	r0, #0
 8000fe0:	e7f7      	b.n	8000fd2 <__swsetup_r+0xba>
 8000fe2:	bf00      	nop
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	080017ec 	.word	0x080017ec
 8000fec:	0800180c 	.word	0x0800180c
 8000ff0:	080017cc 	.word	0x080017cc

08000ff4 <__sflush_r>:
 8000ff4:	898a      	ldrh	r2, [r1, #12]
 8000ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	0710      	lsls	r0, r2, #28
 8000ffe:	460c      	mov	r4, r1
 8001000:	d458      	bmi.n	80010b4 <__sflush_r+0xc0>
 8001002:	684b      	ldr	r3, [r1, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dc05      	bgt.n	8001014 <__sflush_r+0x20>
 8001008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc02      	bgt.n	8001014 <__sflush_r+0x20>
 800100e:	2000      	movs	r0, #0
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001016:	2e00      	cmp	r6, #0
 8001018:	d0f9      	beq.n	800100e <__sflush_r+0x1a>
 800101a:	2300      	movs	r3, #0
 800101c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001020:	682f      	ldr	r7, [r5, #0]
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	d032      	beq.n	800108c <__sflush_r+0x98>
 8001026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	075a      	lsls	r2, r3, #29
 800102c:	d505      	bpl.n	800103a <__sflush_r+0x46>
 800102e:	6863      	ldr	r3, [r4, #4]
 8001030:	1ac0      	subs	r0, r0, r3
 8001032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001034:	b10b      	cbz	r3, 800103a <__sflush_r+0x46>
 8001036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001038:	1ac0      	subs	r0, r0, r3
 800103a:	2300      	movs	r3, #0
 800103c:	4602      	mov	r2, r0
 800103e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001040:	6a21      	ldr	r1, [r4, #32]
 8001042:	4628      	mov	r0, r5
 8001044:	47b0      	blx	r6
 8001046:	1c43      	adds	r3, r0, #1
 8001048:	89a3      	ldrh	r3, [r4, #12]
 800104a:	d106      	bne.n	800105a <__sflush_r+0x66>
 800104c:	6829      	ldr	r1, [r5, #0]
 800104e:	291d      	cmp	r1, #29
 8001050:	d82c      	bhi.n	80010ac <__sflush_r+0xb8>
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <__sflush_r+0x108>)
 8001054:	40ca      	lsrs	r2, r1
 8001056:	07d6      	lsls	r6, r2, #31
 8001058:	d528      	bpl.n	80010ac <__sflush_r+0xb8>
 800105a:	2200      	movs	r2, #0
 800105c:	6062      	str	r2, [r4, #4]
 800105e:	04d9      	lsls	r1, r3, #19
 8001060:	6922      	ldr	r2, [r4, #16]
 8001062:	6022      	str	r2, [r4, #0]
 8001064:	d504      	bpl.n	8001070 <__sflush_r+0x7c>
 8001066:	1c42      	adds	r2, r0, #1
 8001068:	d101      	bne.n	800106e <__sflush_r+0x7a>
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	b903      	cbnz	r3, 8001070 <__sflush_r+0x7c>
 800106e:	6560      	str	r0, [r4, #84]	; 0x54
 8001070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001072:	602f      	str	r7, [r5, #0]
 8001074:	2900      	cmp	r1, #0
 8001076:	d0ca      	beq.n	800100e <__sflush_r+0x1a>
 8001078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800107c:	4299      	cmp	r1, r3
 800107e:	d002      	beq.n	8001086 <__sflush_r+0x92>
 8001080:	4628      	mov	r0, r5
 8001082:	f000 f9d7 	bl	8001434 <_free_r>
 8001086:	2000      	movs	r0, #0
 8001088:	6360      	str	r0, [r4, #52]	; 0x34
 800108a:	e7c1      	b.n	8001010 <__sflush_r+0x1c>
 800108c:	6a21      	ldr	r1, [r4, #32]
 800108e:	2301      	movs	r3, #1
 8001090:	4628      	mov	r0, r5
 8001092:	47b0      	blx	r6
 8001094:	1c41      	adds	r1, r0, #1
 8001096:	d1c7      	bne.n	8001028 <__sflush_r+0x34>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0c4      	beq.n	8001028 <__sflush_r+0x34>
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	d001      	beq.n	80010a6 <__sflush_r+0xb2>
 80010a2:	2b16      	cmp	r3, #22
 80010a4:	d101      	bne.n	80010aa <__sflush_r+0xb6>
 80010a6:	602f      	str	r7, [r5, #0]
 80010a8:	e7b1      	b.n	800100e <__sflush_r+0x1a>
 80010aa:	89a3      	ldrh	r3, [r4, #12]
 80010ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b0:	81a3      	strh	r3, [r4, #12]
 80010b2:	e7ad      	b.n	8001010 <__sflush_r+0x1c>
 80010b4:	690f      	ldr	r7, [r1, #16]
 80010b6:	2f00      	cmp	r7, #0
 80010b8:	d0a9      	beq.n	800100e <__sflush_r+0x1a>
 80010ba:	0793      	lsls	r3, r2, #30
 80010bc:	680e      	ldr	r6, [r1, #0]
 80010be:	bf08      	it	eq
 80010c0:	694b      	ldreq	r3, [r1, #20]
 80010c2:	600f      	str	r7, [r1, #0]
 80010c4:	bf18      	it	ne
 80010c6:	2300      	movne	r3, #0
 80010c8:	eba6 0807 	sub.w	r8, r6, r7
 80010cc:	608b      	str	r3, [r1, #8]
 80010ce:	f1b8 0f00 	cmp.w	r8, #0
 80010d2:	dd9c      	ble.n	800100e <__sflush_r+0x1a>
 80010d4:	6a21      	ldr	r1, [r4, #32]
 80010d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80010d8:	4643      	mov	r3, r8
 80010da:	463a      	mov	r2, r7
 80010dc:	4628      	mov	r0, r5
 80010de:	47b0      	blx	r6
 80010e0:	2800      	cmp	r0, #0
 80010e2:	dc06      	bgt.n	80010f2 <__sflush_r+0xfe>
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ea:	81a3      	strh	r3, [r4, #12]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	e78e      	b.n	8001010 <__sflush_r+0x1c>
 80010f2:	4407      	add	r7, r0
 80010f4:	eba8 0800 	sub.w	r8, r8, r0
 80010f8:	e7e9      	b.n	80010ce <__sflush_r+0xda>
 80010fa:	bf00      	nop
 80010fc:	20400001 	.word	0x20400001

08001100 <_fflush_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	690b      	ldr	r3, [r1, #16]
 8001104:	4605      	mov	r5, r0
 8001106:	460c      	mov	r4, r1
 8001108:	b913      	cbnz	r3, 8001110 <_fflush_r+0x10>
 800110a:	2500      	movs	r5, #0
 800110c:	4628      	mov	r0, r5
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	b118      	cbz	r0, 800111a <_fflush_r+0x1a>
 8001112:	6983      	ldr	r3, [r0, #24]
 8001114:	b90b      	cbnz	r3, 800111a <_fflush_r+0x1a>
 8001116:	f000 f887 	bl	8001228 <__sinit>
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <_fflush_r+0x6c>)
 800111c:	429c      	cmp	r4, r3
 800111e:	d11b      	bne.n	8001158 <_fflush_r+0x58>
 8001120:	686c      	ldr	r4, [r5, #4]
 8001122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0ef      	beq.n	800110a <_fflush_r+0xa>
 800112a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800112c:	07d0      	lsls	r0, r2, #31
 800112e:	d404      	bmi.n	800113a <_fflush_r+0x3a>
 8001130:	0599      	lsls	r1, r3, #22
 8001132:	d402      	bmi.n	800113a <_fflush_r+0x3a>
 8001134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001136:	f000 f915 	bl	8001364 <__retarget_lock_acquire_recursive>
 800113a:	4628      	mov	r0, r5
 800113c:	4621      	mov	r1, r4
 800113e:	f7ff ff59 	bl	8000ff4 <__sflush_r>
 8001142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001144:	07da      	lsls	r2, r3, #31
 8001146:	4605      	mov	r5, r0
 8001148:	d4e0      	bmi.n	800110c <_fflush_r+0xc>
 800114a:	89a3      	ldrh	r3, [r4, #12]
 800114c:	059b      	lsls	r3, r3, #22
 800114e:	d4dd      	bmi.n	800110c <_fflush_r+0xc>
 8001150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001152:	f000 f908 	bl	8001366 <__retarget_lock_release_recursive>
 8001156:	e7d9      	b.n	800110c <_fflush_r+0xc>
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <_fflush_r+0x70>)
 800115a:	429c      	cmp	r4, r3
 800115c:	d101      	bne.n	8001162 <_fflush_r+0x62>
 800115e:	68ac      	ldr	r4, [r5, #8]
 8001160:	e7df      	b.n	8001122 <_fflush_r+0x22>
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <_fflush_r+0x74>)
 8001164:	429c      	cmp	r4, r3
 8001166:	bf08      	it	eq
 8001168:	68ec      	ldreq	r4, [r5, #12]
 800116a:	e7da      	b.n	8001122 <_fflush_r+0x22>
 800116c:	080017ec 	.word	0x080017ec
 8001170:	0800180c 	.word	0x0800180c
 8001174:	080017cc 	.word	0x080017cc

08001178 <std>:
 8001178:	2300      	movs	r3, #0
 800117a:	b510      	push	{r4, lr}
 800117c:	4604      	mov	r4, r0
 800117e:	e9c0 3300 	strd	r3, r3, [r0]
 8001182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001186:	6083      	str	r3, [r0, #8]
 8001188:	8181      	strh	r1, [r0, #12]
 800118a:	6643      	str	r3, [r0, #100]	; 0x64
 800118c:	81c2      	strh	r2, [r0, #14]
 800118e:	6183      	str	r3, [r0, #24]
 8001190:	4619      	mov	r1, r3
 8001192:	2208      	movs	r2, #8
 8001194:	305c      	adds	r0, #92	; 0x5c
 8001196:	f7ff fdef 	bl	8000d78 <memset>
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <std+0x38>)
 800119c:	6263      	str	r3, [r4, #36]	; 0x24
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <std+0x3c>)
 80011a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <std+0x40>)
 80011a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <std+0x44>)
 80011a8:	6224      	str	r4, [r4, #32]
 80011aa:	6323      	str	r3, [r4, #48]	; 0x30
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	bf00      	nop
 80011b0:	08001615 	.word	0x08001615
 80011b4:	08001637 	.word	0x08001637
 80011b8:	0800166f 	.word	0x0800166f
 80011bc:	08001693 	.word	0x08001693

080011c0 <_cleanup_r>:
 80011c0:	4901      	ldr	r1, [pc, #4]	; (80011c8 <_cleanup_r+0x8>)
 80011c2:	f000 b8af 	b.w	8001324 <_fwalk_reent>
 80011c6:	bf00      	nop
 80011c8:	08001101 	.word	0x08001101

080011cc <__sfmoreglue>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	2268      	movs	r2, #104	; 0x68
 80011d0:	1e4d      	subs	r5, r1, #1
 80011d2:	4355      	muls	r5, r2
 80011d4:	460e      	mov	r6, r1
 80011d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80011da:	f000 f997 	bl	800150c <_malloc_r>
 80011de:	4604      	mov	r4, r0
 80011e0:	b140      	cbz	r0, 80011f4 <__sfmoreglue+0x28>
 80011e2:	2100      	movs	r1, #0
 80011e4:	e9c0 1600 	strd	r1, r6, [r0]
 80011e8:	300c      	adds	r0, #12
 80011ea:	60a0      	str	r0, [r4, #8]
 80011ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80011f0:	f7ff fdc2 	bl	8000d78 <memset>
 80011f4:	4620      	mov	r0, r4
 80011f6:	bd70      	pop	{r4, r5, r6, pc}

080011f8 <__sfp_lock_acquire>:
 80011f8:	4801      	ldr	r0, [pc, #4]	; (8001200 <__sfp_lock_acquire+0x8>)
 80011fa:	f000 b8b3 	b.w	8001364 <__retarget_lock_acquire_recursive>
 80011fe:	bf00      	nop
 8001200:	20000099 	.word	0x20000099

08001204 <__sfp_lock_release>:
 8001204:	4801      	ldr	r0, [pc, #4]	; (800120c <__sfp_lock_release+0x8>)
 8001206:	f000 b8ae 	b.w	8001366 <__retarget_lock_release_recursive>
 800120a:	bf00      	nop
 800120c:	20000099 	.word	0x20000099

08001210 <__sinit_lock_acquire>:
 8001210:	4801      	ldr	r0, [pc, #4]	; (8001218 <__sinit_lock_acquire+0x8>)
 8001212:	f000 b8a7 	b.w	8001364 <__retarget_lock_acquire_recursive>
 8001216:	bf00      	nop
 8001218:	2000009a 	.word	0x2000009a

0800121c <__sinit_lock_release>:
 800121c:	4801      	ldr	r0, [pc, #4]	; (8001224 <__sinit_lock_release+0x8>)
 800121e:	f000 b8a2 	b.w	8001366 <__retarget_lock_release_recursive>
 8001222:	bf00      	nop
 8001224:	2000009a 	.word	0x2000009a

08001228 <__sinit>:
 8001228:	b510      	push	{r4, lr}
 800122a:	4604      	mov	r4, r0
 800122c:	f7ff fff0 	bl	8001210 <__sinit_lock_acquire>
 8001230:	69a3      	ldr	r3, [r4, #24]
 8001232:	b11b      	cbz	r3, 800123c <__sinit+0x14>
 8001234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001238:	f7ff bff0 	b.w	800121c <__sinit_lock_release>
 800123c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001240:	6523      	str	r3, [r4, #80]	; 0x50
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <__sinit+0x68>)
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <__sinit+0x6c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	62a2      	str	r2, [r4, #40]	; 0x28
 800124a:	42a3      	cmp	r3, r4
 800124c:	bf04      	itt	eq
 800124e:	2301      	moveq	r3, #1
 8001250:	61a3      	streq	r3, [r4, #24]
 8001252:	4620      	mov	r0, r4
 8001254:	f000 f820 	bl	8001298 <__sfp>
 8001258:	6060      	str	r0, [r4, #4]
 800125a:	4620      	mov	r0, r4
 800125c:	f000 f81c 	bl	8001298 <__sfp>
 8001260:	60a0      	str	r0, [r4, #8]
 8001262:	4620      	mov	r0, r4
 8001264:	f000 f818 	bl	8001298 <__sfp>
 8001268:	2200      	movs	r2, #0
 800126a:	60e0      	str	r0, [r4, #12]
 800126c:	2104      	movs	r1, #4
 800126e:	6860      	ldr	r0, [r4, #4]
 8001270:	f7ff ff82 	bl	8001178 <std>
 8001274:	68a0      	ldr	r0, [r4, #8]
 8001276:	2201      	movs	r2, #1
 8001278:	2109      	movs	r1, #9
 800127a:	f7ff ff7d 	bl	8001178 <std>
 800127e:	68e0      	ldr	r0, [r4, #12]
 8001280:	2202      	movs	r2, #2
 8001282:	2112      	movs	r1, #18
 8001284:	f7ff ff78 	bl	8001178 <std>
 8001288:	2301      	movs	r3, #1
 800128a:	61a3      	str	r3, [r4, #24]
 800128c:	e7d2      	b.n	8001234 <__sinit+0xc>
 800128e:	bf00      	nop
 8001290:	080017c8 	.word	0x080017c8
 8001294:	080011c1 	.word	0x080011c1

08001298 <__sfp>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	4607      	mov	r7, r0
 800129c:	f7ff ffac 	bl	80011f8 <__sfp_lock_acquire>
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <__sfp+0x84>)
 80012a2:	681e      	ldr	r6, [r3, #0]
 80012a4:	69b3      	ldr	r3, [r6, #24]
 80012a6:	b913      	cbnz	r3, 80012ae <__sfp+0x16>
 80012a8:	4630      	mov	r0, r6
 80012aa:	f7ff ffbd 	bl	8001228 <__sinit>
 80012ae:	3648      	adds	r6, #72	; 0x48
 80012b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	d503      	bpl.n	80012c0 <__sfp+0x28>
 80012b8:	6833      	ldr	r3, [r6, #0]
 80012ba:	b30b      	cbz	r3, 8001300 <__sfp+0x68>
 80012bc:	6836      	ldr	r6, [r6, #0]
 80012be:	e7f7      	b.n	80012b0 <__sfp+0x18>
 80012c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012c4:	b9d5      	cbnz	r5, 80012fc <__sfp+0x64>
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <__sfp+0x88>)
 80012c8:	60e3      	str	r3, [r4, #12]
 80012ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80012ce:	6665      	str	r5, [r4, #100]	; 0x64
 80012d0:	f000 f847 	bl	8001362 <__retarget_lock_init_recursive>
 80012d4:	f7ff ff96 	bl	8001204 <__sfp_lock_release>
 80012d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80012dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80012e0:	6025      	str	r5, [r4, #0]
 80012e2:	61a5      	str	r5, [r4, #24]
 80012e4:	2208      	movs	r2, #8
 80012e6:	4629      	mov	r1, r5
 80012e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80012ec:	f7ff fd44 	bl	8000d78 <memset>
 80012f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80012f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80012f8:	4620      	mov	r0, r4
 80012fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fc:	3468      	adds	r4, #104	; 0x68
 80012fe:	e7d9      	b.n	80012b4 <__sfp+0x1c>
 8001300:	2104      	movs	r1, #4
 8001302:	4638      	mov	r0, r7
 8001304:	f7ff ff62 	bl	80011cc <__sfmoreglue>
 8001308:	4604      	mov	r4, r0
 800130a:	6030      	str	r0, [r6, #0]
 800130c:	2800      	cmp	r0, #0
 800130e:	d1d5      	bne.n	80012bc <__sfp+0x24>
 8001310:	f7ff ff78 	bl	8001204 <__sfp_lock_release>
 8001314:	230c      	movs	r3, #12
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e7ee      	b.n	80012f8 <__sfp+0x60>
 800131a:	bf00      	nop
 800131c:	080017c8 	.word	0x080017c8
 8001320:	ffff0001 	.word	0xffff0001

08001324 <_fwalk_reent>:
 8001324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001328:	4606      	mov	r6, r0
 800132a:	4688      	mov	r8, r1
 800132c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001330:	2700      	movs	r7, #0
 8001332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001336:	f1b9 0901 	subs.w	r9, r9, #1
 800133a:	d505      	bpl.n	8001348 <_fwalk_reent+0x24>
 800133c:	6824      	ldr	r4, [r4, #0]
 800133e:	2c00      	cmp	r4, #0
 8001340:	d1f7      	bne.n	8001332 <_fwalk_reent+0xe>
 8001342:	4638      	mov	r0, r7
 8001344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001348:	89ab      	ldrh	r3, [r5, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d907      	bls.n	800135e <_fwalk_reent+0x3a>
 800134e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001352:	3301      	adds	r3, #1
 8001354:	d003      	beq.n	800135e <_fwalk_reent+0x3a>
 8001356:	4629      	mov	r1, r5
 8001358:	4630      	mov	r0, r6
 800135a:	47c0      	blx	r8
 800135c:	4307      	orrs	r7, r0
 800135e:	3568      	adds	r5, #104	; 0x68
 8001360:	e7e9      	b.n	8001336 <_fwalk_reent+0x12>

08001362 <__retarget_lock_init_recursive>:
 8001362:	4770      	bx	lr

08001364 <__retarget_lock_acquire_recursive>:
 8001364:	4770      	bx	lr

08001366 <__retarget_lock_release_recursive>:
 8001366:	4770      	bx	lr

08001368 <__swhatbuf_r>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	460e      	mov	r6, r1
 800136c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001370:	2900      	cmp	r1, #0
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	4614      	mov	r4, r2
 8001376:	461d      	mov	r5, r3
 8001378:	da08      	bge.n	800138c <__swhatbuf_r+0x24>
 800137a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	061a      	lsls	r2, r3, #24
 8001384:	d410      	bmi.n	80013a8 <__swhatbuf_r+0x40>
 8001386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138a:	e00e      	b.n	80013aa <__swhatbuf_r+0x42>
 800138c:	466a      	mov	r2, sp
 800138e:	f000 f9a7 	bl	80016e0 <_fstat_r>
 8001392:	2800      	cmp	r0, #0
 8001394:	dbf1      	blt.n	800137a <__swhatbuf_r+0x12>
 8001396:	9a01      	ldr	r2, [sp, #4]
 8001398:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800139c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013a0:	425a      	negs	r2, r3
 80013a2:	415a      	adcs	r2, r3
 80013a4:	602a      	str	r2, [r5, #0]
 80013a6:	e7ee      	b.n	8001386 <__swhatbuf_r+0x1e>
 80013a8:	2340      	movs	r3, #64	; 0x40
 80013aa:	2000      	movs	r0, #0
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	b016      	add	sp, #88	; 0x58
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080013b4 <__smakebuf_r>:
 80013b4:	898b      	ldrh	r3, [r1, #12]
 80013b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013b8:	079d      	lsls	r5, r3, #30
 80013ba:	4606      	mov	r6, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	d507      	bpl.n	80013d0 <__smakebuf_r+0x1c>
 80013c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	6123      	str	r3, [r4, #16]
 80013c8:	2301      	movs	r3, #1
 80013ca:	6163      	str	r3, [r4, #20]
 80013cc:	b002      	add	sp, #8
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	ab01      	add	r3, sp, #4
 80013d2:	466a      	mov	r2, sp
 80013d4:	f7ff ffc8 	bl	8001368 <__swhatbuf_r>
 80013d8:	9900      	ldr	r1, [sp, #0]
 80013da:	4605      	mov	r5, r0
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f895 	bl	800150c <_malloc_r>
 80013e2:	b948      	cbnz	r0, 80013f8 <__smakebuf_r+0x44>
 80013e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e8:	059a      	lsls	r2, r3, #22
 80013ea:	d4ef      	bmi.n	80013cc <__smakebuf_r+0x18>
 80013ec:	f023 0303 	bic.w	r3, r3, #3
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	81a3      	strh	r3, [r4, #12]
 80013f6:	e7e3      	b.n	80013c0 <__smakebuf_r+0xc>
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <__smakebuf_r+0x7c>)
 80013fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	6020      	str	r0, [r4, #0]
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	9b00      	ldr	r3, [sp, #0]
 8001408:	6163      	str	r3, [r4, #20]
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	6120      	str	r0, [r4, #16]
 800140e:	b15b      	cbz	r3, 8001428 <__smakebuf_r+0x74>
 8001410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001414:	4630      	mov	r0, r6
 8001416:	f000 f975 	bl	8001704 <_isatty_r>
 800141a:	b128      	cbz	r0, 8001428 <__smakebuf_r+0x74>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	89a0      	ldrh	r0, [r4, #12]
 800142a:	4305      	orrs	r5, r0
 800142c:	81a5      	strh	r5, [r4, #12]
 800142e:	e7cd      	b.n	80013cc <__smakebuf_r+0x18>
 8001430:	080011c1 	.word	0x080011c1

08001434 <_free_r>:
 8001434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001436:	2900      	cmp	r1, #0
 8001438:	d044      	beq.n	80014c4 <_free_r+0x90>
 800143a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800143e:	9001      	str	r0, [sp, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f1a1 0404 	sub.w	r4, r1, #4
 8001446:	bfb8      	it	lt
 8001448:	18e4      	addlt	r4, r4, r3
 800144a:	f000 f97d 	bl	8001748 <__malloc_lock>
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <_free_r+0x94>)
 8001450:	9801      	ldr	r0, [sp, #4]
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	b933      	cbnz	r3, 8001464 <_free_r+0x30>
 8001456:	6063      	str	r3, [r4, #4]
 8001458:	6014      	str	r4, [r2, #0]
 800145a:	b003      	add	sp, #12
 800145c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001460:	f000 b978 	b.w	8001754 <__malloc_unlock>
 8001464:	42a3      	cmp	r3, r4
 8001466:	d908      	bls.n	800147a <_free_r+0x46>
 8001468:	6825      	ldr	r5, [r4, #0]
 800146a:	1961      	adds	r1, r4, r5
 800146c:	428b      	cmp	r3, r1
 800146e:	bf01      	itttt	eq
 8001470:	6819      	ldreq	r1, [r3, #0]
 8001472:	685b      	ldreq	r3, [r3, #4]
 8001474:	1949      	addeq	r1, r1, r5
 8001476:	6021      	streq	r1, [r4, #0]
 8001478:	e7ed      	b.n	8001456 <_free_r+0x22>
 800147a:	461a      	mov	r2, r3
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	b10b      	cbz	r3, 8001484 <_free_r+0x50>
 8001480:	42a3      	cmp	r3, r4
 8001482:	d9fa      	bls.n	800147a <_free_r+0x46>
 8001484:	6811      	ldr	r1, [r2, #0]
 8001486:	1855      	adds	r5, r2, r1
 8001488:	42a5      	cmp	r5, r4
 800148a:	d10b      	bne.n	80014a4 <_free_r+0x70>
 800148c:	6824      	ldr	r4, [r4, #0]
 800148e:	4421      	add	r1, r4
 8001490:	1854      	adds	r4, r2, r1
 8001492:	42a3      	cmp	r3, r4
 8001494:	6011      	str	r1, [r2, #0]
 8001496:	d1e0      	bne.n	800145a <_free_r+0x26>
 8001498:	681c      	ldr	r4, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	6053      	str	r3, [r2, #4]
 800149e:	4421      	add	r1, r4
 80014a0:	6011      	str	r1, [r2, #0]
 80014a2:	e7da      	b.n	800145a <_free_r+0x26>
 80014a4:	d902      	bls.n	80014ac <_free_r+0x78>
 80014a6:	230c      	movs	r3, #12
 80014a8:	6003      	str	r3, [r0, #0]
 80014aa:	e7d6      	b.n	800145a <_free_r+0x26>
 80014ac:	6825      	ldr	r5, [r4, #0]
 80014ae:	1961      	adds	r1, r4, r5
 80014b0:	428b      	cmp	r3, r1
 80014b2:	bf04      	itt	eq
 80014b4:	6819      	ldreq	r1, [r3, #0]
 80014b6:	685b      	ldreq	r3, [r3, #4]
 80014b8:	6063      	str	r3, [r4, #4]
 80014ba:	bf04      	itt	eq
 80014bc:	1949      	addeq	r1, r1, r5
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	6054      	str	r4, [r2, #4]
 80014c2:	e7ca      	b.n	800145a <_free_r+0x26>
 80014c4:	b003      	add	sp, #12
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	2000009c 	.word	0x2000009c

080014cc <sbrk_aligned>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	4e0e      	ldr	r6, [pc, #56]	; (8001508 <sbrk_aligned+0x3c>)
 80014d0:	460c      	mov	r4, r1
 80014d2:	6831      	ldr	r1, [r6, #0]
 80014d4:	4605      	mov	r5, r0
 80014d6:	b911      	cbnz	r1, 80014de <sbrk_aligned+0x12>
 80014d8:	f000 f88c 	bl	80015f4 <_sbrk_r>
 80014dc:	6030      	str	r0, [r6, #0]
 80014de:	4621      	mov	r1, r4
 80014e0:	4628      	mov	r0, r5
 80014e2:	f000 f887 	bl	80015f4 <_sbrk_r>
 80014e6:	1c43      	adds	r3, r0, #1
 80014e8:	d00a      	beq.n	8001500 <sbrk_aligned+0x34>
 80014ea:	1cc4      	adds	r4, r0, #3
 80014ec:	f024 0403 	bic.w	r4, r4, #3
 80014f0:	42a0      	cmp	r0, r4
 80014f2:	d007      	beq.n	8001504 <sbrk_aligned+0x38>
 80014f4:	1a21      	subs	r1, r4, r0
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 f87c 	bl	80015f4 <_sbrk_r>
 80014fc:	3001      	adds	r0, #1
 80014fe:	d101      	bne.n	8001504 <sbrk_aligned+0x38>
 8001500:	f04f 34ff 	mov.w	r4, #4294967295
 8001504:	4620      	mov	r0, r4
 8001506:	bd70      	pop	{r4, r5, r6, pc}
 8001508:	200000a0 	.word	0x200000a0

0800150c <_malloc_r>:
 800150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001510:	1ccd      	adds	r5, r1, #3
 8001512:	f025 0503 	bic.w	r5, r5, #3
 8001516:	3508      	adds	r5, #8
 8001518:	2d0c      	cmp	r5, #12
 800151a:	bf38      	it	cc
 800151c:	250c      	movcc	r5, #12
 800151e:	2d00      	cmp	r5, #0
 8001520:	4607      	mov	r7, r0
 8001522:	db01      	blt.n	8001528 <_malloc_r+0x1c>
 8001524:	42a9      	cmp	r1, r5
 8001526:	d905      	bls.n	8001534 <_malloc_r+0x28>
 8001528:	230c      	movs	r3, #12
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	2600      	movs	r6, #0
 800152e:	4630      	mov	r0, r6
 8001530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001534:	4e2e      	ldr	r6, [pc, #184]	; (80015f0 <_malloc_r+0xe4>)
 8001536:	f000 f907 	bl	8001748 <__malloc_lock>
 800153a:	6833      	ldr	r3, [r6, #0]
 800153c:	461c      	mov	r4, r3
 800153e:	bb34      	cbnz	r4, 800158e <_malloc_r+0x82>
 8001540:	4629      	mov	r1, r5
 8001542:	4638      	mov	r0, r7
 8001544:	f7ff ffc2 	bl	80014cc <sbrk_aligned>
 8001548:	1c43      	adds	r3, r0, #1
 800154a:	4604      	mov	r4, r0
 800154c:	d14d      	bne.n	80015ea <_malloc_r+0xde>
 800154e:	6834      	ldr	r4, [r6, #0]
 8001550:	4626      	mov	r6, r4
 8001552:	2e00      	cmp	r6, #0
 8001554:	d140      	bne.n	80015d8 <_malloc_r+0xcc>
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	4631      	mov	r1, r6
 800155a:	4638      	mov	r0, r7
 800155c:	eb04 0803 	add.w	r8, r4, r3
 8001560:	f000 f848 	bl	80015f4 <_sbrk_r>
 8001564:	4580      	cmp	r8, r0
 8001566:	d13a      	bne.n	80015de <_malloc_r+0xd2>
 8001568:	6821      	ldr	r1, [r4, #0]
 800156a:	3503      	adds	r5, #3
 800156c:	1a6d      	subs	r5, r5, r1
 800156e:	f025 0503 	bic.w	r5, r5, #3
 8001572:	3508      	adds	r5, #8
 8001574:	2d0c      	cmp	r5, #12
 8001576:	bf38      	it	cc
 8001578:	250c      	movcc	r5, #12
 800157a:	4629      	mov	r1, r5
 800157c:	4638      	mov	r0, r7
 800157e:	f7ff ffa5 	bl	80014cc <sbrk_aligned>
 8001582:	3001      	adds	r0, #1
 8001584:	d02b      	beq.n	80015de <_malloc_r+0xd2>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	442b      	add	r3, r5
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	e00e      	b.n	80015ac <_malloc_r+0xa0>
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	1b52      	subs	r2, r2, r5
 8001592:	d41e      	bmi.n	80015d2 <_malloc_r+0xc6>
 8001594:	2a0b      	cmp	r2, #11
 8001596:	d916      	bls.n	80015c6 <_malloc_r+0xba>
 8001598:	1961      	adds	r1, r4, r5
 800159a:	42a3      	cmp	r3, r4
 800159c:	6025      	str	r5, [r4, #0]
 800159e:	bf18      	it	ne
 80015a0:	6059      	strne	r1, [r3, #4]
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	bf08      	it	eq
 80015a6:	6031      	streq	r1, [r6, #0]
 80015a8:	5162      	str	r2, [r4, r5]
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	4638      	mov	r0, r7
 80015ae:	f104 060b 	add.w	r6, r4, #11
 80015b2:	f000 f8cf 	bl	8001754 <__malloc_unlock>
 80015b6:	f026 0607 	bic.w	r6, r6, #7
 80015ba:	1d23      	adds	r3, r4, #4
 80015bc:	1af2      	subs	r2, r6, r3
 80015be:	d0b6      	beq.n	800152e <_malloc_r+0x22>
 80015c0:	1b9b      	subs	r3, r3, r6
 80015c2:	50a3      	str	r3, [r4, r2]
 80015c4:	e7b3      	b.n	800152e <_malloc_r+0x22>
 80015c6:	6862      	ldr	r2, [r4, #4]
 80015c8:	42a3      	cmp	r3, r4
 80015ca:	bf0c      	ite	eq
 80015cc:	6032      	streq	r2, [r6, #0]
 80015ce:	605a      	strne	r2, [r3, #4]
 80015d0:	e7ec      	b.n	80015ac <_malloc_r+0xa0>
 80015d2:	4623      	mov	r3, r4
 80015d4:	6864      	ldr	r4, [r4, #4]
 80015d6:	e7b2      	b.n	800153e <_malloc_r+0x32>
 80015d8:	4634      	mov	r4, r6
 80015da:	6876      	ldr	r6, [r6, #4]
 80015dc:	e7b9      	b.n	8001552 <_malloc_r+0x46>
 80015de:	230c      	movs	r3, #12
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4638      	mov	r0, r7
 80015e4:	f000 f8b6 	bl	8001754 <__malloc_unlock>
 80015e8:	e7a1      	b.n	800152e <_malloc_r+0x22>
 80015ea:	6025      	str	r5, [r4, #0]
 80015ec:	e7de      	b.n	80015ac <_malloc_r+0xa0>
 80015ee:	bf00      	nop
 80015f0:	2000009c 	.word	0x2000009c

080015f4 <_sbrk_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d06      	ldr	r5, [pc, #24]	; (8001610 <_sbrk_r+0x1c>)
 80015f8:	2300      	movs	r3, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	f7ff fa3e 	bl	8000a80 <_sbrk>
 8001604:	1c43      	adds	r3, r0, #1
 8001606:	d102      	bne.n	800160e <_sbrk_r+0x1a>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	b103      	cbz	r3, 800160e <_sbrk_r+0x1a>
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	bd38      	pop	{r3, r4, r5, pc}
 8001610:	200000a4 	.word	0x200000a4

08001614 <__sread>:
 8001614:	b510      	push	{r4, lr}
 8001616:	460c      	mov	r4, r1
 8001618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800161c:	f000 f8a0 	bl	8001760 <_read_r>
 8001620:	2800      	cmp	r0, #0
 8001622:	bfab      	itete	ge
 8001624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001626:	89a3      	ldrhlt	r3, [r4, #12]
 8001628:	181b      	addge	r3, r3, r0
 800162a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800162e:	bfac      	ite	ge
 8001630:	6563      	strge	r3, [r4, #84]	; 0x54
 8001632:	81a3      	strhlt	r3, [r4, #12]
 8001634:	bd10      	pop	{r4, pc}

08001636 <__swrite>:
 8001636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163a:	461f      	mov	r7, r3
 800163c:	898b      	ldrh	r3, [r1, #12]
 800163e:	05db      	lsls	r3, r3, #23
 8001640:	4605      	mov	r5, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4616      	mov	r6, r2
 8001646:	d505      	bpl.n	8001654 <__swrite+0x1e>
 8001648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800164c:	2302      	movs	r3, #2
 800164e:	2200      	movs	r2, #0
 8001650:	f000 f868 	bl	8001724 <_lseek_r>
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800165a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	4632      	mov	r2, r6
 8001662:	463b      	mov	r3, r7
 8001664:	4628      	mov	r0, r5
 8001666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800166a:	f000 b817 	b.w	800169c <_write_r>

0800166e <__sseek>:
 800166e:	b510      	push	{r4, lr}
 8001670:	460c      	mov	r4, r1
 8001672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001676:	f000 f855 	bl	8001724 <_lseek_r>
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	bf15      	itete	ne
 8001680:	6560      	strne	r0, [r4, #84]	; 0x54
 8001682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800168a:	81a3      	strheq	r3, [r4, #12]
 800168c:	bf18      	it	ne
 800168e:	81a3      	strhne	r3, [r4, #12]
 8001690:	bd10      	pop	{r4, pc}

08001692 <__sclose>:
 8001692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001696:	f000 b813 	b.w	80016c0 <_close_r>
	...

0800169c <_write_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d07      	ldr	r5, [pc, #28]	; (80016bc <_write_r+0x20>)
 80016a0:	4604      	mov	r4, r0
 80016a2:	4608      	mov	r0, r1
 80016a4:	4611      	mov	r1, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	602a      	str	r2, [r5, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f7ff f922 	bl	80008f4 <_write>
 80016b0:	1c43      	adds	r3, r0, #1
 80016b2:	d102      	bne.n	80016ba <_write_r+0x1e>
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	b103      	cbz	r3, 80016ba <_write_r+0x1e>
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
 80016bc:	200000a4 	.word	0x200000a4

080016c0 <_close_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4d06      	ldr	r5, [pc, #24]	; (80016dc <_close_r+0x1c>)
 80016c4:	2300      	movs	r3, #0
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	f7ff f9a3 	bl	8000a16 <_close>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d102      	bne.n	80016da <_close_r+0x1a>
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	b103      	cbz	r3, 80016da <_close_r+0x1a>
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	200000a4 	.word	0x200000a4

080016e0 <_fstat_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4d07      	ldr	r5, [pc, #28]	; (8001700 <_fstat_r+0x20>)
 80016e4:	2300      	movs	r3, #0
 80016e6:	4604      	mov	r4, r0
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	602b      	str	r3, [r5, #0]
 80016ee:	f7ff f99e 	bl	8000a2e <_fstat>
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	d102      	bne.n	80016fc <_fstat_r+0x1c>
 80016f6:	682b      	ldr	r3, [r5, #0]
 80016f8:	b103      	cbz	r3, 80016fc <_fstat_r+0x1c>
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	bd38      	pop	{r3, r4, r5, pc}
 80016fe:	bf00      	nop
 8001700:	200000a4 	.word	0x200000a4

08001704 <_isatty_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4d06      	ldr	r5, [pc, #24]	; (8001720 <_isatty_r+0x1c>)
 8001708:	2300      	movs	r3, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	602b      	str	r3, [r5, #0]
 8001710:	f7ff f99d 	bl	8000a4e <_isatty>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d102      	bne.n	800171e <_isatty_r+0x1a>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	b103      	cbz	r3, 800171e <_isatty_r+0x1a>
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	200000a4 	.word	0x200000a4

08001724 <_lseek_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4d07      	ldr	r5, [pc, #28]	; (8001744 <_lseek_r+0x20>)
 8001728:	4604      	mov	r4, r0
 800172a:	4608      	mov	r0, r1
 800172c:	4611      	mov	r1, r2
 800172e:	2200      	movs	r2, #0
 8001730:	602a      	str	r2, [r5, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f7ff f996 	bl	8000a64 <_lseek>
 8001738:	1c43      	adds	r3, r0, #1
 800173a:	d102      	bne.n	8001742 <_lseek_r+0x1e>
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	b103      	cbz	r3, 8001742 <_lseek_r+0x1e>
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	bd38      	pop	{r3, r4, r5, pc}
 8001744:	200000a4 	.word	0x200000a4

08001748 <__malloc_lock>:
 8001748:	4801      	ldr	r0, [pc, #4]	; (8001750 <__malloc_lock+0x8>)
 800174a:	f7ff be0b 	b.w	8001364 <__retarget_lock_acquire_recursive>
 800174e:	bf00      	nop
 8001750:	20000098 	.word	0x20000098

08001754 <__malloc_unlock>:
 8001754:	4801      	ldr	r0, [pc, #4]	; (800175c <__malloc_unlock+0x8>)
 8001756:	f7ff be06 	b.w	8001366 <__retarget_lock_release_recursive>
 800175a:	bf00      	nop
 800175c:	20000098 	.word	0x20000098

08001760 <_read_r>:
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4d07      	ldr	r5, [pc, #28]	; (8001780 <_read_r+0x20>)
 8001764:	4604      	mov	r4, r0
 8001766:	4608      	mov	r0, r1
 8001768:	4611      	mov	r1, r2
 800176a:	2200      	movs	r2, #0
 800176c:	602a      	str	r2, [r5, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	f7ff f934 	bl	80009dc <_read>
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	d102      	bne.n	800177e <_read_r+0x1e>
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	b103      	cbz	r3, 800177e <_read_r+0x1e>
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	200000a4 	.word	0x200000a4

08001784 <_init>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	bf00      	nop
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr

08001790 <_fini>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	bf00      	nop
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr
