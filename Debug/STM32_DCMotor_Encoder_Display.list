
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002090  08002090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002120  08002120  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000054  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e23  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cdc  00000000  00000000  00022eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00023b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015191  00000000  00000000  00023fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003e8f  00000000  00000000  00039171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007632d  00000000  00000000  0003d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b332d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000eb8  00000000  00000000  000b3380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002078 	.word	0x08002078

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	08002078 	.word	0x08002078

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 8000a08:	4b52      	ldr	r3, [pc, #328]	; (8000b54 <sysClockConfig+0x150>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <sysClockConfig+0x150>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 8000a14:	4b50      	ldr	r3, [pc, #320]	; (8000b58 <sysClockConfig+0x154>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <sysClockConfig+0x154>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 8000a20:	bf00      	nop
 8000a22:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <sysClockConfig+0x154>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f9      	beq.n	8000a22 <sysClockConfig+0x1e>

	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <sysClockConfig+0x154>)
 8000a30:	4a49      	ldr	r2, [pc, #292]	; (8000b58 <sysClockConfig+0x154>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <sysClockConfig+0x154>)
 8000a38:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <sysClockConfig+0x154>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 8000a3e:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <sysClockConfig+0x154>)
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <sysClockConfig+0x154>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 8000a46:	4b44      	ldr	r3, [pc, #272]	; (8000b58 <sysClockConfig+0x154>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <sysClockConfig+0x154>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 8000a52:	4b41      	ldr	r3, [pc, #260]	; (8000b58 <sysClockConfig+0x154>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a40      	ldr	r2, [pc, #256]	; (8000b58 <sysClockConfig+0x154>)
 8000a58:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a5c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <sysClockConfig+0x154>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <sysClockConfig+0x154>)
 8000a64:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000a68:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <sysClockConfig+0x154>)
 8000a6c:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <sysClockConfig+0x154>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <sysClockConfig+0x154>)
 8000a74:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <sysClockConfig+0x154>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <sysClockConfig+0x154>)
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <sysClockConfig+0x154>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 8000a82:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <sysClockConfig+0x154>)
 8000a84:	4a34      	ldr	r2, [pc, #208]	; (8000b58 <sysClockConfig+0x154>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <sysClockConfig+0x154>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <sysClockConfig+0x154>)
 8000a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a94:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <sysClockConfig+0x154>)
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <sysClockConfig+0x154>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <sysClockConfig+0x154>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <sysClockConfig+0x154>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <sysClockConfig+0x154>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <sysClockConfig+0x154>)
 8000ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 8000ab6:	bf00      	nop
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <sysClockConfig+0x154>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <sysClockConfig+0x154>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <sysClockConfig+0x154>)
 8000aca:	f043 0303 	orr.w	r3, r3, #3
 8000ace:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 8000ad0:	bf00      	nop
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <sysClockConfig+0x154>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f003 030c 	and.w	r3, r3, #12
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f9      	beq.n	8000ad2 <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <sysClockConfig+0x154>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <sysClockConfig+0x154>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <sysClockConfig+0x154>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <sysClockConfig+0x154>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <sysClockConfig+0x154>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <sysClockConfig+0x154>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <sysClockConfig+0x154>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <sysClockConfig+0x154>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM3, TIM4, TIM8, TIM15
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM3EN_Pos);
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <sysClockConfig+0x154>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <sysClockConfig+0x154>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <sysClockConfig+0x154>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <sysClockConfig+0x154>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM8EN_Pos);
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <sysClockConfig+0x154>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <sysClockConfig+0x154>)
 8000b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM15EN_Pos);
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <sysClockConfig+0x154>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <sysClockConfig+0x154>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <sysClockConfig+0x154>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <sysClockConfig+0x154>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60


}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40021000 	.word	0x40021000

08000b5c <rotaryEncoderRotation>:
 * State machine for detecting encoder rotation.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 *
 */
int32_t rotaryEncoderRotation()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4829      	ldr	r0, [pc, #164]	; (8000c0c <rotaryEncoderRotation+0xb0>)
 8000b66:	f000 f933 	bl	8000dd0 <readPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b25a      	sxtb	r2, r3
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <rotaryEncoderRotation+0xb4>)
 8000b70:	701a      	strb	r2, [r3, #0]
currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	4825      	ldr	r0, [pc, #148]	; (8000c0c <rotaryEncoderRotation+0xb0>)
 8000b78:	f000 f92a 	bl	8000dd0 <readPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <rotaryEncoderRotation+0xb8>)
 8000b82:	701a      	strb	r2, [r3, #0]

  if (currentStateCLK != currentStateDT) { 			//encoder is moving
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <rotaryEncoderRotation+0xb4>)
 8000b86:	f993 2000 	ldrsb.w	r2, [r3]
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <rotaryEncoderRotation+0xb8>)
 8000b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d010      	beq.n	8000bb6 <rotaryEncoderRotation+0x5a>
    if (currentStateCLK != lastStateCLK) { 			//CLK changed first; CW
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <rotaryEncoderRotation+0xb4>)
 8000b96:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <rotaryEncoderRotation+0xbc>)
 8000b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d003      	beq.n	8000bae <rotaryEncoderRotation+0x52>
    	rotationDirection = 1;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <rotaryEncoderRotation+0xc0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e01b      	b.n	8000be6 <rotaryEncoderRotation+0x8a>
    }
     else {											//else DT changed first; CCW
    	rotationDirection = -1;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <rotaryEncoderRotation+0xc0>)
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e017      	b.n	8000be6 <rotaryEncoderRotation+0x8a>
    }
  }
    else { 							    		    //both pins are at same state, so encoder has stopped moving
       if (currentStateCLK != lastStateCLK) {
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <rotaryEncoderRotation+0xb4>)
 8000bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <rotaryEncoderRotation+0xbc>)
 8000bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d008      	beq.n	8000bda <rotaryEncoderRotation+0x7e>
          counter += rotationDirection;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <rotaryEncoderRotation+0xc0>)
 8000bca:	f993 3000 	ldrsb.w	r3, [r3]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000bd8:	6013      	str	r3, [r2, #0]
       }
       lastStateCLK = currentStateCLK;			    //update last CLK state to be ready to detect next movement
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <rotaryEncoderRotation+0xb4>)
 8000bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <rotaryEncoderRotation+0xbc>)
 8000be4:	801a      	strh	r2, [r3, #0]
    }



  if (counter < 0) 								    //keep counter between 0 and 100
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da03      	bge.n	8000bf6 <rotaryEncoderRotation+0x9a>
    counter = 0;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e006      	b.n	8000c04 <rotaryEncoderRotation+0xa8>
  else if (counter > 100)
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	dd02      	ble.n	8000c04 <rotaryEncoderRotation+0xa8>
   counter = 100;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000c00:	2264      	movs	r2, #100	; 0x64
 8000c02:	601a      	str	r2, [r3, #0]

 return counter;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <rotaryEncoderRotation+0xc4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	20000082 	.word	0x20000082
 8000c14:	20000083 	.word	0x20000083
 8000c18:	20000080 	.word	0x20000080
 8000c1c:	20000088 	.word	0x20000088
 8000c20:	20000084 	.word	0x20000084

08000c24 <gpioInit>:
 * Function to set the GPIO registers.
 * Parameters: none
 * Returns: none
 */

void gpioInit(){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x03FFFFFF);
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c32:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8000c36:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFFFFFC3F);
 8000c38:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <gpioInit+0x1a4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a62      	ldr	r2, [pc, #392]	; (8000dc8 <gpioInit+0x1a4>)
 8000c3e:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8000c42:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <gpioInit+0x1a8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <gpioInit+0x1a8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]



	//set PB13, PB14, PB15 set as inputs (rotary encoder)
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 8000c4e:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <gpioInit+0x1a4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <gpioInit+0x1a4>)
 8000c54:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000c58:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 8000c5a:	4b5b      	ldr	r3, [pc, #364]	; (8000dc8 <gpioInit+0x1a4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a5a      	ldr	r2, [pc, #360]	; (8000dc8 <gpioInit+0x1a4>)
 8000c60:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000c64:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 8000c66:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <gpioInit+0x1a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a57      	ldr	r2, [pc, #348]	; (8000dc8 <gpioInit+0x1a4>)
 8000c6c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000c70:	6013      	str	r3, [r2, #0]

	//set pull-up pull-down register for inputs
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8000c72:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <gpioInit+0x1a4>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a54      	ldr	r2, [pc, #336]	; (8000dc8 <gpioInit+0x1a4>)
 8000c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c7c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 8000c7e:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <gpioInit+0x1a4>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4a51      	ldr	r2, [pc, #324]	; (8000dc8 <gpioInit+0x1a4>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <gpioInit+0x1a4>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <gpioInit+0x1a4>)
 8000c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c94:	60d3      	str	r3, [r2, #12]



	//set PA6, PA9, PC7 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);  //Display_DC
 8000c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);  //Motor Driver In2
 8000ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);  //Motor Driver In1
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <gpioInit+0x1a8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <gpioInit+0x1a8>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6013      	str	r3, [r2, #0]

	//set PA6, PA9, PC7 as push-pull output
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE6_Pos);
 8000cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cd0:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 8000cd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce0:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <gpioInit+0x1a8>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4a39      	ldr	r2, [pc, #228]	; (8000dcc <gpioInit+0x1a8>)
 8000ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cec:	6053      	str	r3, [r2, #4]



	//set PA11, PA12 to alternate function mode (TIM4)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 8000cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cfc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8000cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0c:	6013      	str	r3, [r2, #0]

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 8000d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d18:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000d1c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 8000d1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d28:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000d2c:	6253      	str	r3, [r2, #36]	; 0x24

	//set PB6 to alternate function mode AF5 (TIM8)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <gpioInit+0x1a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <gpioInit+0x1a4>)
 8000d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d38:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <gpioInit+0x1a4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <gpioInit+0x1a4>)
 8000d40:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000d44:	6213      	str	r3, [r2, #32]

	//set PA4, PA5, PA7 to alternate function mode (SPI1)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE4_Pos);
 8000d46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d54:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 8000d56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 8000d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS
 8000d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d80:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000d84:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 8000d86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d90:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000d94:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 8000d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da0:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000da4:	6213      	str	r3, [r2, #32]
	//set PA0? to ADC input



	//set PB1 as output for LED debugging
	GPIOB->MODER |= (0x01 << GPIO_MODER_MODE1_Pos);
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <gpioInit+0x1a4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <gpioInit+0x1a4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0x01 << GPIO_MODER_MODE1_Pos);
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <gpioInit+0x1a4>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <gpioInit+0x1a4>)
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6053      	str	r3, [r2, #4]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 * Returns: PIN_LOW or PIN_HIGH for state of pin.
 */

int16_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & GPIO_PIN_x) != PIN_LOW) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <readPin+0x1c>
		return PIN_HIGH;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <readPin+0x1e>
	}
	else {
		return PIN_LOW;
 8000dec:	2300      	movs	r3, #0
	}
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <setPin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void setPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x, pinstate_t pinState){
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]
 8000e06:	4613      	mov	r3, r2
 8000e08:	707b      	strb	r3, [r7, #1]
	if (pinState == PIN_LOW){
 8000e0a:	787b      	ldrb	r3, [r7, #1]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d105      	bne.n	8000e1c <setPin+0x22>
	GPIOx->BSRR = (GPIO_PIN_x << 16U);          //set pin LOW
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	041b      	lsls	r3, r3, #16
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	619a      	str	r2, [r3, #24]
	}
	else if (pinState == PIN_HIGH){
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
	}
}
 8000e1a:	e005      	b.n	8000e28 <setPin+0x2e>
	else if (pinState == PIN_HIGH){
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d102      	bne.n	8000e28 <setPin+0x2e>
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <togglePin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void togglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]

	if ((GPIOx->ODR & GPIO_PIN_x) != PIN_LOW) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d005      	beq.n	8000e58 <togglePin+0x24>
		GPIOx->BSRR = (GPIO_PIN_x << 16U);    //set pin LOW
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	619a      	str	r2, [r3, #24]
	}
	else {
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
	}
}
 8000e56:	e002      	b.n	8000e5e <togglePin+0x2a>
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
 8000e58:	887a      	ldrh	r2, [r7, #2]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	619a      	str	r2, [r3, #24]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <interruptInit>:
/**
 * Function to initialize interrupts.
 * Parameters: none
 * Returns: none
 */
void interruptInit(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c

//GPIO interrupt for encoder switch
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);		//EXTI Line15 Interrupt, PB15 (Rotary Encoder SW)
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <interruptInit+0x58>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <interruptInit+0x58>)
 8000f06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0a:	6153      	str	r3, [r2, #20]
EXTI->IMR1 |= (0x01 << EXTI_IMR1_IM15_Pos);     				//set interrupt mask register
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <interruptInit+0x5c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <interruptInit+0x5c>)
 8000f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f16:	6013      	str	r3, [r2, #0]
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);					//trigger on falling edge
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <interruptInit+0x5c>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <interruptInit+0x5c>)
 8000f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f22:	60d3      	str	r3, [r2, #12]
NVIC_SetPriority(EXTI15_10_IRQn, 0);							//set priority and enable EXTI15_10_IRQHandler
 8000f24:	2100      	movs	r1, #0
 8000f26:	2028      	movs	r0, #40	; 0x28
 8000f28:	f7ff ffbe 	bl	8000ea8 <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2c:	2028      	movs	r0, #40	; 0x28
 8000f2e:	f7ff ff9d 	bl	8000e6c <__NVIC_EnableIRQ>

//enable timer interrupt for TIM3
NVIC_SetPriority(TIM3_IRQn, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	201d      	movs	r0, #29
 8000f36:	f7ff ffb7 	bl	8000ea8 <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM3_IRQn);
 8000f3a:	201d      	movs	r0, #29
 8000f3c:	f7ff ff96 	bl	8000e6c <__NVIC_EnableIRQ>

//enable timer interrupt for TIM15
NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 8000f40:	2100      	movs	r1, #0
 8000f42:	2018      	movs	r0, #24
 8000f44:	f7ff ffb0 	bl	8000ea8 <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f48:	2018      	movs	r0, #24
 8000f4a:	f7ff ff8f 	bl	8000e6c <__NVIC_EnableIRQ>


}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40010000 	.word	0x40010000
 8000f58:	40010400 	.word	0x40010400

08000f5c <EXTI15_10_IRQHandler>:
/**
 * IRQ Handler and ISR for EXTI lines 10-15 interrupts.
 * Parameters: none
 * Returns: none
 */
void EXTI15_10_IRQHandler(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

	if ((EXTI->PR1 & (ENC_SW_PIN)) != 0) {				       //check if the encoder switch pin is the one triggering interrupt
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <EXTI15_10_IRQHandler+0x58>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d021      	beq.n	8000fb0 <EXTI15_10_IRQHandler+0x54>
		EXTI->PR1 = (ENC_SW_PIN);						       //clear interrupt pending bit
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <EXTI15_10_IRQHandler+0x58>)
 8000f6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f72:	615a      	str	r2, [r3, #20]
		if (TIM8->CCR1 == 0) {								   //check if motor is stopped
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <EXTI15_10_IRQHandler+0x5c>)
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d115      	bne.n	8000fa8 <EXTI15_10_IRQHandler+0x4c>
		   switch (gMotorDirection) {							//switch motor direction based on current setting
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <EXTI15_10_IRQHandler+0x60>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <EXTI15_10_IRQHandler+0x30>
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d007      	beq.n	8000f9a <EXTI15_10_IRQHandler+0x3e>
 8000f8a:	e00e      	b.n	8000faa <EXTI15_10_IRQHandler+0x4e>
			   case MOTOR_FORWARD:
			      setMotorDirection(MOTOR_REVERSE);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 f8c5 	bl	800111c <setMotorDirection>
			      gMotorDirection = MOTOR_REVERSE;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <EXTI15_10_IRQHandler+0x60>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	801a      	strh	r2, [r3, #0]
			      break;
 8000f98:	e007      	b.n	8000faa <EXTI15_10_IRQHandler+0x4e>
			   case MOTOR_REVERSE:
				   setMotorDirection(MOTOR_FORWARD);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f8be 	bl	800111c <setMotorDirection>
				   gMotorDirection = MOTOR_FORWARD;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <EXTI15_10_IRQHandler+0x60>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
				   break;
 8000fa6:	e000      	b.n	8000faa <EXTI15_10_IRQHandler+0x4e>
		   }
		   //else {
			   //blink screen
		   //}
		}
 8000fa8:	bf00      	nop
		printf("switch interrupt\n");
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <EXTI15_10_IRQHandler+0x64>)
 8000fac:	f000 fbd4 	bl	8001758 <puts>

		//These don't work? Interrupt keeps firing.
		//NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		//NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010400 	.word	0x40010400
 8000fb8:	40013400 	.word	0x40013400
 8000fbc:	2000008e 	.word	0x2000008e
 8000fc0:	08002090 	.word	0x08002090

08000fc4 <TIM3_IRQHandler>:
/**
 * IRQ Handler and ISR for TIM3 interrupts.
 * Parameters: none
 * Returns: none
 */
void TIM3_IRQHandler(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (TIM_SR_UIF)) != 0) {				//check if the interrupt is caused by update event
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <TIM3_IRQHandler+0x54>)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01e      	beq.n	8001012 <TIM3_IRQHandler+0x4e>
	   TIM3->SR = ~(TIM_SR_UIF);					    //clear interrupt pending bit
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <TIM3_IRQHandler+0x54>)
 8000fd6:	f06f 0201 	mvn.w	r2, #1
 8000fda:	611a      	str	r2, [r3, #16]
	   gRotaryEncoderCount = rotaryEncoderRotation();				//check encoder movement, update count
 8000fdc:	f7ff fdbe 	bl	8000b5c <rotaryEncoderRotation>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <TIM3_IRQHandler+0x58>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	   setMotorDuty(gRotaryEncoderCount);					//set motor duty cycle based on encoder count
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <TIM3_IRQHandler+0x58>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f8c0 	bl	8001174 <setMotorDuty>
	   gMotorEncoderCount = TIM4->CNT;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <TIM3_IRQHandler+0x5c>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <TIM3_IRQHandler+0x60>)
 8000ffc:	801a      	strh	r2, [r3, #0]
	   gMotorSpeed = measureMotorSpeed();				 //measure the motor speed
 8000ffe:	f000 f8d3 	bl	80011a8 <measureMotorSpeed>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <TIM3_IRQHandler+0x64>)
 8001008:	801a      	strh	r2, [r3, #0]
	//measure motor temperature (consider longer time)
	//update display based on motor speed and temp
	   togglePin(DBG_LED_PORT, DBG_LED_PIN);
 800100a:	2102      	movs	r1, #2
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <TIM3_IRQHandler+0x68>)
 800100e:	f7ff ff11 	bl	8000e34 <togglePin>
	}
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40000400 	.word	0x40000400
 800101c:	2000008a 	.word	0x2000008a
 8001020:	40000800 	.word	0x40000800
 8001024:	2000008c 	.word	0x2000008c
 8001028:	20000090 	.word	0x20000090
 800102c:	48000400 	.word	0x48000400

08001030 <TIM1_BRK_TIM15_IRQHandler>:
/**
 * IRQ Handler and ISR for "TIM1 Break, Transition error, Index error and TIM15 global interrupt"
 * Parameters: none
 * Returns: none
 */
void TIM1_BRK_TIM15_IRQHandler(void){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	if ((TIM15->SR & (TIM_SR_UIF)) != 0) {				//check if the interrupt is caused by TIM15 update event
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <TIM1_BRK_TIM15_IRQHandler+0x18>
		TIM15->SR = ~(TIM_SR_UIF);						//clear interrupt pending bit
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001042:	f06f 0201 	mvn.w	r2, #1
 8001046:	611a      	str	r2, [r3, #16]


	}
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40014000 	.word	0x40014000

08001058 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001060:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001064:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001070:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001074:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001078:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00b      	beq.n	8001098 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001080:	e000      	b.n	8001084 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001082:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001084:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f9      	beq.n	8001082 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800108e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <main>:
volatile int16_t gMotorSpeed = 0;
volatile int16_t gTemperature = 0;


int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	sysClockConfig();
 80010ac:	f7ff fcaa 	bl	8000a04 <sysClockConfig>
	gpioInit();
 80010b0:	f7ff fdb8 	bl	8000c24 <gpioInit>
	interruptInit();
 80010b4:	f7ff ff22 	bl	8000efc <interruptInit>
	TIM3Init();
 80010b8:	f000 f9a4 	bl	8001404 <TIM3Init>
	TIM4Init();
 80010bc:	f000 f9c0 	bl	8001440 <TIM4Init>
	TIM8Init();
 80010c0:	f000 fa0a 	bl	80014d8 <TIM8Init>
	TIM15Init();
 80010c4:	f000 fa54 	bl	8001570 <TIM15Init>
	setMotorDirection(MOTOR_FORWARD);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f827 	bl	800111c <setMotorDirection>
	setMotorDuty(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f850 	bl	8001174 <setMotorDuty>
	printf("Initialization done.\n");
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <main+0x34>)
 80010d6:	f000 fb3f 	bl	8001758 <puts>

	while(1){
 80010da:	e7fe      	b.n	80010da <main+0x32>
 80010dc:	080020a4 	.word	0x080020a4

080010e0 <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  int i=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e009      	b.n	800110a <_write+0x2a>
    ITM_SendChar((*ptr++));
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	60ba      	str	r2, [r7, #8]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ffaa 	bl	8001058 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	dbf1      	blt.n	80010f6 <_write+0x16>
  return len;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <setMotorDirection>:
/**
 * Function to set the desired direction of the motor.
 * Parameters: Direction of the motor, either forward or reverse.
 * Returns: none
 */
void setMotorDirection(motordirection_t direction){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
			switch (direction) {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <setMotorDirection+0x16>
 800112c:	2b01      	cmp	r3, #1
 800112e:	d00d      	beq.n	800114c <setMotorDirection+0x30>
				case MOTOR_REVERSE:
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
					break;
			}
}
 8001130:	e019      	b.n	8001166 <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_HIGH);		//in1 HIGH, in2 LOW for forward
 8001132:	2201      	movs	r2, #1
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <setMotorDirection+0x54>)
 8001138:	f7ff fe5f 	bl	8000dfa <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_LOW);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f7ff fe58 	bl	8000dfa <setPin>
					break;
 800114a:	e00c      	b.n	8001166 <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
 800114c:	2200      	movs	r2, #0
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <setMotorDirection+0x54>)
 8001152:	f7ff fe52 	bl	8000dfa <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f7ff fe4b 	bl	8000dfa <setPin>
					break;
 8001164:	bf00      	nop
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	48000800 	.word	0x48000800

08001174 <setMotorDuty>:
/**
 * Function to set the desired speed of the motor.
 * Parameters: Desired duty cycle from 1-100.
 * Returns: none
 */
void setMotorDuty(int16_t duty){					//input speed, no output
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	if (duty <= 100 && duty >= 0){
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	dc07      	bgt.n	8001196 <setMotorDuty+0x22>
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db03      	blt.n	8001196 <setMotorDuty+0x22>
	   TIM8->CCR1 = duty;							//set duty cycle by CCR1 register
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <setMotorDuty+0x30>)
 8001190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001194:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40013400 	.word	0x40013400

080011a8 <measureMotorSpeed>:
/**
 * Function to measure the speed of the motor.
 * Parameters: none
 * Returns: Speed of the motor in RPM
 */
int16_t measureMotorSpeed(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	motorEncoder.currentCount = gMotorEncoderCount;
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <measureMotorSpeed+0xd4>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <measureMotorSpeed+0xd8>)
 80011b6:	601a      	str	r2, [r3, #0]
	motorEncoder.counterDirection = (TIM4->CR1 & TIM_CR1_DIR);
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <measureMotorSpeed+0xdc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <measureMotorSpeed+0xd8>)
 80011c6:	819a      	strh	r2, [r3, #12]
	if (motorEncoder.currentCount == motorEncoder.previousCount) {						//motor not moving, speed is zero
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <measureMotorSpeed+0xd8>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <measureMotorSpeed+0xd8>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d106      	bne.n	80011e2 <measureMotorSpeed+0x3a>
		motorEncoder.motorRPM = 0;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <measureMotorSpeed+0xd8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	81da      	strh	r2, [r3, #14]
		return motorEncoder.motorRPM;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <measureMotorSpeed+0xd8>)
 80011dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011e0:	e049      	b.n	8001276 <measureMotorSpeed+0xce>
		}


	if (motorEncoder.counterDirection == 0){											//counter is counting up
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <measureMotorSpeed+0xd8>)
 80011e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11a      	bne.n	8001222 <measureMotorSpeed+0x7a>
			if (motorEncoder.currentCount < motorEncoder.previousCount){				//no overflow, counter overflow has occurred
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <measureMotorSpeed+0xd8>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <measureMotorSpeed+0xd8>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	da0c      	bge.n	8001212 <measureMotorSpeed+0x6a>
			   motorEncoder.countDifference = motorEncoder.currentCount + (MOTOR_ENCODER_TIMER_ARR - motorEncoder.previousCount);
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <measureMotorSpeed+0xd8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <measureMotorSpeed+0xdc>)
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <measureMotorSpeed+0xd8>)
 8001204:	6852      	ldr	r2, [r2, #4]
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	440b      	add	r3, r1
 800120a:	461a      	mov	r2, r3
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <measureMotorSpeed+0xd8>)
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	e021      	b.n	8001256 <measureMotorSpeed+0xae>
			}
			else {																		//calculate difference normally
				motorEncoder.countDifference = motorEncoder.currentCount - motorEncoder.previousCount;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <measureMotorSpeed+0xd8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <measureMotorSpeed+0xd8>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <measureMotorSpeed+0xd8>)
 800121e:	6093      	str	r3, [r2, #8]
 8001220:	e019      	b.n	8001256 <measureMotorSpeed+0xae>
			}
	}

	else {																				//counter is counting down
		if (motorEncoder.currentCount > motorEncoder.previousCount){					//counter overflow has occurred
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <measureMotorSpeed+0xd8>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <measureMotorSpeed+0xd8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dd0c      	ble.n	8001248 <measureMotorSpeed+0xa0>
			motorEncoder.countDifference = motorEncoder.previousCount + (MOTOR_ENCODER_TIMER_ARR - motorEncoder.currentCount);
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <measureMotorSpeed+0xd8>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <measureMotorSpeed+0xdc>)
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <measureMotorSpeed+0xd8>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	440b      	add	r3, r1
 8001240:	461a      	mov	r2, r3
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <measureMotorSpeed+0xd8>)
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e006      	b.n	8001256 <measureMotorSpeed+0xae>
		}
		else {																			//no overflow, calculate difference normally
		   motorEncoder.countDifference = motorEncoder.previousCount - motorEncoder.currentCount;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <measureMotorSpeed+0xd8>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <measureMotorSpeed+0xd8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <measureMotorSpeed+0xd8>)
 8001254:	6093      	str	r3, [r2, #8]
		}

	}

	motorEncoder.motorRPM = converttoRPM(motorEncoder.countDifference);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <measureMotorSpeed+0xd8>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f814 	bl	8001288 <converttoRPM>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <measureMotorSpeed+0xd8>)
 8001266:	81da      	strh	r2, [r3, #14]
	motorEncoder.previousCount = motorEncoder.currentCount;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <measureMotorSpeed+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <measureMotorSpeed+0xd8>)
 800126e:	6053      	str	r3, [r2, #4]

	return motorEncoder.motorRPM;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <measureMotorSpeed+0xd8>)
 8001272:	f9b3 300e 	ldrsh.w	r3, [r3, #14]

}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000008c 	.word	0x2000008c
 8001280:	20000094 	.word	0x20000094
 8001284:	40000800 	.word	0x40000800

08001288 <converttoRPM>:
/**
 * Function to convert encoder count difference and sampling rate to RPM.
 * Parameters: none
 * Returns: Speed of the motor in RPM
 */
int16_t converttoRPM(int32_t encoderCountDifference){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	int16_t RPM = (encoderCountDifference * 60) / (MOTOR_ENCODER_CPR * MOTOR_GEARBOX_RATIO * MOTOR_ENCODER_SAMPLING_TIME);
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f90e 	bl	80004bc <__aeabi_i2d>
 80012a0:	a309      	add	r3, pc, #36	; (adr r3, 80012c8 <converttoRPM+0x40>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff fa9d 	bl	80007e4 <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fb7f 	bl	80009b4 <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	81fb      	strh	r3, [r7, #14]
	return RPM;
 80012ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	f12c27a6 	.word	0xf12c27a6
 80012cc:	404b3280 	.word	0x404b3280

080012d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
  }

  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_close>:
  }
  return len;
}

int _close(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	605a      	str	r2, [r3, #4]
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_isatty>:

int _isatty(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f000 f938 	bl	8001618 <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20008000 	.word	0x20008000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	200000b8 	.word	0x200000b8

080013e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <TIM3Init>:
/**
 * Function to initialize and start Timer 3. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM3Init(){
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM3->CR1 |= (0x01 << TIM_CR1_URS_Pos);		//interrupts only occur on update (overflow/underflow)
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <TIM3Init+0x38>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <TIM3Init+0x38>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//update interrupt is enabled
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <TIM3Init+0x38>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <TIM3Init+0x38>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	60d3      	str	r3, [r2, #12]
	TIM3->PSC = 85-1; 						    //prescalar value (set to yield interrupt at 30 Hz)
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <TIM3Init+0x38>)
 8001422:	2254      	movs	r2, #84	; 0x54
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CR1 |= (0x01 << TIM_CR1_CEN_Pos);		//counter is enabled
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <TIM3Init+0x38>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <TIM3Init+0x38>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]


}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40000400 	.word	0x40000400

08001440 <TIM4Init>:
/**
 * Function to initialize and start Timer 4. This timer is used in encoder mode to read the motor encoder.
 * Parameters: none
 * Returns: none
 */
void TIM4Init(){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);      //both inputs are active on both rising and falling edges
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <TIM4Init+0x94>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <TIM4Init+0x94>)
 800144a:	f043 0303 	orr.w	r3, r3, #3
 800144e:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <TIM4Init+0x94>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <TIM4Init+0x94>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <TIM4Init+0x94>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <TIM4Init+0x94>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);   //set input filter on capture 1
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <TIM4Init+0x94>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <TIM4Init+0x94>)
 800146e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001472:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);   //set input filter on capture 2
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <TIM4Init+0x94>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <TIM4Init+0x94>)
 800147a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800147e:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);    //tim_ti1fp1 noninverted
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <TIM4Init+0x94>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <TIM4Init+0x94>)
 8001486:	f023 0302 	bic.w	r3, r3, #2
 800148a:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <TIM4Init+0x94>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <TIM4Init+0x94>)
 8001492:	f023 0308 	bic.w	r3, r3, #8
 8001496:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);    //tim_ti2fp2 noninverted
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <TIM4Init+0x94>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <TIM4Init+0x94>)
 800149e:	f023 0320 	bic.w	r3, r3, #32
 80014a2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <TIM4Init+0x94>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <TIM4Init+0x94>)
 80014aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ae:	6213      	str	r3, [r2, #32]
	//TIM4->CCER |= (0x01 << TIM_CCER_CC1E_Pos);
	//TIM4->CCER |= (0x01 << TIM_CCER_CC2E_Pos);
	TIM4->PSC = 1-1;                           	   //prescalar set to 0
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <TIM4Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	   //enable auto-reload preload
	TIM4->ARR = 0xFFFF;                     	   //auto-reload register
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <TIM4Init+0x94>)
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <TIM4Init+0x94>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <TIM4Init+0x94>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40000800 	.word	0x40000800

080014d8 <TIM8Init>:
/**
 * Function to initialize and start Timer 8. This timer is used to generate PWM output for motor control.
 * Parameters: none
 * Returns: none
 */
void TIM8Init(){
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM8->CCMR1 |= (0x06 << TIM_CCMR1_OC1M_Pos);		//set PWM mode 1
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <TIM8Init+0x94>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a22      	ldr	r2, [pc, #136]	; (800156c <TIM8Init+0x94>)
 80014e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014e6:	6193      	str	r3, [r2, #24]
	TIM8->CCMR1 |= (0x01 << TIM_CCMR1_OC1PE_Pos);		//preload register is enabled, for duty cycle
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <TIM8Init+0x94>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <TIM8Init+0x94>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);			//auto-reload preload is enabled, for frequency
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <TIM8Init+0x94>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	; (800156c <TIM8Init+0x94>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	6013      	str	r3, [r2, #0]
	TIM8->CR1 &= ~(0x03 << TIM_CR1_CMS_Pos);			//edge-aligned mode
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <TIM8Init+0x94>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <TIM8Init+0x94>)
 8001506:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800150a:	6013      	str	r3, [r2, #0]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);			//OC1 active high
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <TIM8Init+0x94>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <TIM8Init+0x94>)
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	6213      	str	r3, [r2, #32]
	TIM8->CCER |= (0x01 << TIM_CCER_CC1E_Pos);			//OC1 is output on the output pin
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <TIM8Init+0x94>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <TIM8Init+0x94>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1NE_Pos);		//tim_oc1n signal is not output
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <TIM8Init+0x94>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <TIM8Init+0x94>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6213      	str	r3, [r2, #32]
	TIM8->BDTR |= (0x01 << TIM_BDTR_MOE_Pos);			//main output enabled
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <TIM8Init+0x94>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <TIM8Init+0x94>)
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->ARR = 100-1;									//auto-reload, corresponds with PWM frequency
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <TIM8Init+0x94>)
 800153e:	2263      	movs	r2, #99	; 0x63
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM8->PSC = 170-1;	   								//prescalar of 18, so the input clock is 10Mhz
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <TIM8Init+0x94>)
 8001544:	22a9      	movs	r2, #169	; 0xa9
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->EGR |= (0x01 << TIM_EGR_UG_Pos);				//initialize shadow registers before counter starts
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <TIM8Init+0x94>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <TIM8Init+0x94>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6153      	str	r3, [r2, #20]
	TIM8->CR1 |= (0x01 << TIM_CR1_CEN_Pos);             //counter is enabled
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <TIM8Init+0x94>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <TIM8Init+0x94>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]

}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40013400 	.word	0x40013400

08001570 <TIM15Init>:
/**
 * Function to initialize and start Timer 15. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM15Init(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM15->CR1 |= (0x01 << TIM_CR1_URS_Pos);	//interrupts only occur on update (overflow/underflow)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <TIM15Init+0x50>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <TIM15Init+0x50>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6013      	str	r3, [r2, #0]
	TIM15->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//update interrupt is enabled
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <TIM15Init+0x50>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <TIM15Init+0x50>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	60d3      	str	r3, [r2, #12]
	TIM15->PSC = 1700-1; 						//prescalar value, so the input clock is 100Mhz
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <TIM15Init+0x50>)
 800158e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->ARR = 50000-1;						//auto-reload, so this timer will trigger every 500ms
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <TIM15Init+0x50>)
 8001596:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	//enable auto-reload
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <TIM15Init+0x50>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <TIM15Init+0x50>)
 80015a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a6:	6013      	str	r3, [r2, #0]
	TIM15->CR1 |= (0x01 << TIM_CR1_CEN_Pos);	//counter is enabled
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <TIM15Init+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <TIM15Init+0x50>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]


}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40014000 	.word	0x40014000

080015c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c8:	f7ff ff0a 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015f2:	f000 f817 	bl	8001624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff fd57 	bl	80010a8 <main>

080015fa <LoopForever>:

LoopForever:
  b LoopForever
 80015fa:	e7fe      	b.n	80015fa <LoopForever>
  ldr   r0, =_estack
 80015fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001608:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 800160c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001610:	200000b8 	.word	0x200000b8

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <__errno>:
 8001618:	4b01      	ldr	r3, [pc, #4]	; (8001620 <__errno+0x8>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000

08001624 <__libc_init_array>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4d0d      	ldr	r5, [pc, #52]	; (800165c <__libc_init_array+0x38>)
 8001628:	4c0d      	ldr	r4, [pc, #52]	; (8001660 <__libc_init_array+0x3c>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	2600      	movs	r6, #0
 8001630:	42a6      	cmp	r6, r4
 8001632:	d109      	bne.n	8001648 <__libc_init_array+0x24>
 8001634:	4d0b      	ldr	r5, [pc, #44]	; (8001664 <__libc_init_array+0x40>)
 8001636:	4c0c      	ldr	r4, [pc, #48]	; (8001668 <__libc_init_array+0x44>)
 8001638:	f000 fd1e 	bl	8002078 <_init>
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	2600      	movs	r6, #0
 8001642:	42a6      	cmp	r6, r4
 8001644:	d105      	bne.n	8001652 <__libc_init_array+0x2e>
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	f855 3b04 	ldr.w	r3, [r5], #4
 800164c:	4798      	blx	r3
 800164e:	3601      	adds	r6, #1
 8001650:	e7ee      	b.n	8001630 <__libc_init_array+0xc>
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	3601      	adds	r6, #1
 800165a:	e7f2      	b.n	8001642 <__libc_init_array+0x1e>
 800165c:	08002120 	.word	0x08002120
 8001660:	08002120 	.word	0x08002120
 8001664:	08002120 	.word	0x08002120
 8001668:	08002124 	.word	0x08002124

0800166c <memset>:
 800166c:	4402      	add	r2, r0
 800166e:	4603      	mov	r3, r0
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <memset+0xa>
 8001674:	4770      	bx	lr
 8001676:	f803 1b01 	strb.w	r1, [r3], #1
 800167a:	e7f9      	b.n	8001670 <memset+0x4>

0800167c <_puts_r>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	460e      	mov	r6, r1
 8001680:	4605      	mov	r5, r0
 8001682:	b118      	cbz	r0, 800168c <_puts_r+0x10>
 8001684:	6983      	ldr	r3, [r0, #24]
 8001686:	b90b      	cbnz	r3, 800168c <_puts_r+0x10>
 8001688:	f000 fa48 	bl	8001b1c <__sinit>
 800168c:	69ab      	ldr	r3, [r5, #24]
 800168e:	68ac      	ldr	r4, [r5, #8]
 8001690:	b913      	cbnz	r3, 8001698 <_puts_r+0x1c>
 8001692:	4628      	mov	r0, r5
 8001694:	f000 fa42 	bl	8001b1c <__sinit>
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <_puts_r+0xd0>)
 800169a:	429c      	cmp	r4, r3
 800169c:	d120      	bne.n	80016e0 <_puts_r+0x64>
 800169e:	686c      	ldr	r4, [r5, #4]
 80016a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016a2:	07db      	lsls	r3, r3, #31
 80016a4:	d405      	bmi.n	80016b2 <_puts_r+0x36>
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	0598      	lsls	r0, r3, #22
 80016aa:	d402      	bmi.n	80016b2 <_puts_r+0x36>
 80016ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ae:	f000 fad3 	bl	8001c58 <__retarget_lock_acquire_recursive>
 80016b2:	89a3      	ldrh	r3, [r4, #12]
 80016b4:	0719      	lsls	r1, r3, #28
 80016b6:	d51d      	bpl.n	80016f4 <_puts_r+0x78>
 80016b8:	6923      	ldr	r3, [r4, #16]
 80016ba:	b1db      	cbz	r3, 80016f4 <_puts_r+0x78>
 80016bc:	3e01      	subs	r6, #1
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60a3      	str	r3, [r4, #8]
 80016c8:	bb39      	cbnz	r1, 800171a <_puts_r+0x9e>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da38      	bge.n	8001740 <_puts_r+0xc4>
 80016ce:	4622      	mov	r2, r4
 80016d0:	210a      	movs	r1, #10
 80016d2:	4628      	mov	r0, r5
 80016d4:	f000 f848 	bl	8001768 <__swbuf_r>
 80016d8:	3001      	adds	r0, #1
 80016da:	d011      	beq.n	8001700 <_puts_r+0x84>
 80016dc:	250a      	movs	r5, #10
 80016de:	e011      	b.n	8001704 <_puts_r+0x88>
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <_puts_r+0xd4>)
 80016e2:	429c      	cmp	r4, r3
 80016e4:	d101      	bne.n	80016ea <_puts_r+0x6e>
 80016e6:	68ac      	ldr	r4, [r5, #8]
 80016e8:	e7da      	b.n	80016a0 <_puts_r+0x24>
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <_puts_r+0xd8>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	bf08      	it	eq
 80016f0:	68ec      	ldreq	r4, [r5, #12]
 80016f2:	e7d5      	b.n	80016a0 <_puts_r+0x24>
 80016f4:	4621      	mov	r1, r4
 80016f6:	4628      	mov	r0, r5
 80016f8:	f000 f888 	bl	800180c <__swsetup_r>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d0dd      	beq.n	80016bc <_puts_r+0x40>
 8001700:	f04f 35ff 	mov.w	r5, #4294967295
 8001704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001706:	07da      	lsls	r2, r3, #31
 8001708:	d405      	bmi.n	8001716 <_puts_r+0x9a>
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	059b      	lsls	r3, r3, #22
 800170e:	d402      	bmi.n	8001716 <_puts_r+0x9a>
 8001710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001712:	f000 faa2 	bl	8001c5a <__retarget_lock_release_recursive>
 8001716:	4628      	mov	r0, r5
 8001718:	bd70      	pop	{r4, r5, r6, pc}
 800171a:	2b00      	cmp	r3, #0
 800171c:	da04      	bge.n	8001728 <_puts_r+0xac>
 800171e:	69a2      	ldr	r2, [r4, #24]
 8001720:	429a      	cmp	r2, r3
 8001722:	dc06      	bgt.n	8001732 <_puts_r+0xb6>
 8001724:	290a      	cmp	r1, #10
 8001726:	d004      	beq.n	8001732 <_puts_r+0xb6>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	6022      	str	r2, [r4, #0]
 800172e:	7019      	strb	r1, [r3, #0]
 8001730:	e7c5      	b.n	80016be <_puts_r+0x42>
 8001732:	4622      	mov	r2, r4
 8001734:	4628      	mov	r0, r5
 8001736:	f000 f817 	bl	8001768 <__swbuf_r>
 800173a:	3001      	adds	r0, #1
 800173c:	d1bf      	bne.n	80016be <_puts_r+0x42>
 800173e:	e7df      	b.n	8001700 <_puts_r+0x84>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	250a      	movs	r5, #10
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	6022      	str	r2, [r4, #0]
 8001748:	701d      	strb	r5, [r3, #0]
 800174a:	e7db      	b.n	8001704 <_puts_r+0x88>
 800174c:	080020e0 	.word	0x080020e0
 8001750:	08002100 	.word	0x08002100
 8001754:	080020c0 	.word	0x080020c0

08001758 <puts>:
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <puts+0xc>)
 800175a:	4601      	mov	r1, r0
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	f7ff bf8d 	b.w	800167c <_puts_r>
 8001762:	bf00      	nop
 8001764:	20000000 	.word	0x20000000

08001768 <__swbuf_r>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	460e      	mov	r6, r1
 800176c:	4614      	mov	r4, r2
 800176e:	4605      	mov	r5, r0
 8001770:	b118      	cbz	r0, 800177a <__swbuf_r+0x12>
 8001772:	6983      	ldr	r3, [r0, #24]
 8001774:	b90b      	cbnz	r3, 800177a <__swbuf_r+0x12>
 8001776:	f000 f9d1 	bl	8001b1c <__sinit>
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <__swbuf_r+0x98>)
 800177c:	429c      	cmp	r4, r3
 800177e:	d12b      	bne.n	80017d8 <__swbuf_r+0x70>
 8001780:	686c      	ldr	r4, [r5, #4]
 8001782:	69a3      	ldr	r3, [r4, #24]
 8001784:	60a3      	str	r3, [r4, #8]
 8001786:	89a3      	ldrh	r3, [r4, #12]
 8001788:	071a      	lsls	r2, r3, #28
 800178a:	d52f      	bpl.n	80017ec <__swbuf_r+0x84>
 800178c:	6923      	ldr	r3, [r4, #16]
 800178e:	b36b      	cbz	r3, 80017ec <__swbuf_r+0x84>
 8001790:	6923      	ldr	r3, [r4, #16]
 8001792:	6820      	ldr	r0, [r4, #0]
 8001794:	1ac0      	subs	r0, r0, r3
 8001796:	6963      	ldr	r3, [r4, #20]
 8001798:	b2f6      	uxtb	r6, r6
 800179a:	4283      	cmp	r3, r0
 800179c:	4637      	mov	r7, r6
 800179e:	dc04      	bgt.n	80017aa <__swbuf_r+0x42>
 80017a0:	4621      	mov	r1, r4
 80017a2:	4628      	mov	r0, r5
 80017a4:	f000 f926 	bl	80019f4 <_fflush_r>
 80017a8:	bb30      	cbnz	r0, 80017f8 <__swbuf_r+0x90>
 80017aa:	68a3      	ldr	r3, [r4, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60a3      	str	r3, [r4, #8]
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	6022      	str	r2, [r4, #0]
 80017b6:	701e      	strb	r6, [r3, #0]
 80017b8:	6963      	ldr	r3, [r4, #20]
 80017ba:	3001      	adds	r0, #1
 80017bc:	4283      	cmp	r3, r0
 80017be:	d004      	beq.n	80017ca <__swbuf_r+0x62>
 80017c0:	89a3      	ldrh	r3, [r4, #12]
 80017c2:	07db      	lsls	r3, r3, #31
 80017c4:	d506      	bpl.n	80017d4 <__swbuf_r+0x6c>
 80017c6:	2e0a      	cmp	r6, #10
 80017c8:	d104      	bne.n	80017d4 <__swbuf_r+0x6c>
 80017ca:	4621      	mov	r1, r4
 80017cc:	4628      	mov	r0, r5
 80017ce:	f000 f911 	bl	80019f4 <_fflush_r>
 80017d2:	b988      	cbnz	r0, 80017f8 <__swbuf_r+0x90>
 80017d4:	4638      	mov	r0, r7
 80017d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <__swbuf_r+0x9c>)
 80017da:	429c      	cmp	r4, r3
 80017dc:	d101      	bne.n	80017e2 <__swbuf_r+0x7a>
 80017de:	68ac      	ldr	r4, [r5, #8]
 80017e0:	e7cf      	b.n	8001782 <__swbuf_r+0x1a>
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <__swbuf_r+0xa0>)
 80017e4:	429c      	cmp	r4, r3
 80017e6:	bf08      	it	eq
 80017e8:	68ec      	ldreq	r4, [r5, #12]
 80017ea:	e7ca      	b.n	8001782 <__swbuf_r+0x1a>
 80017ec:	4621      	mov	r1, r4
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 f80c 	bl	800180c <__swsetup_r>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d0cb      	beq.n	8001790 <__swbuf_r+0x28>
 80017f8:	f04f 37ff 	mov.w	r7, #4294967295
 80017fc:	e7ea      	b.n	80017d4 <__swbuf_r+0x6c>
 80017fe:	bf00      	nop
 8001800:	080020e0 	.word	0x080020e0
 8001804:	08002100 	.word	0x08002100
 8001808:	080020c0 	.word	0x080020c0

0800180c <__swsetup_r>:
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <__swsetup_r+0xcc>)
 800180e:	b570      	push	{r4, r5, r6, lr}
 8001810:	681d      	ldr	r5, [r3, #0]
 8001812:	4606      	mov	r6, r0
 8001814:	460c      	mov	r4, r1
 8001816:	b125      	cbz	r5, 8001822 <__swsetup_r+0x16>
 8001818:	69ab      	ldr	r3, [r5, #24]
 800181a:	b913      	cbnz	r3, 8001822 <__swsetup_r+0x16>
 800181c:	4628      	mov	r0, r5
 800181e:	f000 f97d 	bl	8001b1c <__sinit>
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <__swsetup_r+0xd0>)
 8001824:	429c      	cmp	r4, r3
 8001826:	d10f      	bne.n	8001848 <__swsetup_r+0x3c>
 8001828:	686c      	ldr	r4, [r5, #4]
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001830:	0719      	lsls	r1, r3, #28
 8001832:	d42c      	bmi.n	800188e <__swsetup_r+0x82>
 8001834:	06dd      	lsls	r5, r3, #27
 8001836:	d411      	bmi.n	800185c <__swsetup_r+0x50>
 8001838:	2309      	movs	r3, #9
 800183a:	6033      	str	r3, [r6, #0]
 800183c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001840:	81a3      	strh	r3, [r4, #12]
 8001842:	f04f 30ff 	mov.w	r0, #4294967295
 8001846:	e03e      	b.n	80018c6 <__swsetup_r+0xba>
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <__swsetup_r+0xd4>)
 800184a:	429c      	cmp	r4, r3
 800184c:	d101      	bne.n	8001852 <__swsetup_r+0x46>
 800184e:	68ac      	ldr	r4, [r5, #8]
 8001850:	e7eb      	b.n	800182a <__swsetup_r+0x1e>
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <__swsetup_r+0xd8>)
 8001854:	429c      	cmp	r4, r3
 8001856:	bf08      	it	eq
 8001858:	68ec      	ldreq	r4, [r5, #12]
 800185a:	e7e6      	b.n	800182a <__swsetup_r+0x1e>
 800185c:	0758      	lsls	r0, r3, #29
 800185e:	d512      	bpl.n	8001886 <__swsetup_r+0x7a>
 8001860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001862:	b141      	cbz	r1, 8001876 <__swsetup_r+0x6a>
 8001864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001868:	4299      	cmp	r1, r3
 800186a:	d002      	beq.n	8001872 <__swsetup_r+0x66>
 800186c:	4630      	mov	r0, r6
 800186e:	f000 fa5b 	bl	8001d28 <_free_r>
 8001872:	2300      	movs	r3, #0
 8001874:	6363      	str	r3, [r4, #52]	; 0x34
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800187c:	81a3      	strh	r3, [r4, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	6063      	str	r3, [r4, #4]
 8001882:	6923      	ldr	r3, [r4, #16]
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	6923      	ldr	r3, [r4, #16]
 8001890:	b94b      	cbnz	r3, 80018a6 <__swsetup_r+0x9a>
 8001892:	89a3      	ldrh	r3, [r4, #12]
 8001894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189c:	d003      	beq.n	80018a6 <__swsetup_r+0x9a>
 800189e:	4621      	mov	r1, r4
 80018a0:	4630      	mov	r0, r6
 80018a2:	f000 fa01 	bl	8001ca8 <__smakebuf_r>
 80018a6:	89a0      	ldrh	r0, [r4, #12]
 80018a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018ac:	f010 0301 	ands.w	r3, r0, #1
 80018b0:	d00a      	beq.n	80018c8 <__swsetup_r+0xbc>
 80018b2:	2300      	movs	r3, #0
 80018b4:	60a3      	str	r3, [r4, #8]
 80018b6:	6963      	ldr	r3, [r4, #20]
 80018b8:	425b      	negs	r3, r3
 80018ba:	61a3      	str	r3, [r4, #24]
 80018bc:	6923      	ldr	r3, [r4, #16]
 80018be:	b943      	cbnz	r3, 80018d2 <__swsetup_r+0xc6>
 80018c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018c4:	d1ba      	bne.n	800183c <__swsetup_r+0x30>
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	0781      	lsls	r1, r0, #30
 80018ca:	bf58      	it	pl
 80018cc:	6963      	ldrpl	r3, [r4, #20]
 80018ce:	60a3      	str	r3, [r4, #8]
 80018d0:	e7f4      	b.n	80018bc <__swsetup_r+0xb0>
 80018d2:	2000      	movs	r0, #0
 80018d4:	e7f7      	b.n	80018c6 <__swsetup_r+0xba>
 80018d6:	bf00      	nop
 80018d8:	20000000 	.word	0x20000000
 80018dc:	080020e0 	.word	0x080020e0
 80018e0:	08002100 	.word	0x08002100
 80018e4:	080020c0 	.word	0x080020c0

080018e8 <__sflush_r>:
 80018e8:	898a      	ldrh	r2, [r1, #12]
 80018ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ee:	4605      	mov	r5, r0
 80018f0:	0710      	lsls	r0, r2, #28
 80018f2:	460c      	mov	r4, r1
 80018f4:	d458      	bmi.n	80019a8 <__sflush_r+0xc0>
 80018f6:	684b      	ldr	r3, [r1, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	dc05      	bgt.n	8001908 <__sflush_r+0x20>
 80018fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dc02      	bgt.n	8001908 <__sflush_r+0x20>
 8001902:	2000      	movs	r0, #0
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800190a:	2e00      	cmp	r6, #0
 800190c:	d0f9      	beq.n	8001902 <__sflush_r+0x1a>
 800190e:	2300      	movs	r3, #0
 8001910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001914:	682f      	ldr	r7, [r5, #0]
 8001916:	602b      	str	r3, [r5, #0]
 8001918:	d032      	beq.n	8001980 <__sflush_r+0x98>
 800191a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	075a      	lsls	r2, r3, #29
 8001920:	d505      	bpl.n	800192e <__sflush_r+0x46>
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	1ac0      	subs	r0, r0, r3
 8001926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001928:	b10b      	cbz	r3, 800192e <__sflush_r+0x46>
 800192a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800192c:	1ac0      	subs	r0, r0, r3
 800192e:	2300      	movs	r3, #0
 8001930:	4602      	mov	r2, r0
 8001932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001934:	6a21      	ldr	r1, [r4, #32]
 8001936:	4628      	mov	r0, r5
 8001938:	47b0      	blx	r6
 800193a:	1c43      	adds	r3, r0, #1
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	d106      	bne.n	800194e <__sflush_r+0x66>
 8001940:	6829      	ldr	r1, [r5, #0]
 8001942:	291d      	cmp	r1, #29
 8001944:	d82c      	bhi.n	80019a0 <__sflush_r+0xb8>
 8001946:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <__sflush_r+0x108>)
 8001948:	40ca      	lsrs	r2, r1
 800194a:	07d6      	lsls	r6, r2, #31
 800194c:	d528      	bpl.n	80019a0 <__sflush_r+0xb8>
 800194e:	2200      	movs	r2, #0
 8001950:	6062      	str	r2, [r4, #4]
 8001952:	04d9      	lsls	r1, r3, #19
 8001954:	6922      	ldr	r2, [r4, #16]
 8001956:	6022      	str	r2, [r4, #0]
 8001958:	d504      	bpl.n	8001964 <__sflush_r+0x7c>
 800195a:	1c42      	adds	r2, r0, #1
 800195c:	d101      	bne.n	8001962 <__sflush_r+0x7a>
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	b903      	cbnz	r3, 8001964 <__sflush_r+0x7c>
 8001962:	6560      	str	r0, [r4, #84]	; 0x54
 8001964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001966:	602f      	str	r7, [r5, #0]
 8001968:	2900      	cmp	r1, #0
 800196a:	d0ca      	beq.n	8001902 <__sflush_r+0x1a>
 800196c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001970:	4299      	cmp	r1, r3
 8001972:	d002      	beq.n	800197a <__sflush_r+0x92>
 8001974:	4628      	mov	r0, r5
 8001976:	f000 f9d7 	bl	8001d28 <_free_r>
 800197a:	2000      	movs	r0, #0
 800197c:	6360      	str	r0, [r4, #52]	; 0x34
 800197e:	e7c1      	b.n	8001904 <__sflush_r+0x1c>
 8001980:	6a21      	ldr	r1, [r4, #32]
 8001982:	2301      	movs	r3, #1
 8001984:	4628      	mov	r0, r5
 8001986:	47b0      	blx	r6
 8001988:	1c41      	adds	r1, r0, #1
 800198a:	d1c7      	bne.n	800191c <__sflush_r+0x34>
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0c4      	beq.n	800191c <__sflush_r+0x34>
 8001992:	2b1d      	cmp	r3, #29
 8001994:	d001      	beq.n	800199a <__sflush_r+0xb2>
 8001996:	2b16      	cmp	r3, #22
 8001998:	d101      	bne.n	800199e <__sflush_r+0xb6>
 800199a:	602f      	str	r7, [r5, #0]
 800199c:	e7b1      	b.n	8001902 <__sflush_r+0x1a>
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a4:	81a3      	strh	r3, [r4, #12]
 80019a6:	e7ad      	b.n	8001904 <__sflush_r+0x1c>
 80019a8:	690f      	ldr	r7, [r1, #16]
 80019aa:	2f00      	cmp	r7, #0
 80019ac:	d0a9      	beq.n	8001902 <__sflush_r+0x1a>
 80019ae:	0793      	lsls	r3, r2, #30
 80019b0:	680e      	ldr	r6, [r1, #0]
 80019b2:	bf08      	it	eq
 80019b4:	694b      	ldreq	r3, [r1, #20]
 80019b6:	600f      	str	r7, [r1, #0]
 80019b8:	bf18      	it	ne
 80019ba:	2300      	movne	r3, #0
 80019bc:	eba6 0807 	sub.w	r8, r6, r7
 80019c0:	608b      	str	r3, [r1, #8]
 80019c2:	f1b8 0f00 	cmp.w	r8, #0
 80019c6:	dd9c      	ble.n	8001902 <__sflush_r+0x1a>
 80019c8:	6a21      	ldr	r1, [r4, #32]
 80019ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019cc:	4643      	mov	r3, r8
 80019ce:	463a      	mov	r2, r7
 80019d0:	4628      	mov	r0, r5
 80019d2:	47b0      	blx	r6
 80019d4:	2800      	cmp	r0, #0
 80019d6:	dc06      	bgt.n	80019e6 <__sflush_r+0xfe>
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019de:	81a3      	strh	r3, [r4, #12]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	e78e      	b.n	8001904 <__sflush_r+0x1c>
 80019e6:	4407      	add	r7, r0
 80019e8:	eba8 0800 	sub.w	r8, r8, r0
 80019ec:	e7e9      	b.n	80019c2 <__sflush_r+0xda>
 80019ee:	bf00      	nop
 80019f0:	20400001 	.word	0x20400001

080019f4 <_fflush_r>:
 80019f4:	b538      	push	{r3, r4, r5, lr}
 80019f6:	690b      	ldr	r3, [r1, #16]
 80019f8:	4605      	mov	r5, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	b913      	cbnz	r3, 8001a04 <_fflush_r+0x10>
 80019fe:	2500      	movs	r5, #0
 8001a00:	4628      	mov	r0, r5
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
 8001a04:	b118      	cbz	r0, 8001a0e <_fflush_r+0x1a>
 8001a06:	6983      	ldr	r3, [r0, #24]
 8001a08:	b90b      	cbnz	r3, 8001a0e <_fflush_r+0x1a>
 8001a0a:	f000 f887 	bl	8001b1c <__sinit>
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <_fflush_r+0x6c>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d11b      	bne.n	8001a4c <_fflush_r+0x58>
 8001a14:	686c      	ldr	r4, [r5, #4]
 8001a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ef      	beq.n	80019fe <_fflush_r+0xa>
 8001a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a20:	07d0      	lsls	r0, r2, #31
 8001a22:	d404      	bmi.n	8001a2e <_fflush_r+0x3a>
 8001a24:	0599      	lsls	r1, r3, #22
 8001a26:	d402      	bmi.n	8001a2e <_fflush_r+0x3a>
 8001a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a2a:	f000 f915 	bl	8001c58 <__retarget_lock_acquire_recursive>
 8001a2e:	4628      	mov	r0, r5
 8001a30:	4621      	mov	r1, r4
 8001a32:	f7ff ff59 	bl	80018e8 <__sflush_r>
 8001a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a38:	07da      	lsls	r2, r3, #31
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	d4e0      	bmi.n	8001a00 <_fflush_r+0xc>
 8001a3e:	89a3      	ldrh	r3, [r4, #12]
 8001a40:	059b      	lsls	r3, r3, #22
 8001a42:	d4dd      	bmi.n	8001a00 <_fflush_r+0xc>
 8001a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a46:	f000 f908 	bl	8001c5a <__retarget_lock_release_recursive>
 8001a4a:	e7d9      	b.n	8001a00 <_fflush_r+0xc>
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <_fflush_r+0x70>)
 8001a4e:	429c      	cmp	r4, r3
 8001a50:	d101      	bne.n	8001a56 <_fflush_r+0x62>
 8001a52:	68ac      	ldr	r4, [r5, #8]
 8001a54:	e7df      	b.n	8001a16 <_fflush_r+0x22>
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <_fflush_r+0x74>)
 8001a58:	429c      	cmp	r4, r3
 8001a5a:	bf08      	it	eq
 8001a5c:	68ec      	ldreq	r4, [r5, #12]
 8001a5e:	e7da      	b.n	8001a16 <_fflush_r+0x22>
 8001a60:	080020e0 	.word	0x080020e0
 8001a64:	08002100 	.word	0x08002100
 8001a68:	080020c0 	.word	0x080020c0

08001a6c <std>:
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	4604      	mov	r4, r0
 8001a72:	e9c0 3300 	strd	r3, r3, [r0]
 8001a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a7a:	6083      	str	r3, [r0, #8]
 8001a7c:	8181      	strh	r1, [r0, #12]
 8001a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8001a80:	81c2      	strh	r2, [r0, #14]
 8001a82:	6183      	str	r3, [r0, #24]
 8001a84:	4619      	mov	r1, r3
 8001a86:	2208      	movs	r2, #8
 8001a88:	305c      	adds	r0, #92	; 0x5c
 8001a8a:	f7ff fdef 	bl	800166c <memset>
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <std+0x38>)
 8001a90:	6263      	str	r3, [r4, #36]	; 0x24
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <std+0x3c>)
 8001a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <std+0x40>)
 8001a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <std+0x44>)
 8001a9c:	6224      	str	r4, [r4, #32]
 8001a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08001f09 	.word	0x08001f09
 8001aa8:	08001f2b 	.word	0x08001f2b
 8001aac:	08001f63 	.word	0x08001f63
 8001ab0:	08001f87 	.word	0x08001f87

08001ab4 <_cleanup_r>:
 8001ab4:	4901      	ldr	r1, [pc, #4]	; (8001abc <_cleanup_r+0x8>)
 8001ab6:	f000 b8af 	b.w	8001c18 <_fwalk_reent>
 8001aba:	bf00      	nop
 8001abc:	080019f5 	.word	0x080019f5

08001ac0 <__sfmoreglue>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	2268      	movs	r2, #104	; 0x68
 8001ac4:	1e4d      	subs	r5, r1, #1
 8001ac6:	4355      	muls	r5, r2
 8001ac8:	460e      	mov	r6, r1
 8001aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ace:	f000 f997 	bl	8001e00 <_malloc_r>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	b140      	cbz	r0, 8001ae8 <__sfmoreglue+0x28>
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8001adc:	300c      	adds	r0, #12
 8001ade:	60a0      	str	r0, [r4, #8]
 8001ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ae4:	f7ff fdc2 	bl	800166c <memset>
 8001ae8:	4620      	mov	r0, r4
 8001aea:	bd70      	pop	{r4, r5, r6, pc}

08001aec <__sfp_lock_acquire>:
 8001aec:	4801      	ldr	r0, [pc, #4]	; (8001af4 <__sfp_lock_acquire+0x8>)
 8001aee:	f000 b8b3 	b.w	8001c58 <__retarget_lock_acquire_recursive>
 8001af2:	bf00      	nop
 8001af4:	200000a9 	.word	0x200000a9

08001af8 <__sfp_lock_release>:
 8001af8:	4801      	ldr	r0, [pc, #4]	; (8001b00 <__sfp_lock_release+0x8>)
 8001afa:	f000 b8ae 	b.w	8001c5a <__retarget_lock_release_recursive>
 8001afe:	bf00      	nop
 8001b00:	200000a9 	.word	0x200000a9

08001b04 <__sinit_lock_acquire>:
 8001b04:	4801      	ldr	r0, [pc, #4]	; (8001b0c <__sinit_lock_acquire+0x8>)
 8001b06:	f000 b8a7 	b.w	8001c58 <__retarget_lock_acquire_recursive>
 8001b0a:	bf00      	nop
 8001b0c:	200000aa 	.word	0x200000aa

08001b10 <__sinit_lock_release>:
 8001b10:	4801      	ldr	r0, [pc, #4]	; (8001b18 <__sinit_lock_release+0x8>)
 8001b12:	f000 b8a2 	b.w	8001c5a <__retarget_lock_release_recursive>
 8001b16:	bf00      	nop
 8001b18:	200000aa 	.word	0x200000aa

08001b1c <__sinit>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	4604      	mov	r4, r0
 8001b20:	f7ff fff0 	bl	8001b04 <__sinit_lock_acquire>
 8001b24:	69a3      	ldr	r3, [r4, #24]
 8001b26:	b11b      	cbz	r3, 8001b30 <__sinit+0x14>
 8001b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b2c:	f7ff bff0 	b.w	8001b10 <__sinit_lock_release>
 8001b30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b34:	6523      	str	r3, [r4, #80]	; 0x50
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <__sinit+0x68>)
 8001b38:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <__sinit+0x6c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	bf04      	itt	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	61a3      	streq	r3, [r4, #24]
 8001b46:	4620      	mov	r0, r4
 8001b48:	f000 f820 	bl	8001b8c <__sfp>
 8001b4c:	6060      	str	r0, [r4, #4]
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f000 f81c 	bl	8001b8c <__sfp>
 8001b54:	60a0      	str	r0, [r4, #8]
 8001b56:	4620      	mov	r0, r4
 8001b58:	f000 f818 	bl	8001b8c <__sfp>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60e0      	str	r0, [r4, #12]
 8001b60:	2104      	movs	r1, #4
 8001b62:	6860      	ldr	r0, [r4, #4]
 8001b64:	f7ff ff82 	bl	8001a6c <std>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2109      	movs	r1, #9
 8001b6e:	f7ff ff7d 	bl	8001a6c <std>
 8001b72:	68e0      	ldr	r0, [r4, #12]
 8001b74:	2202      	movs	r2, #2
 8001b76:	2112      	movs	r1, #18
 8001b78:	f7ff ff78 	bl	8001a6c <std>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61a3      	str	r3, [r4, #24]
 8001b80:	e7d2      	b.n	8001b28 <__sinit+0xc>
 8001b82:	bf00      	nop
 8001b84:	080020bc 	.word	0x080020bc
 8001b88:	08001ab5 	.word	0x08001ab5

08001b8c <__sfp>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	4607      	mov	r7, r0
 8001b90:	f7ff ffac 	bl	8001aec <__sfp_lock_acquire>
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <__sfp+0x84>)
 8001b96:	681e      	ldr	r6, [r3, #0]
 8001b98:	69b3      	ldr	r3, [r6, #24]
 8001b9a:	b913      	cbnz	r3, 8001ba2 <__sfp+0x16>
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f7ff ffbd 	bl	8001b1c <__sinit>
 8001ba2:	3648      	adds	r6, #72	; 0x48
 8001ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	d503      	bpl.n	8001bb4 <__sfp+0x28>
 8001bac:	6833      	ldr	r3, [r6, #0]
 8001bae:	b30b      	cbz	r3, 8001bf4 <__sfp+0x68>
 8001bb0:	6836      	ldr	r6, [r6, #0]
 8001bb2:	e7f7      	b.n	8001ba4 <__sfp+0x18>
 8001bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bb8:	b9d5      	cbnz	r5, 8001bf0 <__sfp+0x64>
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <__sfp+0x88>)
 8001bbc:	60e3      	str	r3, [r4, #12]
 8001bbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001bc2:	6665      	str	r5, [r4, #100]	; 0x64
 8001bc4:	f000 f847 	bl	8001c56 <__retarget_lock_init_recursive>
 8001bc8:	f7ff ff96 	bl	8001af8 <__sfp_lock_release>
 8001bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001bd4:	6025      	str	r5, [r4, #0]
 8001bd6:	61a5      	str	r5, [r4, #24]
 8001bd8:	2208      	movs	r2, #8
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001be0:	f7ff fd44 	bl	800166c <memset>
 8001be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bec:	4620      	mov	r0, r4
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf0:	3468      	adds	r4, #104	; 0x68
 8001bf2:	e7d9      	b.n	8001ba8 <__sfp+0x1c>
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	f7ff ff62 	bl	8001ac0 <__sfmoreglue>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	6030      	str	r0, [r6, #0]
 8001c00:	2800      	cmp	r0, #0
 8001c02:	d1d5      	bne.n	8001bb0 <__sfp+0x24>
 8001c04:	f7ff ff78 	bl	8001af8 <__sfp_lock_release>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	e7ee      	b.n	8001bec <__sfp+0x60>
 8001c0e:	bf00      	nop
 8001c10:	080020bc 	.word	0x080020bc
 8001c14:	ffff0001 	.word	0xffff0001

08001c18 <_fwalk_reent>:
 8001c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c1c:	4606      	mov	r6, r0
 8001c1e:	4688      	mov	r8, r1
 8001c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c24:	2700      	movs	r7, #0
 8001c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c2a:	f1b9 0901 	subs.w	r9, r9, #1
 8001c2e:	d505      	bpl.n	8001c3c <_fwalk_reent+0x24>
 8001c30:	6824      	ldr	r4, [r4, #0]
 8001c32:	2c00      	cmp	r4, #0
 8001c34:	d1f7      	bne.n	8001c26 <_fwalk_reent+0xe>
 8001c36:	4638      	mov	r0, r7
 8001c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c3c:	89ab      	ldrh	r3, [r5, #12]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d907      	bls.n	8001c52 <_fwalk_reent+0x3a>
 8001c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c46:	3301      	adds	r3, #1
 8001c48:	d003      	beq.n	8001c52 <_fwalk_reent+0x3a>
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	47c0      	blx	r8
 8001c50:	4307      	orrs	r7, r0
 8001c52:	3568      	adds	r5, #104	; 0x68
 8001c54:	e7e9      	b.n	8001c2a <_fwalk_reent+0x12>

08001c56 <__retarget_lock_init_recursive>:
 8001c56:	4770      	bx	lr

08001c58 <__retarget_lock_acquire_recursive>:
 8001c58:	4770      	bx	lr

08001c5a <__retarget_lock_release_recursive>:
 8001c5a:	4770      	bx	lr

08001c5c <__swhatbuf_r>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	460e      	mov	r6, r1
 8001c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c64:	2900      	cmp	r1, #0
 8001c66:	b096      	sub	sp, #88	; 0x58
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	da08      	bge.n	8001c80 <__swhatbuf_r+0x24>
 8001c6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	602a      	str	r2, [r5, #0]
 8001c76:	061a      	lsls	r2, r3, #24
 8001c78:	d410      	bmi.n	8001c9c <__swhatbuf_r+0x40>
 8001c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7e:	e00e      	b.n	8001c9e <__swhatbuf_r+0x42>
 8001c80:	466a      	mov	r2, sp
 8001c82:	f000 f9a7 	bl	8001fd4 <_fstat_r>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	dbf1      	blt.n	8001c6e <__swhatbuf_r+0x12>
 8001c8a:	9a01      	ldr	r2, [sp, #4]
 8001c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c94:	425a      	negs	r2, r3
 8001c96:	415a      	adcs	r2, r3
 8001c98:	602a      	str	r2, [r5, #0]
 8001c9a:	e7ee      	b.n	8001c7a <__swhatbuf_r+0x1e>
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	b016      	add	sp, #88	; 0x58
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ca8 <__smakebuf_r>:
 8001ca8:	898b      	ldrh	r3, [r1, #12]
 8001caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cac:	079d      	lsls	r5, r3, #30
 8001cae:	4606      	mov	r6, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	d507      	bpl.n	8001cc4 <__smakebuf_r+0x1c>
 8001cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	6123      	str	r3, [r4, #16]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6163      	str	r3, [r4, #20]
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	ab01      	add	r3, sp, #4
 8001cc6:	466a      	mov	r2, sp
 8001cc8:	f7ff ffc8 	bl	8001c5c <__swhatbuf_r>
 8001ccc:	9900      	ldr	r1, [sp, #0]
 8001cce:	4605      	mov	r5, r0
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f000 f895 	bl	8001e00 <_malloc_r>
 8001cd6:	b948      	cbnz	r0, 8001cec <__smakebuf_r+0x44>
 8001cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cdc:	059a      	lsls	r2, r3, #22
 8001cde:	d4ef      	bmi.n	8001cc0 <__smakebuf_r+0x18>
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e7e3      	b.n	8001cb4 <__smakebuf_r+0xc>
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <__smakebuf_r+0x7c>)
 8001cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	6020      	str	r0, [r4, #0]
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	81a3      	strh	r3, [r4, #12]
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	6163      	str	r3, [r4, #20]
 8001cfe:	9b01      	ldr	r3, [sp, #4]
 8001d00:	6120      	str	r0, [r4, #16]
 8001d02:	b15b      	cbz	r3, 8001d1c <__smakebuf_r+0x74>
 8001d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f000 f975 	bl	8001ff8 <_isatty_r>
 8001d0e:	b128      	cbz	r0, 8001d1c <__smakebuf_r+0x74>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	89a0      	ldrh	r0, [r4, #12]
 8001d1e:	4305      	orrs	r5, r0
 8001d20:	81a5      	strh	r5, [r4, #12]
 8001d22:	e7cd      	b.n	8001cc0 <__smakebuf_r+0x18>
 8001d24:	08001ab5 	.word	0x08001ab5

08001d28 <_free_r>:
 8001d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d044      	beq.n	8001db8 <_free_r+0x90>
 8001d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d32:	9001      	str	r0, [sp, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f1a1 0404 	sub.w	r4, r1, #4
 8001d3a:	bfb8      	it	lt
 8001d3c:	18e4      	addlt	r4, r4, r3
 8001d3e:	f000 f97d 	bl	800203c <__malloc_lock>
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <_free_r+0x94>)
 8001d44:	9801      	ldr	r0, [sp, #4]
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	b933      	cbnz	r3, 8001d58 <_free_r+0x30>
 8001d4a:	6063      	str	r3, [r4, #4]
 8001d4c:	6014      	str	r4, [r2, #0]
 8001d4e:	b003      	add	sp, #12
 8001d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d54:	f000 b978 	b.w	8002048 <__malloc_unlock>
 8001d58:	42a3      	cmp	r3, r4
 8001d5a:	d908      	bls.n	8001d6e <_free_r+0x46>
 8001d5c:	6825      	ldr	r5, [r4, #0]
 8001d5e:	1961      	adds	r1, r4, r5
 8001d60:	428b      	cmp	r3, r1
 8001d62:	bf01      	itttt	eq
 8001d64:	6819      	ldreq	r1, [r3, #0]
 8001d66:	685b      	ldreq	r3, [r3, #4]
 8001d68:	1949      	addeq	r1, r1, r5
 8001d6a:	6021      	streq	r1, [r4, #0]
 8001d6c:	e7ed      	b.n	8001d4a <_free_r+0x22>
 8001d6e:	461a      	mov	r2, r3
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	b10b      	cbz	r3, 8001d78 <_free_r+0x50>
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	d9fa      	bls.n	8001d6e <_free_r+0x46>
 8001d78:	6811      	ldr	r1, [r2, #0]
 8001d7a:	1855      	adds	r5, r2, r1
 8001d7c:	42a5      	cmp	r5, r4
 8001d7e:	d10b      	bne.n	8001d98 <_free_r+0x70>
 8001d80:	6824      	ldr	r4, [r4, #0]
 8001d82:	4421      	add	r1, r4
 8001d84:	1854      	adds	r4, r2, r1
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	d1e0      	bne.n	8001d4e <_free_r+0x26>
 8001d8c:	681c      	ldr	r4, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	6053      	str	r3, [r2, #4]
 8001d92:	4421      	add	r1, r4
 8001d94:	6011      	str	r1, [r2, #0]
 8001d96:	e7da      	b.n	8001d4e <_free_r+0x26>
 8001d98:	d902      	bls.n	8001da0 <_free_r+0x78>
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	6003      	str	r3, [r0, #0]
 8001d9e:	e7d6      	b.n	8001d4e <_free_r+0x26>
 8001da0:	6825      	ldr	r5, [r4, #0]
 8001da2:	1961      	adds	r1, r4, r5
 8001da4:	428b      	cmp	r3, r1
 8001da6:	bf04      	itt	eq
 8001da8:	6819      	ldreq	r1, [r3, #0]
 8001daa:	685b      	ldreq	r3, [r3, #4]
 8001dac:	6063      	str	r3, [r4, #4]
 8001dae:	bf04      	itt	eq
 8001db0:	1949      	addeq	r1, r1, r5
 8001db2:	6021      	streq	r1, [r4, #0]
 8001db4:	6054      	str	r4, [r2, #4]
 8001db6:	e7ca      	b.n	8001d4e <_free_r+0x26>
 8001db8:	b003      	add	sp, #12
 8001dba:	bd30      	pop	{r4, r5, pc}
 8001dbc:	200000ac 	.word	0x200000ac

08001dc0 <sbrk_aligned>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	4e0e      	ldr	r6, [pc, #56]	; (8001dfc <sbrk_aligned+0x3c>)
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	6831      	ldr	r1, [r6, #0]
 8001dc8:	4605      	mov	r5, r0
 8001dca:	b911      	cbnz	r1, 8001dd2 <sbrk_aligned+0x12>
 8001dcc:	f000 f88c 	bl	8001ee8 <_sbrk_r>
 8001dd0:	6030      	str	r0, [r6, #0]
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f000 f887 	bl	8001ee8 <_sbrk_r>
 8001dda:	1c43      	adds	r3, r0, #1
 8001ddc:	d00a      	beq.n	8001df4 <sbrk_aligned+0x34>
 8001dde:	1cc4      	adds	r4, r0, #3
 8001de0:	f024 0403 	bic.w	r4, r4, #3
 8001de4:	42a0      	cmp	r0, r4
 8001de6:	d007      	beq.n	8001df8 <sbrk_aligned+0x38>
 8001de8:	1a21      	subs	r1, r4, r0
 8001dea:	4628      	mov	r0, r5
 8001dec:	f000 f87c 	bl	8001ee8 <_sbrk_r>
 8001df0:	3001      	adds	r0, #1
 8001df2:	d101      	bne.n	8001df8 <sbrk_aligned+0x38>
 8001df4:	f04f 34ff 	mov.w	r4, #4294967295
 8001df8:	4620      	mov	r0, r4
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	200000b0 	.word	0x200000b0

08001e00 <_malloc_r>:
 8001e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e04:	1ccd      	adds	r5, r1, #3
 8001e06:	f025 0503 	bic.w	r5, r5, #3
 8001e0a:	3508      	adds	r5, #8
 8001e0c:	2d0c      	cmp	r5, #12
 8001e0e:	bf38      	it	cc
 8001e10:	250c      	movcc	r5, #12
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	4607      	mov	r7, r0
 8001e16:	db01      	blt.n	8001e1c <_malloc_r+0x1c>
 8001e18:	42a9      	cmp	r1, r5
 8001e1a:	d905      	bls.n	8001e28 <_malloc_r+0x28>
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	2600      	movs	r6, #0
 8001e22:	4630      	mov	r0, r6
 8001e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e28:	4e2e      	ldr	r6, [pc, #184]	; (8001ee4 <_malloc_r+0xe4>)
 8001e2a:	f000 f907 	bl	800203c <__malloc_lock>
 8001e2e:	6833      	ldr	r3, [r6, #0]
 8001e30:	461c      	mov	r4, r3
 8001e32:	bb34      	cbnz	r4, 8001e82 <_malloc_r+0x82>
 8001e34:	4629      	mov	r1, r5
 8001e36:	4638      	mov	r0, r7
 8001e38:	f7ff ffc2 	bl	8001dc0 <sbrk_aligned>
 8001e3c:	1c43      	adds	r3, r0, #1
 8001e3e:	4604      	mov	r4, r0
 8001e40:	d14d      	bne.n	8001ede <_malloc_r+0xde>
 8001e42:	6834      	ldr	r4, [r6, #0]
 8001e44:	4626      	mov	r6, r4
 8001e46:	2e00      	cmp	r6, #0
 8001e48:	d140      	bne.n	8001ecc <_malloc_r+0xcc>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	4631      	mov	r1, r6
 8001e4e:	4638      	mov	r0, r7
 8001e50:	eb04 0803 	add.w	r8, r4, r3
 8001e54:	f000 f848 	bl	8001ee8 <_sbrk_r>
 8001e58:	4580      	cmp	r8, r0
 8001e5a:	d13a      	bne.n	8001ed2 <_malloc_r+0xd2>
 8001e5c:	6821      	ldr	r1, [r4, #0]
 8001e5e:	3503      	adds	r5, #3
 8001e60:	1a6d      	subs	r5, r5, r1
 8001e62:	f025 0503 	bic.w	r5, r5, #3
 8001e66:	3508      	adds	r5, #8
 8001e68:	2d0c      	cmp	r5, #12
 8001e6a:	bf38      	it	cc
 8001e6c:	250c      	movcc	r5, #12
 8001e6e:	4629      	mov	r1, r5
 8001e70:	4638      	mov	r0, r7
 8001e72:	f7ff ffa5 	bl	8001dc0 <sbrk_aligned>
 8001e76:	3001      	adds	r0, #1
 8001e78:	d02b      	beq.n	8001ed2 <_malloc_r+0xd2>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	442b      	add	r3, r5
 8001e7e:	6023      	str	r3, [r4, #0]
 8001e80:	e00e      	b.n	8001ea0 <_malloc_r+0xa0>
 8001e82:	6822      	ldr	r2, [r4, #0]
 8001e84:	1b52      	subs	r2, r2, r5
 8001e86:	d41e      	bmi.n	8001ec6 <_malloc_r+0xc6>
 8001e88:	2a0b      	cmp	r2, #11
 8001e8a:	d916      	bls.n	8001eba <_malloc_r+0xba>
 8001e8c:	1961      	adds	r1, r4, r5
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	6025      	str	r5, [r4, #0]
 8001e92:	bf18      	it	ne
 8001e94:	6059      	strne	r1, [r3, #4]
 8001e96:	6863      	ldr	r3, [r4, #4]
 8001e98:	bf08      	it	eq
 8001e9a:	6031      	streq	r1, [r6, #0]
 8001e9c:	5162      	str	r2, [r4, r5]
 8001e9e:	604b      	str	r3, [r1, #4]
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	f104 060b 	add.w	r6, r4, #11
 8001ea6:	f000 f8cf 	bl	8002048 <__malloc_unlock>
 8001eaa:	f026 0607 	bic.w	r6, r6, #7
 8001eae:	1d23      	adds	r3, r4, #4
 8001eb0:	1af2      	subs	r2, r6, r3
 8001eb2:	d0b6      	beq.n	8001e22 <_malloc_r+0x22>
 8001eb4:	1b9b      	subs	r3, r3, r6
 8001eb6:	50a3      	str	r3, [r4, r2]
 8001eb8:	e7b3      	b.n	8001e22 <_malloc_r+0x22>
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	42a3      	cmp	r3, r4
 8001ebe:	bf0c      	ite	eq
 8001ec0:	6032      	streq	r2, [r6, #0]
 8001ec2:	605a      	strne	r2, [r3, #4]
 8001ec4:	e7ec      	b.n	8001ea0 <_malloc_r+0xa0>
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	6864      	ldr	r4, [r4, #4]
 8001eca:	e7b2      	b.n	8001e32 <_malloc_r+0x32>
 8001ecc:	4634      	mov	r4, r6
 8001ece:	6876      	ldr	r6, [r6, #4]
 8001ed0:	e7b9      	b.n	8001e46 <_malloc_r+0x46>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	f000 f8b6 	bl	8002048 <__malloc_unlock>
 8001edc:	e7a1      	b.n	8001e22 <_malloc_r+0x22>
 8001ede:	6025      	str	r5, [r4, #0]
 8001ee0:	e7de      	b.n	8001ea0 <_malloc_r+0xa0>
 8001ee2:	bf00      	nop
 8001ee4:	200000ac 	.word	0x200000ac

08001ee8 <_sbrk_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4d06      	ldr	r5, [pc, #24]	; (8001f04 <_sbrk_r+0x1c>)
 8001eec:	2300      	movs	r3, #0
 8001eee:	4604      	mov	r4, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	602b      	str	r3, [r5, #0]
 8001ef4:	f7ff fa3e 	bl	8001374 <_sbrk>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_sbrk_r+0x1a>
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_sbrk_r+0x1a>
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	200000b4 	.word	0x200000b4

08001f08 <__sread>:
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f10:	f000 f8a0 	bl	8002054 <_read_r>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	bfab      	itete	ge
 8001f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8001f1c:	181b      	addge	r3, r3, r0
 8001f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f22:	bfac      	ite	ge
 8001f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f26:	81a3      	strhlt	r3, [r4, #12]
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <__swrite>:
 8001f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2e:	461f      	mov	r7, r3
 8001f30:	898b      	ldrh	r3, [r1, #12]
 8001f32:	05db      	lsls	r3, r3, #23
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	4616      	mov	r6, r2
 8001f3a:	d505      	bpl.n	8001f48 <__swrite+0x1e>
 8001f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f40:	2302      	movs	r3, #2
 8001f42:	2200      	movs	r2, #0
 8001f44:	f000 f868 	bl	8002018 <_lseek_r>
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f52:	81a3      	strh	r3, [r4, #12]
 8001f54:	4632      	mov	r2, r6
 8001f56:	463b      	mov	r3, r7
 8001f58:	4628      	mov	r0, r5
 8001f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f5e:	f000 b817 	b.w	8001f90 <_write_r>

08001f62 <__sseek>:
 8001f62:	b510      	push	{r4, lr}
 8001f64:	460c      	mov	r4, r1
 8001f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f6a:	f000 f855 	bl	8002018 <_lseek_r>
 8001f6e:	1c43      	adds	r3, r0, #1
 8001f70:	89a3      	ldrh	r3, [r4, #12]
 8001f72:	bf15      	itete	ne
 8001f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f7e:	81a3      	strheq	r3, [r4, #12]
 8001f80:	bf18      	it	ne
 8001f82:	81a3      	strhne	r3, [r4, #12]
 8001f84:	bd10      	pop	{r4, pc}

08001f86 <__sclose>:
 8001f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f8a:	f000 b813 	b.w	8001fb4 <_close_r>
	...

08001f90 <_write_r>:
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	4d07      	ldr	r5, [pc, #28]	; (8001fb0 <_write_r+0x20>)
 8001f94:	4604      	mov	r4, r0
 8001f96:	4608      	mov	r0, r1
 8001f98:	4611      	mov	r1, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	602a      	str	r2, [r5, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f7ff f89e 	bl	80010e0 <_write>
 8001fa4:	1c43      	adds	r3, r0, #1
 8001fa6:	d102      	bne.n	8001fae <_write_r+0x1e>
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	b103      	cbz	r3, 8001fae <_write_r+0x1e>
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
 8001fb0:	200000b4 	.word	0x200000b4

08001fb4 <_close_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4d06      	ldr	r5, [pc, #24]	; (8001fd0 <_close_r+0x1c>)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	602b      	str	r3, [r5, #0]
 8001fc0:	f7ff f9a3 	bl	800130a <_close>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_close_r+0x1a>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_close_r+0x1a>
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	200000b4 	.word	0x200000b4

08001fd4 <_fstat_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4d07      	ldr	r5, [pc, #28]	; (8001ff4 <_fstat_r+0x20>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	602b      	str	r3, [r5, #0]
 8001fe2:	f7ff f99e 	bl	8001322 <_fstat>
 8001fe6:	1c43      	adds	r3, r0, #1
 8001fe8:	d102      	bne.n	8001ff0 <_fstat_r+0x1c>
 8001fea:	682b      	ldr	r3, [r5, #0]
 8001fec:	b103      	cbz	r3, 8001ff0 <_fstat_r+0x1c>
 8001fee:	6023      	str	r3, [r4, #0]
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000b4 	.word	0x200000b4

08001ff8 <_isatty_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4d06      	ldr	r5, [pc, #24]	; (8002014 <_isatty_r+0x1c>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	f7ff f99d 	bl	8001342 <_isatty>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_isatty_r+0x1a>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_isatty_r+0x1a>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	200000b4 	.word	0x200000b4

08002018 <_lseek_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <_lseek_r+0x20>)
 800201c:	4604      	mov	r4, r0
 800201e:	4608      	mov	r0, r1
 8002020:	4611      	mov	r1, r2
 8002022:	2200      	movs	r2, #0
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff f996 	bl	8001358 <_lseek>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_lseek_r+0x1e>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_lseek_r+0x1e>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	200000b4 	.word	0x200000b4

0800203c <__malloc_lock>:
 800203c:	4801      	ldr	r0, [pc, #4]	; (8002044 <__malloc_lock+0x8>)
 800203e:	f7ff be0b 	b.w	8001c58 <__retarget_lock_acquire_recursive>
 8002042:	bf00      	nop
 8002044:	200000a8 	.word	0x200000a8

08002048 <__malloc_unlock>:
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <__malloc_unlock+0x8>)
 800204a:	f7ff be06 	b.w	8001c5a <__retarget_lock_release_recursive>
 800204e:	bf00      	nop
 8002050:	200000a8 	.word	0x200000a8

08002054 <_read_r>:
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	4d07      	ldr	r5, [pc, #28]	; (8002074 <_read_r+0x20>)
 8002058:	4604      	mov	r4, r0
 800205a:	4608      	mov	r0, r1
 800205c:	4611      	mov	r1, r2
 800205e:	2200      	movs	r2, #0
 8002060:	602a      	str	r2, [r5, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff f934 	bl	80012d0 <_read>
 8002068:	1c43      	adds	r3, r0, #1
 800206a:	d102      	bne.n	8002072 <_read_r+0x1e>
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	b103      	cbz	r3, 8002072 <_read_r+0x1e>
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	200000b4 	.word	0x200000b4

08002078 <_init>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr

08002084 <_fini>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr
