
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001914  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001af4  08001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bb4  08001bb4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000044  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e34  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b23  00000000  00000000  00022ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  000239f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00023c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015027  00000000  00000000  00023d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003742  00000000  00000000  00038d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076321  00000000  00000000  0003c4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b2802  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000db8  00000000  00000000  000b2854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08001adc 	.word	0x08001adc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08001adc 	.word	0x08001adc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 80002c4:	4b4c      	ldr	r3, [pc, #304]	; (80003f8 <sysClockConfig+0x138>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a4b      	ldr	r2, [pc, #300]	; (80003f8 <sysClockConfig+0x138>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 80002d0:	4b4a      	ldr	r3, [pc, #296]	; (80003fc <sysClockConfig+0x13c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a49      	ldr	r2, [pc, #292]	; (80003fc <sysClockConfig+0x13c>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 80002dc:	bf00      	nop
 80002de:	4b47      	ldr	r3, [pc, #284]	; (80003fc <sysClockConfig+0x13c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <sysClockConfig+0x1e>

	//RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_PWREN_Pos);


	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 80002ea:	4b44      	ldr	r3, [pc, #272]	; (80003fc <sysClockConfig+0x13c>)
 80002ec:	4a43      	ldr	r2, [pc, #268]	; (80003fc <sysClockConfig+0x13c>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 80002f2:	4b42      	ldr	r3, [pc, #264]	; (80003fc <sysClockConfig+0x13c>)
 80002f4:	4a41      	ldr	r2, [pc, #260]	; (80003fc <sysClockConfig+0x13c>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 80002fa:	4b40      	ldr	r3, [pc, #256]	; (80003fc <sysClockConfig+0x13c>)
 80002fc:	4a3f      	ldr	r2, [pc, #252]	; (80003fc <sysClockConfig+0x13c>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 8000302:	4b3e      	ldr	r3, [pc, #248]	; (80003fc <sysClockConfig+0x13c>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a3d      	ldr	r2, [pc, #244]	; (80003fc <sysClockConfig+0x13c>)
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 800030e:	4b3b      	ldr	r3, [pc, #236]	; (80003fc <sysClockConfig+0x13c>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a3a      	ldr	r2, [pc, #232]	; (80003fc <sysClockConfig+0x13c>)
 8000314:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000318:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <sysClockConfig+0x13c>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a37      	ldr	r2, [pc, #220]	; (80003fc <sysClockConfig+0x13c>)
 8000320:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000324:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 8000326:	4b35      	ldr	r3, [pc, #212]	; (80003fc <sysClockConfig+0x13c>)
 8000328:	4a34      	ldr	r2, [pc, #208]	; (80003fc <sysClockConfig+0x13c>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <sysClockConfig+0x13c>)
 8000330:	4a32      	ldr	r2, [pc, #200]	; (80003fc <sysClockConfig+0x13c>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 8000336:	4b31      	ldr	r3, [pc, #196]	; (80003fc <sysClockConfig+0x13c>)
 8000338:	4a30      	ldr	r2, [pc, #192]	; (80003fc <sysClockConfig+0x13c>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 800033e:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <sysClockConfig+0x13c>)
 8000340:	4a2e      	ldr	r2, [pc, #184]	; (80003fc <sysClockConfig+0x13c>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <sysClockConfig+0x13c>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <sysClockConfig+0x13c>)
 800034c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000350:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 8000352:	4b2a      	ldr	r3, [pc, #168]	; (80003fc <sysClockConfig+0x13c>)
 8000354:	4a29      	ldr	r2, [pc, #164]	; (80003fc <sysClockConfig+0x13c>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <sysClockConfig+0x13c>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4a27      	ldr	r2, [pc, #156]	; (80003fc <sysClockConfig+0x13c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <sysClockConfig+0x13c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a24      	ldr	r2, [pc, #144]	; (80003fc <sysClockConfig+0x13c>)
 800036c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000370:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 8000372:	bf00      	nop
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <sysClockConfig+0x13c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <sysClockConfig+0x13c>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <sysClockConfig+0x13c>)
 8000386:	f043 0303 	orr.w	r3, r3, #3
 800038a:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 800038c:	bf00      	nop
 800038e:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <sysClockConfig+0x13c>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f003 030c 	and.w	r3, r3, #12
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <sysClockConfig+0x13c>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <sysClockConfig+0x13c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <sysClockConfig+0x13c>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	4a14      	ldr	r2, [pc, #80]	; (80003fc <sysClockConfig+0x13c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <sysClockConfig+0x13c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a11      	ldr	r2, [pc, #68]	; (80003fc <sysClockConfig+0x13c>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <sysClockConfig+0x13c>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <sysClockConfig+0x13c>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM4
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_PWREN_Pos);
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <sysClockConfig+0x13c>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <sysClockConfig+0x13c>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <sysClockConfig+0x13c>)
 80003d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <sysClockConfig+0x13c>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6593      	str	r3, [r2, #88]	; 0x58

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <sysClockConfig+0x13c>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <sysClockConfig+0x13c>)
 80003e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ec:	6613      	str	r3, [r2, #96]	; 0x60


}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40022000 	.word	0x40022000
 80003fc:	40021000 	.word	0x40021000

08000400 <encoderRotation>:
 * State machine for detecting encoder rotation.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 *
 */
int32_t encoderRotation()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000408:	482d      	ldr	r0, [pc, #180]	; (80004c0 <encoderRotation+0xc0>)
 800040a:	f000 f91f 	bl	800064c <readPin>
 800040e:	4603      	mov	r3, r0
 8000410:	b25a      	sxtb	r2, r3
 8000412:	4b2c      	ldr	r3, [pc, #176]	; (80004c4 <encoderRotation+0xc4>)
 8000414:	701a      	strb	r2, [r3, #0]
currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 8000416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800041a:	4829      	ldr	r0, [pc, #164]	; (80004c0 <encoderRotation+0xc0>)
 800041c:	f000 f916 	bl	800064c <readPin>
 8000420:	4603      	mov	r3, r0
 8000422:	b25a      	sxtb	r2, r3
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <encoderRotation+0xc8>)
 8000426:	701a      	strb	r2, [r3, #0]

  if (currentStateCLK != currentStateDT) { 			//encoder is moving
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <encoderRotation+0xc4>)
 800042a:	f993 2000 	ldrsb.w	r2, [r3]
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <encoderRotation+0xc8>)
 8000430:	f993 3000 	ldrsb.w	r3, [r3]
 8000434:	429a      	cmp	r2, r3
 8000436:	d00f      	beq.n	8000458 <encoderRotation+0x58>
    if (currentStateCLK != lastStateCLK) { 			//CLK changed first; CW
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <encoderRotation+0xc4>)
 800043a:	f993 2000 	ldrsb.w	r2, [r3]
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <encoderRotation+0xcc>)
 8000440:	f993 3000 	ldrsb.w	r3, [r3]
 8000444:	429a      	cmp	r2, r3
 8000446:	d003      	beq.n	8000450 <encoderRotation+0x50>
    	rotationDirection = 1;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <encoderRotation+0xd0>)
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
 800044e:	e019      	b.n	8000484 <encoderRotation+0x84>
    }
     else {											//else DT changed first; CCW
    	rotationDirection = -1;
 8000450:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <encoderRotation+0xd0>)
 8000452:	22ff      	movs	r2, #255	; 0xff
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	e015      	b.n	8000484 <encoderRotation+0x84>
    }
  }
    else { 							    		    //both pins are at same state, so encoder has stopped moving
    if (currentStateCLK != lastStateCLK) {
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <encoderRotation+0xc4>)
 800045a:	f993 2000 	ldrsb.w	r2, [r3]
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <encoderRotation+0xcc>)
 8000460:	f993 3000 	ldrsb.w	r3, [r3]
 8000464:	429a      	cmp	r2, r3
 8000466:	d008      	beq.n	800047a <encoderRotation+0x7a>
      counter += rotationDirection;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <encoderRotation+0xd0>)
 800046a:	f993 3000 	ldrsb.w	r3, [r3]
 800046e:	461a      	mov	r2, r3
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <encoderRotation+0xd4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4413      	add	r3, r2
 8000476:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <encoderRotation+0xd4>)
 8000478:	6013      	str	r3, [r2, #0]
     }
    lastStateCLK = currentStateCLK;  				//update last CLK state to be ready to detect next movement
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <encoderRotation+0xc4>)
 800047c:	f993 2000 	ldrsb.w	r2, [r3]
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <encoderRotation+0xcc>)
 8000482:	701a      	strb	r2, [r3, #0]
  }
  if (counter < 0)
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <encoderRotation+0xd4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	da05      	bge.n	8000498 <encoderRotation+0x98>
    counter = counter + 30;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <encoderRotation+0xd4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	331e      	adds	r3, #30
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <encoderRotation+0xd4>)
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e00f      	b.n	80004b8 <encoderRotation+0xb8>
  else
   counter = counter % 30;
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <encoderRotation+0xd4>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <encoderRotation+0xd8>)
 800049e:	fb83 1302 	smull	r1, r3, r3, r2
 80004a2:	4413      	add	r3, r2
 80004a4:	1119      	asrs	r1, r3, #4
 80004a6:	17d3      	asrs	r3, r2, #31
 80004a8:	1ac9      	subs	r1, r1, r3
 80004aa:	460b      	mov	r3, r1
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	1a5b      	subs	r3, r3, r1
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	1ad1      	subs	r1, r2, r3
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <encoderRotation+0xd4>)
 80004b6:	6019      	str	r1, [r3, #0]

 return counter;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <encoderRotation+0xd4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	48000400 	.word	0x48000400
 80004c4:	20000081 	.word	0x20000081
 80004c8:	20000082 	.word	0x20000082
 80004cc:	20000080 	.word	0x20000080
 80004d0:	20000088 	.word	0x20000088
 80004d4:	20000084 	.word	0x20000084
 80004d8:	88888889 	.word	0x88888889

080004dc <gpioInit>:

#include <gpio.h>
#include <stm32g431xx.h>


void gpioInit(){
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	//GPIOC->MODER = 0xFFFFFFFF;



	//set PB13, PB14, PB15 set as inputs (rotary encoder)
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 80004e0:	4b58      	ldr	r3, [pc, #352]	; (8000644 <gpioInit+0x168>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a57      	ldr	r2, [pc, #348]	; (8000644 <gpioInit+0x168>)
 80004e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80004ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 80004ec:	4b55      	ldr	r3, [pc, #340]	; (8000644 <gpioInit+0x168>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a54      	ldr	r2, [pc, #336]	; (8000644 <gpioInit+0x168>)
 80004f2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 80004f8:	4b52      	ldr	r3, [pc, #328]	; (8000644 <gpioInit+0x168>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a51      	ldr	r2, [pc, #324]	; (8000644 <gpioInit+0x168>)
 80004fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000502:	6013      	str	r3, [r2, #0]

	//set pull-up pull-down register for inputs
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8000504:	4b4f      	ldr	r3, [pc, #316]	; (8000644 <gpioInit+0x168>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a4e      	ldr	r2, [pc, #312]	; (8000644 <gpioInit+0x168>)
 800050a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800050e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 8000510:	4b4c      	ldr	r3, [pc, #304]	; (8000644 <gpioInit+0x168>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a4b      	ldr	r2, [pc, #300]	; (8000644 <gpioInit+0x168>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 800051c:	4b49      	ldr	r3, [pc, #292]	; (8000644 <gpioInit+0x168>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a48      	ldr	r2, [pc, #288]	; (8000644 <gpioInit+0x168>)
 8000522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000526:	60d3      	str	r3, [r2, #12]



	//set PA6, PA9, PC7 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);  //Display_DC
 8000528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000536:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);  //Motor Driver In2
 8000538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000546:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);  //Motor Driver In1
 8000548:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <gpioInit+0x16c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3e      	ldr	r2, [pc, #248]	; (8000648 <gpioInit+0x16c>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]

	//set PA6, PA9, PC7 as push-pull output
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE6_Pos);
 8000554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000562:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 8000564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000572:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <gpioInit+0x16c>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a33      	ldr	r2, [pc, #204]	; (8000648 <gpioInit+0x16c>)
 800057a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800057e:	6053      	str	r3, [r2, #4]



	//set PA11, PA12 to alternate function mode (TIM4)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059e:	6013      	str	r3, [r2, #0]

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80005ae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80005be:	6253      	str	r3, [r2, #36]	; 0x24

	//set PB6 to alternate function mode AF5 (TIM8)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <gpioInit+0x168>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <gpioInit+0x168>)
 80005c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <gpioInit+0x168>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <gpioInit+0x168>)
 80005d2:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80005d6:	6213      	str	r3, [r2, #32]

	//set PA4, PA5, PA7 to alternate function mode (SPI1)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE4_Pos);
 80005d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 80005e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 80005f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS
 8000608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060c:	6a1b      	ldr	r3, [r3, #32]
 800060e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000612:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000616:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 8000618:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800061c:	6a1b      	ldr	r3, [r3, #32]
 800061e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000622:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000626:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 8000628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000632:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000636:	6213      	str	r3, [r2, #32]

	//set PA0? to ADC input

}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	48000400 	.word	0x48000400
 8000648:	48000800 	.word	0x48000800

0800064c <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15.
 * Returns: 0 or 1 for state of pin.
 */

int32_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & GPIO_PIN_x) != 0) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	691a      	ldr	r2, [r3, #16]
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <readPin+0x1c>
		return 1;
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <readPin+0x1e>
	}
	else {
		return 0;
 8000668:	2300      	movs	r3, #0
	}
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	; (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <interruptInit>:
3. Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
EXTI so that an interrupt coming from one of the EXTI lines can be correctly
acknowledged.
**/

void interruptInit(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c
//EXTI12, EXTI Line12 Interrupt, SYSCFG_EXTICR4 - PB15 (Rotary Encoder SW)
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <interruptInit+0x3c>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <interruptInit+0x3c>)
 8000712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000716:	6153      	str	r3, [r2, #20]
//EXTI0, EXTI Line0 Interrupt, SYSCFG_EXTICR1 - PF0 (Rotary Encoder SW)
//SYSCFG->EXTICR[0] |= (0x05 << SYSCFG_EXTICR1_EXTI0_Pos);

//set interrupts to maskable
EXTI->IMR1 &= ~(0x01 << EXTI_IMR1_IM15_Pos);
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <interruptInit+0x40>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <interruptInit+0x40>)
 800071e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000722:	6013      	str	r3, [r2, #0]
//set interrupts to trigger on rising edge
//EXTI->RTSR1 |= (0x01 << EXTI_RTSR1_RT12_Pos);
//EXTI->RTSR1 |= (0x01 << EXTI_RTSR1_RT0_Pos);

//set interrupts to trigger on falling edge
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <interruptInit+0x40>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <interruptInit+0x40>)
 800072a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072e:	60d3      	str	r3, [r2, #12]
//EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT0_Pos);


NVIC_SetPriority(EXTI15_10_IRQn, 0);
 8000730:	2100      	movs	r1, #0
 8000732:	2028      	movs	r0, #40	; 0x28
 8000734:	f7ff ffbe 	bl	80006b4 <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000738:	2028      	movs	r0, #40	; 0x28
 800073a:	f7ff ff9d 	bl	8000678 <__NVIC_EnableIRQ>


}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010000 	.word	0x40010000
 8000748:	40010400 	.word	0x40010400

0800074c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000754:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000758:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d013      	beq.n	800078c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000768:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800076c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00b      	beq.n	800078c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000774:	e000      	b.n	8000778 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000776:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000778:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000782:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <main>:
int32_t button;



int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	sysClockConfig();
 80007a0:	f7ff fd8e 	bl	80002c0 <sysClockConfig>
	gpioInit();
 80007a4:	f7ff fe9a 	bl	80004dc <gpioInit>
	interruptInit();
 80007a8:	f7ff ffae 	bl	8000708 <interruptInit>
	TIM4Init();
 80007ac:	f000 f8dc 	bl	8000968 <TIM4Init>
	printf("Initialization done\n");
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x44>)
 80007b2:	f000 fcaf 	bl	8001114 <puts>


	printf("Timer Count: %d\n", TIM4->CNT);
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x48>)
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <main+0x4c>)
 80007be:	f000 fc23 	bl	8001008 <iprintf>

	while(1){
		count = encoderRotation();
 80007c2:	f7ff fe1d 	bl	8000400 <encoderRotation>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <main+0x50>)
 80007ca:	6013      	str	r3, [r2, #0]
		button = readPin(ENC_CLK_PORT, ENC_SW_PIN);
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	4807      	ldr	r0, [pc, #28]	; (80007f0 <main+0x54>)
 80007d2:	f7ff ff3b 	bl	800064c <readPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <main+0x58>)
 80007da:	6013      	str	r3, [r2, #0]
		count = encoderRotation();
 80007dc:	e7f1      	b.n	80007c2 <main+0x26>
 80007de:	bf00      	nop
 80007e0:	08001af4 	.word	0x08001af4
 80007e4:	40000800 	.word	0x40000800
 80007e8:	08001b08 	.word	0x08001b08
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	48000400 	.word	0x48000400
 80007f4:	20000090 	.word	0x20000090

080007f8 <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  int i=0;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e009      	b.n	8000822 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff98 	bl	800074c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbf1      	blt.n	800080e <_write+0x16>
  return len;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000846:	f3af 8000 	nop.w
 800084a:	4601      	mov	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
  }

  return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:
  }
  return len;
}

int _close(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	605a      	str	r2, [r3, #4]
  return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_isatty>:

int _isatty(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f000 f8b0 	bl	8000a6c <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20008000 	.word	0x20008000
 8000938:	00000400 	.word	0x00000400
 800093c:	20000094 	.word	0x20000094
 8000940:	200000a8 	.word	0x200000a8

08000944 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <TIM4Init>:

#include <timer.h>
#include <stm32g431xx.h>


void TIM4Init(){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);    //both inputs are active on both rising and falling edges
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <TIM4Init+0xac>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <TIM4Init+0xac>)
 8000972:	f043 0303 	orr.w	r3, r3, #3
 8000976:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <TIM4Init+0xac>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <TIM4Init+0xac>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <TIM4Init+0xac>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <TIM4Init+0xac>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);   //set input filter on capture 1
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <TIM4Init+0xac>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <TIM4Init+0xac>)
 8000996:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800099a:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);   //set input filter on capture 2
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <TIM4Init+0xac>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <TIM4Init+0xac>)
 80009a2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80009a6:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);    //tim_ti1fp1 noninverted
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <TIM4Init+0xac>)
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <TIM4Init+0xac>)
 80009ae:	f023 0302 	bic.w	r3, r3, #2
 80009b2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <TIM4Init+0xac>)
 80009b6:	6a1b      	ldr	r3, [r3, #32]
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <TIM4Init+0xac>)
 80009ba:	f023 0308 	bic.w	r3, r3, #8
 80009be:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);    //tim_ti2fp2 noninverted
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <TIM4Init+0xac>)
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <TIM4Init+0xac>)
 80009c6:	f023 0320 	bic.w	r3, r3, #32
 80009ca:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <TIM4Init+0xac>)
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <TIM4Init+0xac>)
 80009d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009d6:	6213      	str	r3, [r2, #32]
	TIM4->PSC &= ~(0x01 << TIM_PSC_PSC_Pos);	   //prescalar set to 0
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <TIM4Init+0xac>)
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <TIM4Init+0xac>)
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	   //enable auto-reload preload
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <TIM4Init+0xac>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <TIM4Init+0xac>)
 80009ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ee:	6013      	str	r3, [r2, #0]
	TIM4->ARR |= (0x00FF << TIM_ARR_ARR_Pos);	   //auto-reload register
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <TIM4Init+0xac>)
 80009f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <TIM4Init+0xac>)
 80009f6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80009fa:	62d3      	str	r3, [r2, #44]	; 0x2c
	//TIM4->CR1 |= (0x01 << TIM_CR1_UIFREMAP_Pos);   //remap UIF status bit to TIM_CNT bit 31

	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <TIM4Init+0xac>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <TIM4Init+0xac>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40000800 	.word	0x40000800

08000a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a1c:	f7ff ff92 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a46:	f000 f9cf 	bl	8000de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4a:	f7ff fea7 	bl	800079c <main>

08000a4e <LoopForever>:

LoopForever:
  b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   r0, =_estack
 8000a50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a5c:	08001bbc 	.word	0x08001bbc
  ldr r2, =_sbss
 8000a60:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a64:	200000a8 	.word	0x200000a8

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <__errno>:
 8000a6c:	4b01      	ldr	r3, [pc, #4]	; (8000a74 <__errno+0x8>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000

08000a78 <__sflush_r>:
 8000a78:	898a      	ldrh	r2, [r1, #12]
 8000a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a7e:	4605      	mov	r5, r0
 8000a80:	0710      	lsls	r0, r2, #28
 8000a82:	460c      	mov	r4, r1
 8000a84:	d458      	bmi.n	8000b38 <__sflush_r+0xc0>
 8000a86:	684b      	ldr	r3, [r1, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	dc05      	bgt.n	8000a98 <__sflush_r+0x20>
 8000a8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dc02      	bgt.n	8000a98 <__sflush_r+0x20>
 8000a92:	2000      	movs	r0, #0
 8000a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d0f9      	beq.n	8000a92 <__sflush_r+0x1a>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000aa4:	682f      	ldr	r7, [r5, #0]
 8000aa6:	602b      	str	r3, [r5, #0]
 8000aa8:	d032      	beq.n	8000b10 <__sflush_r+0x98>
 8000aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000aac:	89a3      	ldrh	r3, [r4, #12]
 8000aae:	075a      	lsls	r2, r3, #29
 8000ab0:	d505      	bpl.n	8000abe <__sflush_r+0x46>
 8000ab2:	6863      	ldr	r3, [r4, #4]
 8000ab4:	1ac0      	subs	r0, r0, r3
 8000ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab8:	b10b      	cbz	r3, 8000abe <__sflush_r+0x46>
 8000aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000abc:	1ac0      	subs	r0, r0, r3
 8000abe:	2300      	movs	r3, #0
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ac4:	6a21      	ldr	r1, [r4, #32]
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	47b0      	blx	r6
 8000aca:	1c43      	adds	r3, r0, #1
 8000acc:	89a3      	ldrh	r3, [r4, #12]
 8000ace:	d106      	bne.n	8000ade <__sflush_r+0x66>
 8000ad0:	6829      	ldr	r1, [r5, #0]
 8000ad2:	291d      	cmp	r1, #29
 8000ad4:	d82c      	bhi.n	8000b30 <__sflush_r+0xb8>
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <__sflush_r+0x108>)
 8000ad8:	40ca      	lsrs	r2, r1
 8000ada:	07d6      	lsls	r6, r2, #31
 8000adc:	d528      	bpl.n	8000b30 <__sflush_r+0xb8>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6062      	str	r2, [r4, #4]
 8000ae2:	04d9      	lsls	r1, r3, #19
 8000ae4:	6922      	ldr	r2, [r4, #16]
 8000ae6:	6022      	str	r2, [r4, #0]
 8000ae8:	d504      	bpl.n	8000af4 <__sflush_r+0x7c>
 8000aea:	1c42      	adds	r2, r0, #1
 8000aec:	d101      	bne.n	8000af2 <__sflush_r+0x7a>
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	b903      	cbnz	r3, 8000af4 <__sflush_r+0x7c>
 8000af2:	6560      	str	r0, [r4, #84]	; 0x54
 8000af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000af6:	602f      	str	r7, [r5, #0]
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d0ca      	beq.n	8000a92 <__sflush_r+0x1a>
 8000afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d002      	beq.n	8000b0a <__sflush_r+0x92>
 8000b04:	4628      	mov	r0, r5
 8000b06:	f000 f99f 	bl	8000e48 <_free_r>
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8000b0e:	e7c1      	b.n	8000a94 <__sflush_r+0x1c>
 8000b10:	6a21      	ldr	r1, [r4, #32]
 8000b12:	2301      	movs	r3, #1
 8000b14:	4628      	mov	r0, r5
 8000b16:	47b0      	blx	r6
 8000b18:	1c41      	adds	r1, r0, #1
 8000b1a:	d1c7      	bne.n	8000aac <__sflush_r+0x34>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0c4      	beq.n	8000aac <__sflush_r+0x34>
 8000b22:	2b1d      	cmp	r3, #29
 8000b24:	d001      	beq.n	8000b2a <__sflush_r+0xb2>
 8000b26:	2b16      	cmp	r3, #22
 8000b28:	d101      	bne.n	8000b2e <__sflush_r+0xb6>
 8000b2a:	602f      	str	r7, [r5, #0]
 8000b2c:	e7b1      	b.n	8000a92 <__sflush_r+0x1a>
 8000b2e:	89a3      	ldrh	r3, [r4, #12]
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	81a3      	strh	r3, [r4, #12]
 8000b36:	e7ad      	b.n	8000a94 <__sflush_r+0x1c>
 8000b38:	690f      	ldr	r7, [r1, #16]
 8000b3a:	2f00      	cmp	r7, #0
 8000b3c:	d0a9      	beq.n	8000a92 <__sflush_r+0x1a>
 8000b3e:	0793      	lsls	r3, r2, #30
 8000b40:	680e      	ldr	r6, [r1, #0]
 8000b42:	bf08      	it	eq
 8000b44:	694b      	ldreq	r3, [r1, #20]
 8000b46:	600f      	str	r7, [r1, #0]
 8000b48:	bf18      	it	ne
 8000b4a:	2300      	movne	r3, #0
 8000b4c:	eba6 0807 	sub.w	r8, r6, r7
 8000b50:	608b      	str	r3, [r1, #8]
 8000b52:	f1b8 0f00 	cmp.w	r8, #0
 8000b56:	dd9c      	ble.n	8000a92 <__sflush_r+0x1a>
 8000b58:	6a21      	ldr	r1, [r4, #32]
 8000b5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	463a      	mov	r2, r7
 8000b60:	4628      	mov	r0, r5
 8000b62:	47b0      	blx	r6
 8000b64:	2800      	cmp	r0, #0
 8000b66:	dc06      	bgt.n	8000b76 <__sflush_r+0xfe>
 8000b68:	89a3      	ldrh	r3, [r4, #12]
 8000b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6e:	81a3      	strh	r3, [r4, #12]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	e78e      	b.n	8000a94 <__sflush_r+0x1c>
 8000b76:	4407      	add	r7, r0
 8000b78:	eba8 0800 	sub.w	r8, r8, r0
 8000b7c:	e7e9      	b.n	8000b52 <__sflush_r+0xda>
 8000b7e:	bf00      	nop
 8000b80:	20400001 	.word	0x20400001

08000b84 <_fflush_r>:
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	690b      	ldr	r3, [r1, #16]
 8000b88:	4605      	mov	r5, r0
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	b913      	cbnz	r3, 8000b94 <_fflush_r+0x10>
 8000b8e:	2500      	movs	r5, #0
 8000b90:	4628      	mov	r0, r5
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
 8000b94:	b118      	cbz	r0, 8000b9e <_fflush_r+0x1a>
 8000b96:	6983      	ldr	r3, [r0, #24]
 8000b98:	b90b      	cbnz	r3, 8000b9e <_fflush_r+0x1a>
 8000b9a:	f000 f887 	bl	8000cac <__sinit>
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <_fflush_r+0x6c>)
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	d11b      	bne.n	8000bdc <_fflush_r+0x58>
 8000ba4:	686c      	ldr	r4, [r5, #4]
 8000ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0ef      	beq.n	8000b8e <_fflush_r+0xa>
 8000bae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bb0:	07d0      	lsls	r0, r2, #31
 8000bb2:	d404      	bmi.n	8000bbe <_fflush_r+0x3a>
 8000bb4:	0599      	lsls	r1, r3, #22
 8000bb6:	d402      	bmi.n	8000bbe <_fflush_r+0x3a>
 8000bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bba:	f000 f93a 	bl	8000e32 <__retarget_lock_acquire_recursive>
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	f7ff ff59 	bl	8000a78 <__sflush_r>
 8000bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bc8:	07da      	lsls	r2, r3, #31
 8000bca:	4605      	mov	r5, r0
 8000bcc:	d4e0      	bmi.n	8000b90 <_fflush_r+0xc>
 8000bce:	89a3      	ldrh	r3, [r4, #12]
 8000bd0:	059b      	lsls	r3, r3, #22
 8000bd2:	d4dd      	bmi.n	8000b90 <_fflush_r+0xc>
 8000bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bd6:	f000 f92d 	bl	8000e34 <__retarget_lock_release_recursive>
 8000bda:	e7d9      	b.n	8000b90 <_fflush_r+0xc>
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <_fflush_r+0x70>)
 8000bde:	429c      	cmp	r4, r3
 8000be0:	d101      	bne.n	8000be6 <_fflush_r+0x62>
 8000be2:	68ac      	ldr	r4, [r5, #8]
 8000be4:	e7df      	b.n	8000ba6 <_fflush_r+0x22>
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <_fflush_r+0x74>)
 8000be8:	429c      	cmp	r4, r3
 8000bea:	bf08      	it	eq
 8000bec:	68ec      	ldreq	r4, [r5, #12]
 8000bee:	e7da      	b.n	8000ba6 <_fflush_r+0x22>
 8000bf0:	08001b3c 	.word	0x08001b3c
 8000bf4:	08001b5c 	.word	0x08001b5c
 8000bf8:	08001b1c 	.word	0x08001b1c

08000bfc <std>:
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	b510      	push	{r4, lr}
 8000c00:	4604      	mov	r4, r0
 8000c02:	e9c0 3300 	strd	r3, r3, [r0]
 8000c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c0a:	6083      	str	r3, [r0, #8]
 8000c0c:	8181      	strh	r1, [r0, #12]
 8000c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8000c10:	81c2      	strh	r2, [r0, #14]
 8000c12:	6183      	str	r3, [r0, #24]
 8000c14:	4619      	mov	r1, r3
 8000c16:	2208      	movs	r2, #8
 8000c18:	305c      	adds	r0, #92	; 0x5c
 8000c1a:	f000 f90c 	bl	8000e36 <memset>
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <std+0x38>)
 8000c20:	6263      	str	r3, [r4, #36]	; 0x24
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <std+0x3c>)
 8000c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <std+0x40>)
 8000c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <std+0x44>)
 8000c2c:	6224      	str	r4, [r4, #32]
 8000c2e:	6323      	str	r3, [r4, #48]	; 0x30
 8000c30:	bd10      	pop	{r4, pc}
 8000c32:	bf00      	nop
 8000c34:	08001145 	.word	0x08001145
 8000c38:	08001167 	.word	0x08001167
 8000c3c:	0800119f 	.word	0x0800119f
 8000c40:	080011c3 	.word	0x080011c3

08000c44 <_cleanup_r>:
 8000c44:	4901      	ldr	r1, [pc, #4]	; (8000c4c <_cleanup_r+0x8>)
 8000c46:	f000 b8af 	b.w	8000da8 <_fwalk_reent>
 8000c4a:	bf00      	nop
 8000c4c:	08000b85 	.word	0x08000b85

08000c50 <__sfmoreglue>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2268      	movs	r2, #104	; 0x68
 8000c54:	1e4d      	subs	r5, r1, #1
 8000c56:	4355      	muls	r5, r2
 8000c58:	460e      	mov	r6, r1
 8000c5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c5e:	f000 f95f 	bl	8000f20 <_malloc_r>
 8000c62:	4604      	mov	r4, r0
 8000c64:	b140      	cbz	r0, 8000c78 <__sfmoreglue+0x28>
 8000c66:	2100      	movs	r1, #0
 8000c68:	e9c0 1600 	strd	r1, r6, [r0]
 8000c6c:	300c      	adds	r0, #12
 8000c6e:	60a0      	str	r0, [r4, #8]
 8000c70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c74:	f000 f8df 	bl	8000e36 <memset>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}

08000c7c <__sfp_lock_acquire>:
 8000c7c:	4801      	ldr	r0, [pc, #4]	; (8000c84 <__sfp_lock_acquire+0x8>)
 8000c7e:	f000 b8d8 	b.w	8000e32 <__retarget_lock_acquire_recursive>
 8000c82:	bf00      	nop
 8000c84:	20000099 	.word	0x20000099

08000c88 <__sfp_lock_release>:
 8000c88:	4801      	ldr	r0, [pc, #4]	; (8000c90 <__sfp_lock_release+0x8>)
 8000c8a:	f000 b8d3 	b.w	8000e34 <__retarget_lock_release_recursive>
 8000c8e:	bf00      	nop
 8000c90:	20000099 	.word	0x20000099

08000c94 <__sinit_lock_acquire>:
 8000c94:	4801      	ldr	r0, [pc, #4]	; (8000c9c <__sinit_lock_acquire+0x8>)
 8000c96:	f000 b8cc 	b.w	8000e32 <__retarget_lock_acquire_recursive>
 8000c9a:	bf00      	nop
 8000c9c:	2000009a 	.word	0x2000009a

08000ca0 <__sinit_lock_release>:
 8000ca0:	4801      	ldr	r0, [pc, #4]	; (8000ca8 <__sinit_lock_release+0x8>)
 8000ca2:	f000 b8c7 	b.w	8000e34 <__retarget_lock_release_recursive>
 8000ca6:	bf00      	nop
 8000ca8:	2000009a 	.word	0x2000009a

08000cac <__sinit>:
 8000cac:	b510      	push	{r4, lr}
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fff0 	bl	8000c94 <__sinit_lock_acquire>
 8000cb4:	69a3      	ldr	r3, [r4, #24]
 8000cb6:	b11b      	cbz	r3, 8000cc0 <__sinit+0x14>
 8000cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cbc:	f7ff bff0 	b.w	8000ca0 <__sinit_lock_release>
 8000cc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000cc4:	6523      	str	r3, [r4, #80]	; 0x50
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <__sinit+0x68>)
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <__sinit+0x6c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	62a2      	str	r2, [r4, #40]	; 0x28
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	bf04      	itt	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	61a3      	streq	r3, [r4, #24]
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f000 f820 	bl	8000d1c <__sfp>
 8000cdc:	6060      	str	r0, [r4, #4]
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f000 f81c 	bl	8000d1c <__sfp>
 8000ce4:	60a0      	str	r0, [r4, #8]
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f000 f818 	bl	8000d1c <__sfp>
 8000cec:	2200      	movs	r2, #0
 8000cee:	60e0      	str	r0, [r4, #12]
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	6860      	ldr	r0, [r4, #4]
 8000cf4:	f7ff ff82 	bl	8000bfc <std>
 8000cf8:	68a0      	ldr	r0, [r4, #8]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2109      	movs	r1, #9
 8000cfe:	f7ff ff7d 	bl	8000bfc <std>
 8000d02:	68e0      	ldr	r0, [r4, #12]
 8000d04:	2202      	movs	r2, #2
 8000d06:	2112      	movs	r1, #18
 8000d08:	f7ff ff78 	bl	8000bfc <std>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61a3      	str	r3, [r4, #24]
 8000d10:	e7d2      	b.n	8000cb8 <__sinit+0xc>
 8000d12:	bf00      	nop
 8000d14:	08001b7c 	.word	0x08001b7c
 8000d18:	08000c45 	.word	0x08000c45

08000d1c <__sfp>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	4607      	mov	r7, r0
 8000d20:	f7ff ffac 	bl	8000c7c <__sfp_lock_acquire>
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <__sfp+0x84>)
 8000d26:	681e      	ldr	r6, [r3, #0]
 8000d28:	69b3      	ldr	r3, [r6, #24]
 8000d2a:	b913      	cbnz	r3, 8000d32 <__sfp+0x16>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f7ff ffbd 	bl	8000cac <__sinit>
 8000d32:	3648      	adds	r6, #72	; 0x48
 8000d34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	d503      	bpl.n	8000d44 <__sfp+0x28>
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	b30b      	cbz	r3, 8000d84 <__sfp+0x68>
 8000d40:	6836      	ldr	r6, [r6, #0]
 8000d42:	e7f7      	b.n	8000d34 <__sfp+0x18>
 8000d44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d48:	b9d5      	cbnz	r5, 8000d80 <__sfp+0x64>
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <__sfp+0x88>)
 8000d4c:	60e3      	str	r3, [r4, #12]
 8000d4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d52:	6665      	str	r5, [r4, #100]	; 0x64
 8000d54:	f000 f86c 	bl	8000e30 <__retarget_lock_init_recursive>
 8000d58:	f7ff ff96 	bl	8000c88 <__sfp_lock_release>
 8000d5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d64:	6025      	str	r5, [r4, #0]
 8000d66:	61a5      	str	r5, [r4, #24]
 8000d68:	2208      	movs	r2, #8
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d70:	f000 f861 	bl	8000e36 <memset>
 8000d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d80:	3468      	adds	r4, #104	; 0x68
 8000d82:	e7d9      	b.n	8000d38 <__sfp+0x1c>
 8000d84:	2104      	movs	r1, #4
 8000d86:	4638      	mov	r0, r7
 8000d88:	f7ff ff62 	bl	8000c50 <__sfmoreglue>
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	6030      	str	r0, [r6, #0]
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d1d5      	bne.n	8000d40 <__sfp+0x24>
 8000d94:	f7ff ff78 	bl	8000c88 <__sfp_lock_release>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	e7ee      	b.n	8000d7c <__sfp+0x60>
 8000d9e:	bf00      	nop
 8000da0:	08001b7c 	.word	0x08001b7c
 8000da4:	ffff0001 	.word	0xffff0001

08000da8 <_fwalk_reent>:
 8000da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dac:	4606      	mov	r6, r0
 8000dae:	4688      	mov	r8, r1
 8000db0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000db4:	2700      	movs	r7, #0
 8000db6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000dba:	f1b9 0901 	subs.w	r9, r9, #1
 8000dbe:	d505      	bpl.n	8000dcc <_fwalk_reent+0x24>
 8000dc0:	6824      	ldr	r4, [r4, #0]
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d1f7      	bne.n	8000db6 <_fwalk_reent+0xe>
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dcc:	89ab      	ldrh	r3, [r5, #12]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d907      	bls.n	8000de2 <_fwalk_reent+0x3a>
 8000dd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	d003      	beq.n	8000de2 <_fwalk_reent+0x3a>
 8000dda:	4629      	mov	r1, r5
 8000ddc:	4630      	mov	r0, r6
 8000dde:	47c0      	blx	r8
 8000de0:	4307      	orrs	r7, r0
 8000de2:	3568      	adds	r5, #104	; 0x68
 8000de4:	e7e9      	b.n	8000dba <_fwalk_reent+0x12>
	...

08000de8 <__libc_init_array>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4d0d      	ldr	r5, [pc, #52]	; (8000e20 <__libc_init_array+0x38>)
 8000dec:	4c0d      	ldr	r4, [pc, #52]	; (8000e24 <__libc_init_array+0x3c>)
 8000dee:	1b64      	subs	r4, r4, r5
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	2600      	movs	r6, #0
 8000df4:	42a6      	cmp	r6, r4
 8000df6:	d109      	bne.n	8000e0c <__libc_init_array+0x24>
 8000df8:	4d0b      	ldr	r5, [pc, #44]	; (8000e28 <__libc_init_array+0x40>)
 8000dfa:	4c0c      	ldr	r4, [pc, #48]	; (8000e2c <__libc_init_array+0x44>)
 8000dfc:	f000 fe6e 	bl	8001adc <_init>
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	2600      	movs	r6, #0
 8000e06:	42a6      	cmp	r6, r4
 8000e08:	d105      	bne.n	8000e16 <__libc_init_array+0x2e>
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e10:	4798      	blx	r3
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7ee      	b.n	8000df4 <__libc_init_array+0xc>
 8000e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1a:	4798      	blx	r3
 8000e1c:	3601      	adds	r6, #1
 8000e1e:	e7f2      	b.n	8000e06 <__libc_init_array+0x1e>
 8000e20:	08001bb4 	.word	0x08001bb4
 8000e24:	08001bb4 	.word	0x08001bb4
 8000e28:	08001bb4 	.word	0x08001bb4
 8000e2c:	08001bb8 	.word	0x08001bb8

08000e30 <__retarget_lock_init_recursive>:
 8000e30:	4770      	bx	lr

08000e32 <__retarget_lock_acquire_recursive>:
 8000e32:	4770      	bx	lr

08000e34 <__retarget_lock_release_recursive>:
 8000e34:	4770      	bx	lr

08000e36 <memset>:
 8000e36:	4402      	add	r2, r0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d100      	bne.n	8000e40 <memset+0xa>
 8000e3e:	4770      	bx	lr
 8000e40:	f803 1b01 	strb.w	r1, [r3], #1
 8000e44:	e7f9      	b.n	8000e3a <memset+0x4>
	...

08000e48 <_free_r>:
 8000e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e4a:	2900      	cmp	r1, #0
 8000e4c:	d044      	beq.n	8000ed8 <_free_r+0x90>
 8000e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e52:	9001      	str	r0, [sp, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f1a1 0404 	sub.w	r4, r1, #4
 8000e5a:	bfb8      	it	lt
 8000e5c:	18e4      	addlt	r4, r4, r3
 8000e5e:	f000 fb0f 	bl	8001480 <__malloc_lock>
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <_free_r+0x94>)
 8000e64:	9801      	ldr	r0, [sp, #4]
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	b933      	cbnz	r3, 8000e78 <_free_r+0x30>
 8000e6a:	6063      	str	r3, [r4, #4]
 8000e6c:	6014      	str	r4, [r2, #0]
 8000e6e:	b003      	add	sp, #12
 8000e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e74:	f000 bb0a 	b.w	800148c <__malloc_unlock>
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <_free_r+0x46>
 8000e7c:	6825      	ldr	r5, [r4, #0]
 8000e7e:	1961      	adds	r1, r4, r5
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf01      	itttt	eq
 8000e84:	6819      	ldreq	r1, [r3, #0]
 8000e86:	685b      	ldreq	r3, [r3, #4]
 8000e88:	1949      	addeq	r1, r1, r5
 8000e8a:	6021      	streq	r1, [r4, #0]
 8000e8c:	e7ed      	b.n	8000e6a <_free_r+0x22>
 8000e8e:	461a      	mov	r2, r3
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	b10b      	cbz	r3, 8000e98 <_free_r+0x50>
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d9fa      	bls.n	8000e8e <_free_r+0x46>
 8000e98:	6811      	ldr	r1, [r2, #0]
 8000e9a:	1855      	adds	r5, r2, r1
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	d10b      	bne.n	8000eb8 <_free_r+0x70>
 8000ea0:	6824      	ldr	r4, [r4, #0]
 8000ea2:	4421      	add	r1, r4
 8000ea4:	1854      	adds	r4, r2, r1
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	6011      	str	r1, [r2, #0]
 8000eaa:	d1e0      	bne.n	8000e6e <_free_r+0x26>
 8000eac:	681c      	ldr	r4, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	6053      	str	r3, [r2, #4]
 8000eb2:	4421      	add	r1, r4
 8000eb4:	6011      	str	r1, [r2, #0]
 8000eb6:	e7da      	b.n	8000e6e <_free_r+0x26>
 8000eb8:	d902      	bls.n	8000ec0 <_free_r+0x78>
 8000eba:	230c      	movs	r3, #12
 8000ebc:	6003      	str	r3, [r0, #0]
 8000ebe:	e7d6      	b.n	8000e6e <_free_r+0x26>
 8000ec0:	6825      	ldr	r5, [r4, #0]
 8000ec2:	1961      	adds	r1, r4, r5
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf04      	itt	eq
 8000ec8:	6819      	ldreq	r1, [r3, #0]
 8000eca:	685b      	ldreq	r3, [r3, #4]
 8000ecc:	6063      	str	r3, [r4, #4]
 8000ece:	bf04      	itt	eq
 8000ed0:	1949      	addeq	r1, r1, r5
 8000ed2:	6021      	streq	r1, [r4, #0]
 8000ed4:	6054      	str	r4, [r2, #4]
 8000ed6:	e7ca      	b.n	8000e6e <_free_r+0x26>
 8000ed8:	b003      	add	sp, #12
 8000eda:	bd30      	pop	{r4, r5, pc}
 8000edc:	2000009c 	.word	0x2000009c

08000ee0 <sbrk_aligned>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4e0e      	ldr	r6, [pc, #56]	; (8000f1c <sbrk_aligned+0x3c>)
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	6831      	ldr	r1, [r6, #0]
 8000ee8:	4605      	mov	r5, r0
 8000eea:	b911      	cbnz	r1, 8000ef2 <sbrk_aligned+0x12>
 8000eec:	f000 f91a 	bl	8001124 <_sbrk_r>
 8000ef0:	6030      	str	r0, [r6, #0]
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f000 f915 	bl	8001124 <_sbrk_r>
 8000efa:	1c43      	adds	r3, r0, #1
 8000efc:	d00a      	beq.n	8000f14 <sbrk_aligned+0x34>
 8000efe:	1cc4      	adds	r4, r0, #3
 8000f00:	f024 0403 	bic.w	r4, r4, #3
 8000f04:	42a0      	cmp	r0, r4
 8000f06:	d007      	beq.n	8000f18 <sbrk_aligned+0x38>
 8000f08:	1a21      	subs	r1, r4, r0
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f000 f90a 	bl	8001124 <_sbrk_r>
 8000f10:	3001      	adds	r0, #1
 8000f12:	d101      	bne.n	8000f18 <sbrk_aligned+0x38>
 8000f14:	f04f 34ff 	mov.w	r4, #4294967295
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
 8000f1c:	200000a0 	.word	0x200000a0

08000f20 <_malloc_r>:
 8000f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f24:	1ccd      	adds	r5, r1, #3
 8000f26:	f025 0503 	bic.w	r5, r5, #3
 8000f2a:	3508      	adds	r5, #8
 8000f2c:	2d0c      	cmp	r5, #12
 8000f2e:	bf38      	it	cc
 8000f30:	250c      	movcc	r5, #12
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	4607      	mov	r7, r0
 8000f36:	db01      	blt.n	8000f3c <_malloc_r+0x1c>
 8000f38:	42a9      	cmp	r1, r5
 8000f3a:	d905      	bls.n	8000f48 <_malloc_r+0x28>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	2600      	movs	r6, #0
 8000f42:	4630      	mov	r0, r6
 8000f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f48:	4e2e      	ldr	r6, [pc, #184]	; (8001004 <_malloc_r+0xe4>)
 8000f4a:	f000 fa99 	bl	8001480 <__malloc_lock>
 8000f4e:	6833      	ldr	r3, [r6, #0]
 8000f50:	461c      	mov	r4, r3
 8000f52:	bb34      	cbnz	r4, 8000fa2 <_malloc_r+0x82>
 8000f54:	4629      	mov	r1, r5
 8000f56:	4638      	mov	r0, r7
 8000f58:	f7ff ffc2 	bl	8000ee0 <sbrk_aligned>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	4604      	mov	r4, r0
 8000f60:	d14d      	bne.n	8000ffe <_malloc_r+0xde>
 8000f62:	6834      	ldr	r4, [r6, #0]
 8000f64:	4626      	mov	r6, r4
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d140      	bne.n	8000fec <_malloc_r+0xcc>
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	4638      	mov	r0, r7
 8000f70:	eb04 0803 	add.w	r8, r4, r3
 8000f74:	f000 f8d6 	bl	8001124 <_sbrk_r>
 8000f78:	4580      	cmp	r8, r0
 8000f7a:	d13a      	bne.n	8000ff2 <_malloc_r+0xd2>
 8000f7c:	6821      	ldr	r1, [r4, #0]
 8000f7e:	3503      	adds	r5, #3
 8000f80:	1a6d      	subs	r5, r5, r1
 8000f82:	f025 0503 	bic.w	r5, r5, #3
 8000f86:	3508      	adds	r5, #8
 8000f88:	2d0c      	cmp	r5, #12
 8000f8a:	bf38      	it	cc
 8000f8c:	250c      	movcc	r5, #12
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4638      	mov	r0, r7
 8000f92:	f7ff ffa5 	bl	8000ee0 <sbrk_aligned>
 8000f96:	3001      	adds	r0, #1
 8000f98:	d02b      	beq.n	8000ff2 <_malloc_r+0xd2>
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	442b      	add	r3, r5
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	e00e      	b.n	8000fc0 <_malloc_r+0xa0>
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	1b52      	subs	r2, r2, r5
 8000fa6:	d41e      	bmi.n	8000fe6 <_malloc_r+0xc6>
 8000fa8:	2a0b      	cmp	r2, #11
 8000faa:	d916      	bls.n	8000fda <_malloc_r+0xba>
 8000fac:	1961      	adds	r1, r4, r5
 8000fae:	42a3      	cmp	r3, r4
 8000fb0:	6025      	str	r5, [r4, #0]
 8000fb2:	bf18      	it	ne
 8000fb4:	6059      	strne	r1, [r3, #4]
 8000fb6:	6863      	ldr	r3, [r4, #4]
 8000fb8:	bf08      	it	eq
 8000fba:	6031      	streq	r1, [r6, #0]
 8000fbc:	5162      	str	r2, [r4, r5]
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f104 060b 	add.w	r6, r4, #11
 8000fc6:	f000 fa61 	bl	800148c <__malloc_unlock>
 8000fca:	f026 0607 	bic.w	r6, r6, #7
 8000fce:	1d23      	adds	r3, r4, #4
 8000fd0:	1af2      	subs	r2, r6, r3
 8000fd2:	d0b6      	beq.n	8000f42 <_malloc_r+0x22>
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	50a3      	str	r3, [r4, r2]
 8000fd8:	e7b3      	b.n	8000f42 <_malloc_r+0x22>
 8000fda:	6862      	ldr	r2, [r4, #4]
 8000fdc:	42a3      	cmp	r3, r4
 8000fde:	bf0c      	ite	eq
 8000fe0:	6032      	streq	r2, [r6, #0]
 8000fe2:	605a      	strne	r2, [r3, #4]
 8000fe4:	e7ec      	b.n	8000fc0 <_malloc_r+0xa0>
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	6864      	ldr	r4, [r4, #4]
 8000fea:	e7b2      	b.n	8000f52 <_malloc_r+0x32>
 8000fec:	4634      	mov	r4, r6
 8000fee:	6876      	ldr	r6, [r6, #4]
 8000ff0:	e7b9      	b.n	8000f66 <_malloc_r+0x46>
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f000 fa48 	bl	800148c <__malloc_unlock>
 8000ffc:	e7a1      	b.n	8000f42 <_malloc_r+0x22>
 8000ffe:	6025      	str	r5, [r4, #0]
 8001000:	e7de      	b.n	8000fc0 <_malloc_r+0xa0>
 8001002:	bf00      	nop
 8001004:	2000009c 	.word	0x2000009c

08001008 <iprintf>:
 8001008:	b40f      	push	{r0, r1, r2, r3}
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <iprintf+0x2c>)
 800100c:	b513      	push	{r0, r1, r4, lr}
 800100e:	681c      	ldr	r4, [r3, #0]
 8001010:	b124      	cbz	r4, 800101c <iprintf+0x14>
 8001012:	69a3      	ldr	r3, [r4, #24]
 8001014:	b913      	cbnz	r3, 800101c <iprintf+0x14>
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fe48 	bl	8000cac <__sinit>
 800101c:	ab05      	add	r3, sp, #20
 800101e:	9a04      	ldr	r2, [sp, #16]
 8001020:	68a1      	ldr	r1, [r4, #8]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4620      	mov	r0, r4
 8001026:	f000 fa61 	bl	80014ec <_vfiprintf_r>
 800102a:	b002      	add	sp, #8
 800102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001030:	b004      	add	sp, #16
 8001032:	4770      	bx	lr
 8001034:	20000000 	.word	0x20000000

08001038 <_puts_r>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	460e      	mov	r6, r1
 800103c:	4605      	mov	r5, r0
 800103e:	b118      	cbz	r0, 8001048 <_puts_r+0x10>
 8001040:	6983      	ldr	r3, [r0, #24]
 8001042:	b90b      	cbnz	r3, 8001048 <_puts_r+0x10>
 8001044:	f7ff fe32 	bl	8000cac <__sinit>
 8001048:	69ab      	ldr	r3, [r5, #24]
 800104a:	68ac      	ldr	r4, [r5, #8]
 800104c:	b913      	cbnz	r3, 8001054 <_puts_r+0x1c>
 800104e:	4628      	mov	r0, r5
 8001050:	f7ff fe2c 	bl	8000cac <__sinit>
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <_puts_r+0xd0>)
 8001056:	429c      	cmp	r4, r3
 8001058:	d120      	bne.n	800109c <_puts_r+0x64>
 800105a:	686c      	ldr	r4, [r5, #4]
 800105c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800105e:	07db      	lsls	r3, r3, #31
 8001060:	d405      	bmi.n	800106e <_puts_r+0x36>
 8001062:	89a3      	ldrh	r3, [r4, #12]
 8001064:	0598      	lsls	r0, r3, #22
 8001066:	d402      	bmi.n	800106e <_puts_r+0x36>
 8001068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800106a:	f7ff fee2 	bl	8000e32 <__retarget_lock_acquire_recursive>
 800106e:	89a3      	ldrh	r3, [r4, #12]
 8001070:	0719      	lsls	r1, r3, #28
 8001072:	d51d      	bpl.n	80010b0 <_puts_r+0x78>
 8001074:	6923      	ldr	r3, [r4, #16]
 8001076:	b1db      	cbz	r3, 80010b0 <_puts_r+0x78>
 8001078:	3e01      	subs	r6, #1
 800107a:	68a3      	ldr	r3, [r4, #8]
 800107c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001080:	3b01      	subs	r3, #1
 8001082:	60a3      	str	r3, [r4, #8]
 8001084:	bb39      	cbnz	r1, 80010d6 <_puts_r+0x9e>
 8001086:	2b00      	cmp	r3, #0
 8001088:	da38      	bge.n	80010fc <_puts_r+0xc4>
 800108a:	4622      	mov	r2, r4
 800108c:	210a      	movs	r1, #10
 800108e:	4628      	mov	r0, r5
 8001090:	f000 f89c 	bl	80011cc <__swbuf_r>
 8001094:	3001      	adds	r0, #1
 8001096:	d011      	beq.n	80010bc <_puts_r+0x84>
 8001098:	250a      	movs	r5, #10
 800109a:	e011      	b.n	80010c0 <_puts_r+0x88>
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <_puts_r+0xd4>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d101      	bne.n	80010a6 <_puts_r+0x6e>
 80010a2:	68ac      	ldr	r4, [r5, #8]
 80010a4:	e7da      	b.n	800105c <_puts_r+0x24>
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <_puts_r+0xd8>)
 80010a8:	429c      	cmp	r4, r3
 80010aa:	bf08      	it	eq
 80010ac:	68ec      	ldreq	r4, [r5, #12]
 80010ae:	e7d5      	b.n	800105c <_puts_r+0x24>
 80010b0:	4621      	mov	r1, r4
 80010b2:	4628      	mov	r0, r5
 80010b4:	f000 f8ee 	bl	8001294 <__swsetup_r>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d0dd      	beq.n	8001078 <_puts_r+0x40>
 80010bc:	f04f 35ff 	mov.w	r5, #4294967295
 80010c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010c2:	07da      	lsls	r2, r3, #31
 80010c4:	d405      	bmi.n	80010d2 <_puts_r+0x9a>
 80010c6:	89a3      	ldrh	r3, [r4, #12]
 80010c8:	059b      	lsls	r3, r3, #22
 80010ca:	d402      	bmi.n	80010d2 <_puts_r+0x9a>
 80010cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010ce:	f7ff feb1 	bl	8000e34 <__retarget_lock_release_recursive>
 80010d2:	4628      	mov	r0, r5
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da04      	bge.n	80010e4 <_puts_r+0xac>
 80010da:	69a2      	ldr	r2, [r4, #24]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dc06      	bgt.n	80010ee <_puts_r+0xb6>
 80010e0:	290a      	cmp	r1, #10
 80010e2:	d004      	beq.n	80010ee <_puts_r+0xb6>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	6022      	str	r2, [r4, #0]
 80010ea:	7019      	strb	r1, [r3, #0]
 80010ec:	e7c5      	b.n	800107a <_puts_r+0x42>
 80010ee:	4622      	mov	r2, r4
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 f86b 	bl	80011cc <__swbuf_r>
 80010f6:	3001      	adds	r0, #1
 80010f8:	d1bf      	bne.n	800107a <_puts_r+0x42>
 80010fa:	e7df      	b.n	80010bc <_puts_r+0x84>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	250a      	movs	r5, #10
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	6022      	str	r2, [r4, #0]
 8001104:	701d      	strb	r5, [r3, #0]
 8001106:	e7db      	b.n	80010c0 <_puts_r+0x88>
 8001108:	08001b3c 	.word	0x08001b3c
 800110c:	08001b5c 	.word	0x08001b5c
 8001110:	08001b1c 	.word	0x08001b1c

08001114 <puts>:
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <puts+0xc>)
 8001116:	4601      	mov	r1, r0
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	f7ff bf8d 	b.w	8001038 <_puts_r>
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <_sbrk_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4d06      	ldr	r5, [pc, #24]	; (8001140 <_sbrk_r+0x1c>)
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	602b      	str	r3, [r5, #0]
 8001130:	f7ff fbd2 	bl	80008d8 <_sbrk>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d102      	bne.n	800113e <_sbrk_r+0x1a>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b103      	cbz	r3, 800113e <_sbrk_r+0x1a>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	200000a4 	.word	0x200000a4

08001144 <__sread>:
 8001144:	b510      	push	{r4, lr}
 8001146:	460c      	mov	r4, r1
 8001148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800114c:	f000 fc92 	bl	8001a74 <_read_r>
 8001150:	2800      	cmp	r0, #0
 8001152:	bfab      	itete	ge
 8001154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001156:	89a3      	ldrhlt	r3, [r4, #12]
 8001158:	181b      	addge	r3, r3, r0
 800115a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800115e:	bfac      	ite	ge
 8001160:	6563      	strge	r3, [r4, #84]	; 0x54
 8001162:	81a3      	strhlt	r3, [r4, #12]
 8001164:	bd10      	pop	{r4, pc}

08001166 <__swrite>:
 8001166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116a:	461f      	mov	r7, r3
 800116c:	898b      	ldrh	r3, [r1, #12]
 800116e:	05db      	lsls	r3, r3, #23
 8001170:	4605      	mov	r5, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4616      	mov	r6, r2
 8001176:	d505      	bpl.n	8001184 <__swrite+0x1e>
 8001178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117c:	2302      	movs	r3, #2
 800117e:	2200      	movs	r2, #0
 8001180:	f000 f906 	bl	8001390 <_lseek_r>
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800118a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800118e:	81a3      	strh	r3, [r4, #12]
 8001190:	4632      	mov	r2, r6
 8001192:	463b      	mov	r3, r7
 8001194:	4628      	mov	r0, r5
 8001196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800119a:	f000 b869 	b.w	8001270 <_write_r>

0800119e <__sseek>:
 800119e:	b510      	push	{r4, lr}
 80011a0:	460c      	mov	r4, r1
 80011a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a6:	f000 f8f3 	bl	8001390 <_lseek_r>
 80011aa:	1c43      	adds	r3, r0, #1
 80011ac:	89a3      	ldrh	r3, [r4, #12]
 80011ae:	bf15      	itete	ne
 80011b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80011b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011ba:	81a3      	strheq	r3, [r4, #12]
 80011bc:	bf18      	it	ne
 80011be:	81a3      	strhne	r3, [r4, #12]
 80011c0:	bd10      	pop	{r4, pc}

080011c2 <__sclose>:
 80011c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c6:	f000 b8d3 	b.w	8001370 <_close_r>
	...

080011cc <__swbuf_r>:
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	460e      	mov	r6, r1
 80011d0:	4614      	mov	r4, r2
 80011d2:	4605      	mov	r5, r0
 80011d4:	b118      	cbz	r0, 80011de <__swbuf_r+0x12>
 80011d6:	6983      	ldr	r3, [r0, #24]
 80011d8:	b90b      	cbnz	r3, 80011de <__swbuf_r+0x12>
 80011da:	f7ff fd67 	bl	8000cac <__sinit>
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <__swbuf_r+0x98>)
 80011e0:	429c      	cmp	r4, r3
 80011e2:	d12b      	bne.n	800123c <__swbuf_r+0x70>
 80011e4:	686c      	ldr	r4, [r5, #4]
 80011e6:	69a3      	ldr	r3, [r4, #24]
 80011e8:	60a3      	str	r3, [r4, #8]
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	071a      	lsls	r2, r3, #28
 80011ee:	d52f      	bpl.n	8001250 <__swbuf_r+0x84>
 80011f0:	6923      	ldr	r3, [r4, #16]
 80011f2:	b36b      	cbz	r3, 8001250 <__swbuf_r+0x84>
 80011f4:	6923      	ldr	r3, [r4, #16]
 80011f6:	6820      	ldr	r0, [r4, #0]
 80011f8:	1ac0      	subs	r0, r0, r3
 80011fa:	6963      	ldr	r3, [r4, #20]
 80011fc:	b2f6      	uxtb	r6, r6
 80011fe:	4283      	cmp	r3, r0
 8001200:	4637      	mov	r7, r6
 8001202:	dc04      	bgt.n	800120e <__swbuf_r+0x42>
 8001204:	4621      	mov	r1, r4
 8001206:	4628      	mov	r0, r5
 8001208:	f7ff fcbc 	bl	8000b84 <_fflush_r>
 800120c:	bb30      	cbnz	r0, 800125c <__swbuf_r+0x90>
 800120e:	68a3      	ldr	r3, [r4, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	60a3      	str	r3, [r4, #8]
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	6022      	str	r2, [r4, #0]
 800121a:	701e      	strb	r6, [r3, #0]
 800121c:	6963      	ldr	r3, [r4, #20]
 800121e:	3001      	adds	r0, #1
 8001220:	4283      	cmp	r3, r0
 8001222:	d004      	beq.n	800122e <__swbuf_r+0x62>
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	07db      	lsls	r3, r3, #31
 8001228:	d506      	bpl.n	8001238 <__swbuf_r+0x6c>
 800122a:	2e0a      	cmp	r6, #10
 800122c:	d104      	bne.n	8001238 <__swbuf_r+0x6c>
 800122e:	4621      	mov	r1, r4
 8001230:	4628      	mov	r0, r5
 8001232:	f7ff fca7 	bl	8000b84 <_fflush_r>
 8001236:	b988      	cbnz	r0, 800125c <__swbuf_r+0x90>
 8001238:	4638      	mov	r0, r7
 800123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <__swbuf_r+0x9c>)
 800123e:	429c      	cmp	r4, r3
 8001240:	d101      	bne.n	8001246 <__swbuf_r+0x7a>
 8001242:	68ac      	ldr	r4, [r5, #8]
 8001244:	e7cf      	b.n	80011e6 <__swbuf_r+0x1a>
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <__swbuf_r+0xa0>)
 8001248:	429c      	cmp	r4, r3
 800124a:	bf08      	it	eq
 800124c:	68ec      	ldreq	r4, [r5, #12]
 800124e:	e7ca      	b.n	80011e6 <__swbuf_r+0x1a>
 8001250:	4621      	mov	r1, r4
 8001252:	4628      	mov	r0, r5
 8001254:	f000 f81e 	bl	8001294 <__swsetup_r>
 8001258:	2800      	cmp	r0, #0
 800125a:	d0cb      	beq.n	80011f4 <__swbuf_r+0x28>
 800125c:	f04f 37ff 	mov.w	r7, #4294967295
 8001260:	e7ea      	b.n	8001238 <__swbuf_r+0x6c>
 8001262:	bf00      	nop
 8001264:	08001b3c 	.word	0x08001b3c
 8001268:	08001b5c 	.word	0x08001b5c
 800126c:	08001b1c 	.word	0x08001b1c

08001270 <_write_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4d07      	ldr	r5, [pc, #28]	; (8001290 <_write_r+0x20>)
 8001274:	4604      	mov	r4, r0
 8001276:	4608      	mov	r0, r1
 8001278:	4611      	mov	r1, r2
 800127a:	2200      	movs	r2, #0
 800127c:	602a      	str	r2, [r5, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	f7ff faba 	bl	80007f8 <_write>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d102      	bne.n	800128e <_write_r+0x1e>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b103      	cbz	r3, 800128e <_write_r+0x1e>
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200000a4 	.word	0x200000a4

08001294 <__swsetup_r>:
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <__swsetup_r+0xcc>)
 8001296:	b570      	push	{r4, r5, r6, lr}
 8001298:	681d      	ldr	r5, [r3, #0]
 800129a:	4606      	mov	r6, r0
 800129c:	460c      	mov	r4, r1
 800129e:	b125      	cbz	r5, 80012aa <__swsetup_r+0x16>
 80012a0:	69ab      	ldr	r3, [r5, #24]
 80012a2:	b913      	cbnz	r3, 80012aa <__swsetup_r+0x16>
 80012a4:	4628      	mov	r0, r5
 80012a6:	f7ff fd01 	bl	8000cac <__sinit>
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <__swsetup_r+0xd0>)
 80012ac:	429c      	cmp	r4, r3
 80012ae:	d10f      	bne.n	80012d0 <__swsetup_r+0x3c>
 80012b0:	686c      	ldr	r4, [r5, #4]
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012b8:	0719      	lsls	r1, r3, #28
 80012ba:	d42c      	bmi.n	8001316 <__swsetup_r+0x82>
 80012bc:	06dd      	lsls	r5, r3, #27
 80012be:	d411      	bmi.n	80012e4 <__swsetup_r+0x50>
 80012c0:	2309      	movs	r3, #9
 80012c2:	6033      	str	r3, [r6, #0]
 80012c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012c8:	81a3      	strh	r3, [r4, #12]
 80012ca:	f04f 30ff 	mov.w	r0, #4294967295
 80012ce:	e03e      	b.n	800134e <__swsetup_r+0xba>
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <__swsetup_r+0xd4>)
 80012d2:	429c      	cmp	r4, r3
 80012d4:	d101      	bne.n	80012da <__swsetup_r+0x46>
 80012d6:	68ac      	ldr	r4, [r5, #8]
 80012d8:	e7eb      	b.n	80012b2 <__swsetup_r+0x1e>
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <__swsetup_r+0xd8>)
 80012dc:	429c      	cmp	r4, r3
 80012de:	bf08      	it	eq
 80012e0:	68ec      	ldreq	r4, [r5, #12]
 80012e2:	e7e6      	b.n	80012b2 <__swsetup_r+0x1e>
 80012e4:	0758      	lsls	r0, r3, #29
 80012e6:	d512      	bpl.n	800130e <__swsetup_r+0x7a>
 80012e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ea:	b141      	cbz	r1, 80012fe <__swsetup_r+0x6a>
 80012ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012f0:	4299      	cmp	r1, r3
 80012f2:	d002      	beq.n	80012fa <__swsetup_r+0x66>
 80012f4:	4630      	mov	r0, r6
 80012f6:	f7ff fda7 	bl	8000e48 <_free_r>
 80012fa:	2300      	movs	r3, #0
 80012fc:	6363      	str	r3, [r4, #52]	; 0x34
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	2300      	movs	r3, #0
 8001308:	6063      	str	r3, [r4, #4]
 800130a:	6923      	ldr	r3, [r4, #16]
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	81a3      	strh	r3, [r4, #12]
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	b94b      	cbnz	r3, 800132e <__swsetup_r+0x9a>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001324:	d003      	beq.n	800132e <__swsetup_r+0x9a>
 8001326:	4621      	mov	r1, r4
 8001328:	4630      	mov	r0, r6
 800132a:	f000 f869 	bl	8001400 <__smakebuf_r>
 800132e:	89a0      	ldrh	r0, [r4, #12]
 8001330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001334:	f010 0301 	ands.w	r3, r0, #1
 8001338:	d00a      	beq.n	8001350 <__swsetup_r+0xbc>
 800133a:	2300      	movs	r3, #0
 800133c:	60a3      	str	r3, [r4, #8]
 800133e:	6963      	ldr	r3, [r4, #20]
 8001340:	425b      	negs	r3, r3
 8001342:	61a3      	str	r3, [r4, #24]
 8001344:	6923      	ldr	r3, [r4, #16]
 8001346:	b943      	cbnz	r3, 800135a <__swsetup_r+0xc6>
 8001348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800134c:	d1ba      	bne.n	80012c4 <__swsetup_r+0x30>
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	0781      	lsls	r1, r0, #30
 8001352:	bf58      	it	pl
 8001354:	6963      	ldrpl	r3, [r4, #20]
 8001356:	60a3      	str	r3, [r4, #8]
 8001358:	e7f4      	b.n	8001344 <__swsetup_r+0xb0>
 800135a:	2000      	movs	r0, #0
 800135c:	e7f7      	b.n	800134e <__swsetup_r+0xba>
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000
 8001364:	08001b3c 	.word	0x08001b3c
 8001368:	08001b5c 	.word	0x08001b5c
 800136c:	08001b1c 	.word	0x08001b1c

08001370 <_close_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4d06      	ldr	r5, [pc, #24]	; (800138c <_close_r+0x1c>)
 8001374:	2300      	movs	r3, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	602b      	str	r3, [r5, #0]
 800137c:	f7ff fa77 	bl	800086e <_close>
 8001380:	1c43      	adds	r3, r0, #1
 8001382:	d102      	bne.n	800138a <_close_r+0x1a>
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	b103      	cbz	r3, 800138a <_close_r+0x1a>
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	bd38      	pop	{r3, r4, r5, pc}
 800138c:	200000a4 	.word	0x200000a4

08001390 <_lseek_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4d07      	ldr	r5, [pc, #28]	; (80013b0 <_lseek_r+0x20>)
 8001394:	4604      	mov	r4, r0
 8001396:	4608      	mov	r0, r1
 8001398:	4611      	mov	r1, r2
 800139a:	2200      	movs	r2, #0
 800139c:	602a      	str	r2, [r5, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	f7ff fa8c 	bl	80008bc <_lseek>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_lseek_r+0x1e>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_lseek_r+0x1e>
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	200000a4 	.word	0x200000a4

080013b4 <__swhatbuf_r>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	460e      	mov	r6, r1
 80013b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013bc:	2900      	cmp	r1, #0
 80013be:	b096      	sub	sp, #88	; 0x58
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	da08      	bge.n	80013d8 <__swhatbuf_r+0x24>
 80013c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	602a      	str	r2, [r5, #0]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	d410      	bmi.n	80013f4 <__swhatbuf_r+0x40>
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	e00e      	b.n	80013f6 <__swhatbuf_r+0x42>
 80013d8:	466a      	mov	r2, sp
 80013da:	f000 fb5d 	bl	8001a98 <_fstat_r>
 80013de:	2800      	cmp	r0, #0
 80013e0:	dbf1      	blt.n	80013c6 <__swhatbuf_r+0x12>
 80013e2:	9a01      	ldr	r2, [sp, #4]
 80013e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013ec:	425a      	negs	r2, r3
 80013ee:	415a      	adcs	r2, r3
 80013f0:	602a      	str	r2, [r5, #0]
 80013f2:	e7ee      	b.n	80013d2 <__swhatbuf_r+0x1e>
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	2000      	movs	r0, #0
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	b016      	add	sp, #88	; 0x58
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001400 <__smakebuf_r>:
 8001400:	898b      	ldrh	r3, [r1, #12]
 8001402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001404:	079d      	lsls	r5, r3, #30
 8001406:	4606      	mov	r6, r0
 8001408:	460c      	mov	r4, r1
 800140a:	d507      	bpl.n	800141c <__smakebuf_r+0x1c>
 800140c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	6123      	str	r3, [r4, #16]
 8001414:	2301      	movs	r3, #1
 8001416:	6163      	str	r3, [r4, #20]
 8001418:	b002      	add	sp, #8
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	ab01      	add	r3, sp, #4
 800141e:	466a      	mov	r2, sp
 8001420:	f7ff ffc8 	bl	80013b4 <__swhatbuf_r>
 8001424:	9900      	ldr	r1, [sp, #0]
 8001426:	4605      	mov	r5, r0
 8001428:	4630      	mov	r0, r6
 800142a:	f7ff fd79 	bl	8000f20 <_malloc_r>
 800142e:	b948      	cbnz	r0, 8001444 <__smakebuf_r+0x44>
 8001430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001434:	059a      	lsls	r2, r3, #22
 8001436:	d4ef      	bmi.n	8001418 <__smakebuf_r+0x18>
 8001438:	f023 0303 	bic.w	r3, r3, #3
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	81a3      	strh	r3, [r4, #12]
 8001442:	e7e3      	b.n	800140c <__smakebuf_r+0xc>
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <__smakebuf_r+0x7c>)
 8001446:	62b3      	str	r3, [r6, #40]	; 0x28
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	6020      	str	r0, [r4, #0]
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	9b00      	ldr	r3, [sp, #0]
 8001454:	6163      	str	r3, [r4, #20]
 8001456:	9b01      	ldr	r3, [sp, #4]
 8001458:	6120      	str	r0, [r4, #16]
 800145a:	b15b      	cbz	r3, 8001474 <__smakebuf_r+0x74>
 800145c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001460:	4630      	mov	r0, r6
 8001462:	f000 fb2b 	bl	8001abc <_isatty_r>
 8001466:	b128      	cbz	r0, 8001474 <__smakebuf_r+0x74>
 8001468:	89a3      	ldrh	r3, [r4, #12]
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	81a3      	strh	r3, [r4, #12]
 8001474:	89a0      	ldrh	r0, [r4, #12]
 8001476:	4305      	orrs	r5, r0
 8001478:	81a5      	strh	r5, [r4, #12]
 800147a:	e7cd      	b.n	8001418 <__smakebuf_r+0x18>
 800147c:	08000c45 	.word	0x08000c45

08001480 <__malloc_lock>:
 8001480:	4801      	ldr	r0, [pc, #4]	; (8001488 <__malloc_lock+0x8>)
 8001482:	f7ff bcd6 	b.w	8000e32 <__retarget_lock_acquire_recursive>
 8001486:	bf00      	nop
 8001488:	20000098 	.word	0x20000098

0800148c <__malloc_unlock>:
 800148c:	4801      	ldr	r0, [pc, #4]	; (8001494 <__malloc_unlock+0x8>)
 800148e:	f7ff bcd1 	b.w	8000e34 <__retarget_lock_release_recursive>
 8001492:	bf00      	nop
 8001494:	20000098 	.word	0x20000098

08001498 <__sfputc_r>:
 8001498:	6893      	ldr	r3, [r2, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	b410      	push	{r4}
 80014a0:	6093      	str	r3, [r2, #8]
 80014a2:	da08      	bge.n	80014b6 <__sfputc_r+0x1e>
 80014a4:	6994      	ldr	r4, [r2, #24]
 80014a6:	42a3      	cmp	r3, r4
 80014a8:	db01      	blt.n	80014ae <__sfputc_r+0x16>
 80014aa:	290a      	cmp	r1, #10
 80014ac:	d103      	bne.n	80014b6 <__sfputc_r+0x1e>
 80014ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014b2:	f7ff be8b 	b.w	80011cc <__swbuf_r>
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	1c58      	adds	r0, r3, #1
 80014ba:	6010      	str	r0, [r2, #0]
 80014bc:	7019      	strb	r1, [r3, #0]
 80014be:	4608      	mov	r0, r1
 80014c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <__sfputs_r>:
 80014c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c8:	4606      	mov	r6, r0
 80014ca:	460f      	mov	r7, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	18d5      	adds	r5, r2, r3
 80014d0:	42ac      	cmp	r4, r5
 80014d2:	d101      	bne.n	80014d8 <__sfputs_r+0x12>
 80014d4:	2000      	movs	r0, #0
 80014d6:	e007      	b.n	80014e8 <__sfputs_r+0x22>
 80014d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014dc:	463a      	mov	r2, r7
 80014de:	4630      	mov	r0, r6
 80014e0:	f7ff ffda 	bl	8001498 <__sfputc_r>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d1f3      	bne.n	80014d0 <__sfputs_r+0xa>
 80014e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014ec <_vfiprintf_r>:
 80014ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f0:	460d      	mov	r5, r1
 80014f2:	b09d      	sub	sp, #116	; 0x74
 80014f4:	4614      	mov	r4, r2
 80014f6:	4698      	mov	r8, r3
 80014f8:	4606      	mov	r6, r0
 80014fa:	b118      	cbz	r0, 8001504 <_vfiprintf_r+0x18>
 80014fc:	6983      	ldr	r3, [r0, #24]
 80014fe:	b90b      	cbnz	r3, 8001504 <_vfiprintf_r+0x18>
 8001500:	f7ff fbd4 	bl	8000cac <__sinit>
 8001504:	4b89      	ldr	r3, [pc, #548]	; (800172c <_vfiprintf_r+0x240>)
 8001506:	429d      	cmp	r5, r3
 8001508:	d11b      	bne.n	8001542 <_vfiprintf_r+0x56>
 800150a:	6875      	ldr	r5, [r6, #4]
 800150c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800150e:	07d9      	lsls	r1, r3, #31
 8001510:	d405      	bmi.n	800151e <_vfiprintf_r+0x32>
 8001512:	89ab      	ldrh	r3, [r5, #12]
 8001514:	059a      	lsls	r2, r3, #22
 8001516:	d402      	bmi.n	800151e <_vfiprintf_r+0x32>
 8001518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800151a:	f7ff fc8a 	bl	8000e32 <__retarget_lock_acquire_recursive>
 800151e:	89ab      	ldrh	r3, [r5, #12]
 8001520:	071b      	lsls	r3, r3, #28
 8001522:	d501      	bpl.n	8001528 <_vfiprintf_r+0x3c>
 8001524:	692b      	ldr	r3, [r5, #16]
 8001526:	b9eb      	cbnz	r3, 8001564 <_vfiprintf_r+0x78>
 8001528:	4629      	mov	r1, r5
 800152a:	4630      	mov	r0, r6
 800152c:	f7ff feb2 	bl	8001294 <__swsetup_r>
 8001530:	b1c0      	cbz	r0, 8001564 <_vfiprintf_r+0x78>
 8001532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001534:	07dc      	lsls	r4, r3, #31
 8001536:	d50e      	bpl.n	8001556 <_vfiprintf_r+0x6a>
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	b01d      	add	sp, #116	; 0x74
 800153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001542:	4b7b      	ldr	r3, [pc, #492]	; (8001730 <_vfiprintf_r+0x244>)
 8001544:	429d      	cmp	r5, r3
 8001546:	d101      	bne.n	800154c <_vfiprintf_r+0x60>
 8001548:	68b5      	ldr	r5, [r6, #8]
 800154a:	e7df      	b.n	800150c <_vfiprintf_r+0x20>
 800154c:	4b79      	ldr	r3, [pc, #484]	; (8001734 <_vfiprintf_r+0x248>)
 800154e:	429d      	cmp	r5, r3
 8001550:	bf08      	it	eq
 8001552:	68f5      	ldreq	r5, [r6, #12]
 8001554:	e7da      	b.n	800150c <_vfiprintf_r+0x20>
 8001556:	89ab      	ldrh	r3, [r5, #12]
 8001558:	0598      	lsls	r0, r3, #22
 800155a:	d4ed      	bmi.n	8001538 <_vfiprintf_r+0x4c>
 800155c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800155e:	f7ff fc69 	bl	8000e34 <__retarget_lock_release_recursive>
 8001562:	e7e9      	b.n	8001538 <_vfiprintf_r+0x4c>
 8001564:	2300      	movs	r3, #0
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	2320      	movs	r3, #32
 800156a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800156e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001572:	2330      	movs	r3, #48	; 0x30
 8001574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001738 <_vfiprintf_r+0x24c>
 8001578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800157c:	f04f 0901 	mov.w	r9, #1
 8001580:	4623      	mov	r3, r4
 8001582:	469a      	mov	sl, r3
 8001584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001588:	b10a      	cbz	r2, 800158e <_vfiprintf_r+0xa2>
 800158a:	2a25      	cmp	r2, #37	; 0x25
 800158c:	d1f9      	bne.n	8001582 <_vfiprintf_r+0x96>
 800158e:	ebba 0b04 	subs.w	fp, sl, r4
 8001592:	d00b      	beq.n	80015ac <_vfiprintf_r+0xc0>
 8001594:	465b      	mov	r3, fp
 8001596:	4622      	mov	r2, r4
 8001598:	4629      	mov	r1, r5
 800159a:	4630      	mov	r0, r6
 800159c:	f7ff ff93 	bl	80014c6 <__sfputs_r>
 80015a0:	3001      	adds	r0, #1
 80015a2:	f000 80aa 	beq.w	80016fa <_vfiprintf_r+0x20e>
 80015a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015a8:	445a      	add	r2, fp
 80015aa:	9209      	str	r2, [sp, #36]	; 0x24
 80015ac:	f89a 3000 	ldrb.w	r3, [sl]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a2 	beq.w	80016fa <_vfiprintf_r+0x20e>
 80015b6:	2300      	movs	r3, #0
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015c0:	f10a 0a01 	add.w	sl, sl, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	9307      	str	r3, [sp, #28]
 80015c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015cc:	931a      	str	r3, [sp, #104]	; 0x68
 80015ce:	4654      	mov	r4, sl
 80015d0:	2205      	movs	r2, #5
 80015d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d6:	4858      	ldr	r0, [pc, #352]	; (8001738 <_vfiprintf_r+0x24c>)
 80015d8:	f7fe fe22 	bl	8000220 <memchr>
 80015dc:	9a04      	ldr	r2, [sp, #16]
 80015de:	b9d8      	cbnz	r0, 8001618 <_vfiprintf_r+0x12c>
 80015e0:	06d1      	lsls	r1, r2, #27
 80015e2:	bf44      	itt	mi
 80015e4:	2320      	movmi	r3, #32
 80015e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015ea:	0713      	lsls	r3, r2, #28
 80015ec:	bf44      	itt	mi
 80015ee:	232b      	movmi	r3, #43	; 0x2b
 80015f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015f4:	f89a 3000 	ldrb.w	r3, [sl]
 80015f8:	2b2a      	cmp	r3, #42	; 0x2a
 80015fa:	d015      	beq.n	8001628 <_vfiprintf_r+0x13c>
 80015fc:	9a07      	ldr	r2, [sp, #28]
 80015fe:	4654      	mov	r4, sl
 8001600:	2000      	movs	r0, #0
 8001602:	f04f 0c0a 	mov.w	ip, #10
 8001606:	4621      	mov	r1, r4
 8001608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800160c:	3b30      	subs	r3, #48	; 0x30
 800160e:	2b09      	cmp	r3, #9
 8001610:	d94e      	bls.n	80016b0 <_vfiprintf_r+0x1c4>
 8001612:	b1b0      	cbz	r0, 8001642 <_vfiprintf_r+0x156>
 8001614:	9207      	str	r2, [sp, #28]
 8001616:	e014      	b.n	8001642 <_vfiprintf_r+0x156>
 8001618:	eba0 0308 	sub.w	r3, r0, r8
 800161c:	fa09 f303 	lsl.w	r3, r9, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	46a2      	mov	sl, r4
 8001626:	e7d2      	b.n	80015ce <_vfiprintf_r+0xe2>
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	1d19      	adds	r1, r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	9103      	str	r1, [sp, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	bfbb      	ittet	lt
 8001634:	425b      	neglt	r3, r3
 8001636:	f042 0202 	orrlt.w	r2, r2, #2
 800163a:	9307      	strge	r3, [sp, #28]
 800163c:	9307      	strlt	r3, [sp, #28]
 800163e:	bfb8      	it	lt
 8001640:	9204      	strlt	r2, [sp, #16]
 8001642:	7823      	ldrb	r3, [r4, #0]
 8001644:	2b2e      	cmp	r3, #46	; 0x2e
 8001646:	d10c      	bne.n	8001662 <_vfiprintf_r+0x176>
 8001648:	7863      	ldrb	r3, [r4, #1]
 800164a:	2b2a      	cmp	r3, #42	; 0x2a
 800164c:	d135      	bne.n	80016ba <_vfiprintf_r+0x1ce>
 800164e:	9b03      	ldr	r3, [sp, #12]
 8001650:	1d1a      	adds	r2, r3, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	9203      	str	r2, [sp, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bfb8      	it	lt
 800165a:	f04f 33ff 	movlt.w	r3, #4294967295
 800165e:	3402      	adds	r4, #2
 8001660:	9305      	str	r3, [sp, #20]
 8001662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001748 <_vfiprintf_r+0x25c>
 8001666:	7821      	ldrb	r1, [r4, #0]
 8001668:	2203      	movs	r2, #3
 800166a:	4650      	mov	r0, sl
 800166c:	f7fe fdd8 	bl	8000220 <memchr>
 8001670:	b140      	cbz	r0, 8001684 <_vfiprintf_r+0x198>
 8001672:	2340      	movs	r3, #64	; 0x40
 8001674:	eba0 000a 	sub.w	r0, r0, sl
 8001678:	fa03 f000 	lsl.w	r0, r3, r0
 800167c:	9b04      	ldr	r3, [sp, #16]
 800167e:	4303      	orrs	r3, r0
 8001680:	3401      	adds	r4, #1
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001688:	482c      	ldr	r0, [pc, #176]	; (800173c <_vfiprintf_r+0x250>)
 800168a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800168e:	2206      	movs	r2, #6
 8001690:	f7fe fdc6 	bl	8000220 <memchr>
 8001694:	2800      	cmp	r0, #0
 8001696:	d03f      	beq.n	8001718 <_vfiprintf_r+0x22c>
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <_vfiprintf_r+0x254>)
 800169a:	bb1b      	cbnz	r3, 80016e4 <_vfiprintf_r+0x1f8>
 800169c:	9b03      	ldr	r3, [sp, #12]
 800169e:	3307      	adds	r3, #7
 80016a0:	f023 0307 	bic.w	r3, r3, #7
 80016a4:	3308      	adds	r3, #8
 80016a6:	9303      	str	r3, [sp, #12]
 80016a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016aa:	443b      	add	r3, r7
 80016ac:	9309      	str	r3, [sp, #36]	; 0x24
 80016ae:	e767      	b.n	8001580 <_vfiprintf_r+0x94>
 80016b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80016b4:	460c      	mov	r4, r1
 80016b6:	2001      	movs	r0, #1
 80016b8:	e7a5      	b.n	8001606 <_vfiprintf_r+0x11a>
 80016ba:	2300      	movs	r3, #0
 80016bc:	3401      	adds	r4, #1
 80016be:	9305      	str	r3, [sp, #20]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 0c0a 	mov.w	ip, #10
 80016c6:	4620      	mov	r0, r4
 80016c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016cc:	3a30      	subs	r2, #48	; 0x30
 80016ce:	2a09      	cmp	r2, #9
 80016d0:	d903      	bls.n	80016da <_vfiprintf_r+0x1ee>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0c5      	beq.n	8001662 <_vfiprintf_r+0x176>
 80016d6:	9105      	str	r1, [sp, #20]
 80016d8:	e7c3      	b.n	8001662 <_vfiprintf_r+0x176>
 80016da:	fb0c 2101 	mla	r1, ip, r1, r2
 80016de:	4604      	mov	r4, r0
 80016e0:	2301      	movs	r3, #1
 80016e2:	e7f0      	b.n	80016c6 <_vfiprintf_r+0x1da>
 80016e4:	ab03      	add	r3, sp, #12
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	462a      	mov	r2, r5
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <_vfiprintf_r+0x258>)
 80016ec:	a904      	add	r1, sp, #16
 80016ee:	4630      	mov	r0, r6
 80016f0:	f3af 8000 	nop.w
 80016f4:	4607      	mov	r7, r0
 80016f6:	1c78      	adds	r0, r7, #1
 80016f8:	d1d6      	bne.n	80016a8 <_vfiprintf_r+0x1bc>
 80016fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016fc:	07d9      	lsls	r1, r3, #31
 80016fe:	d405      	bmi.n	800170c <_vfiprintf_r+0x220>
 8001700:	89ab      	ldrh	r3, [r5, #12]
 8001702:	059a      	lsls	r2, r3, #22
 8001704:	d402      	bmi.n	800170c <_vfiprintf_r+0x220>
 8001706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001708:	f7ff fb94 	bl	8000e34 <__retarget_lock_release_recursive>
 800170c:	89ab      	ldrh	r3, [r5, #12]
 800170e:	065b      	lsls	r3, r3, #25
 8001710:	f53f af12 	bmi.w	8001538 <_vfiprintf_r+0x4c>
 8001714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001716:	e711      	b.n	800153c <_vfiprintf_r+0x50>
 8001718:	ab03      	add	r3, sp, #12
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	462a      	mov	r2, r5
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <_vfiprintf_r+0x258>)
 8001720:	a904      	add	r1, sp, #16
 8001722:	4630      	mov	r0, r6
 8001724:	f000 f880 	bl	8001828 <_printf_i>
 8001728:	e7e4      	b.n	80016f4 <_vfiprintf_r+0x208>
 800172a:	bf00      	nop
 800172c:	08001b3c 	.word	0x08001b3c
 8001730:	08001b5c 	.word	0x08001b5c
 8001734:	08001b1c 	.word	0x08001b1c
 8001738:	08001b80 	.word	0x08001b80
 800173c:	08001b8a 	.word	0x08001b8a
 8001740:	00000000 	.word	0x00000000
 8001744:	080014c7 	.word	0x080014c7
 8001748:	08001b86 	.word	0x08001b86

0800174c <_printf_common>:
 800174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001750:	4616      	mov	r6, r2
 8001752:	4699      	mov	r9, r3
 8001754:	688a      	ldr	r2, [r1, #8]
 8001756:	690b      	ldr	r3, [r1, #16]
 8001758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800175c:	4293      	cmp	r3, r2
 800175e:	bfb8      	it	lt
 8001760:	4613      	movlt	r3, r2
 8001762:	6033      	str	r3, [r6, #0]
 8001764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001768:	4607      	mov	r7, r0
 800176a:	460c      	mov	r4, r1
 800176c:	b10a      	cbz	r2, 8001772 <_printf_common+0x26>
 800176e:	3301      	adds	r3, #1
 8001770:	6033      	str	r3, [r6, #0]
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	0699      	lsls	r1, r3, #26
 8001776:	bf42      	ittt	mi
 8001778:	6833      	ldrmi	r3, [r6, #0]
 800177a:	3302      	addmi	r3, #2
 800177c:	6033      	strmi	r3, [r6, #0]
 800177e:	6825      	ldr	r5, [r4, #0]
 8001780:	f015 0506 	ands.w	r5, r5, #6
 8001784:	d106      	bne.n	8001794 <_printf_common+0x48>
 8001786:	f104 0a19 	add.w	sl, r4, #25
 800178a:	68e3      	ldr	r3, [r4, #12]
 800178c:	6832      	ldr	r2, [r6, #0]
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	42ab      	cmp	r3, r5
 8001792:	dc26      	bgt.n	80017e2 <_printf_common+0x96>
 8001794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001798:	1e13      	subs	r3, r2, #0
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	bf18      	it	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	0692      	lsls	r2, r2, #26
 80017a2:	d42b      	bmi.n	80017fc <_printf_common+0xb0>
 80017a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017a8:	4649      	mov	r1, r9
 80017aa:	4638      	mov	r0, r7
 80017ac:	47c0      	blx	r8
 80017ae:	3001      	adds	r0, #1
 80017b0:	d01e      	beq.n	80017f0 <_printf_common+0xa4>
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	68e5      	ldr	r5, [r4, #12]
 80017b6:	6832      	ldr	r2, [r6, #0]
 80017b8:	f003 0306 	and.w	r3, r3, #6
 80017bc:	2b04      	cmp	r3, #4
 80017be:	bf08      	it	eq
 80017c0:	1aad      	subeq	r5, r5, r2
 80017c2:	68a3      	ldr	r3, [r4, #8]
 80017c4:	6922      	ldr	r2, [r4, #16]
 80017c6:	bf0c      	ite	eq
 80017c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017cc:	2500      	movne	r5, #0
 80017ce:	4293      	cmp	r3, r2
 80017d0:	bfc4      	itt	gt
 80017d2:	1a9b      	subgt	r3, r3, r2
 80017d4:	18ed      	addgt	r5, r5, r3
 80017d6:	2600      	movs	r6, #0
 80017d8:	341a      	adds	r4, #26
 80017da:	42b5      	cmp	r5, r6
 80017dc:	d11a      	bne.n	8001814 <_printf_common+0xc8>
 80017de:	2000      	movs	r0, #0
 80017e0:	e008      	b.n	80017f4 <_printf_common+0xa8>
 80017e2:	2301      	movs	r3, #1
 80017e4:	4652      	mov	r2, sl
 80017e6:	4649      	mov	r1, r9
 80017e8:	4638      	mov	r0, r7
 80017ea:	47c0      	blx	r8
 80017ec:	3001      	adds	r0, #1
 80017ee:	d103      	bne.n	80017f8 <_printf_common+0xac>
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f8:	3501      	adds	r5, #1
 80017fa:	e7c6      	b.n	800178a <_printf_common+0x3e>
 80017fc:	18e1      	adds	r1, r4, r3
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	2030      	movs	r0, #48	; 0x30
 8001802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001806:	4422      	add	r2, r4
 8001808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800180c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001810:	3302      	adds	r3, #2
 8001812:	e7c7      	b.n	80017a4 <_printf_common+0x58>
 8001814:	2301      	movs	r3, #1
 8001816:	4622      	mov	r2, r4
 8001818:	4649      	mov	r1, r9
 800181a:	4638      	mov	r0, r7
 800181c:	47c0      	blx	r8
 800181e:	3001      	adds	r0, #1
 8001820:	d0e6      	beq.n	80017f0 <_printf_common+0xa4>
 8001822:	3601      	adds	r6, #1
 8001824:	e7d9      	b.n	80017da <_printf_common+0x8e>
	...

08001828 <_printf_i>:
 8001828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800182c:	7e0f      	ldrb	r7, [r1, #24]
 800182e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001830:	2f78      	cmp	r7, #120	; 0x78
 8001832:	4691      	mov	r9, r2
 8001834:	4680      	mov	r8, r0
 8001836:	460c      	mov	r4, r1
 8001838:	469a      	mov	sl, r3
 800183a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800183e:	d807      	bhi.n	8001850 <_printf_i+0x28>
 8001840:	2f62      	cmp	r7, #98	; 0x62
 8001842:	d80a      	bhi.n	800185a <_printf_i+0x32>
 8001844:	2f00      	cmp	r7, #0
 8001846:	f000 80d8 	beq.w	80019fa <_printf_i+0x1d2>
 800184a:	2f58      	cmp	r7, #88	; 0x58
 800184c:	f000 80a3 	beq.w	8001996 <_printf_i+0x16e>
 8001850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001858:	e03a      	b.n	80018d0 <_printf_i+0xa8>
 800185a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800185e:	2b15      	cmp	r3, #21
 8001860:	d8f6      	bhi.n	8001850 <_printf_i+0x28>
 8001862:	a101      	add	r1, pc, #4	; (adr r1, 8001868 <_printf_i+0x40>)
 8001864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001868:	080018c1 	.word	0x080018c1
 800186c:	080018d5 	.word	0x080018d5
 8001870:	08001851 	.word	0x08001851
 8001874:	08001851 	.word	0x08001851
 8001878:	08001851 	.word	0x08001851
 800187c:	08001851 	.word	0x08001851
 8001880:	080018d5 	.word	0x080018d5
 8001884:	08001851 	.word	0x08001851
 8001888:	08001851 	.word	0x08001851
 800188c:	08001851 	.word	0x08001851
 8001890:	08001851 	.word	0x08001851
 8001894:	080019e1 	.word	0x080019e1
 8001898:	08001905 	.word	0x08001905
 800189c:	080019c3 	.word	0x080019c3
 80018a0:	08001851 	.word	0x08001851
 80018a4:	08001851 	.word	0x08001851
 80018a8:	08001a03 	.word	0x08001a03
 80018ac:	08001851 	.word	0x08001851
 80018b0:	08001905 	.word	0x08001905
 80018b4:	08001851 	.word	0x08001851
 80018b8:	08001851 	.word	0x08001851
 80018bc:	080019cb 	.word	0x080019cb
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	1d1a      	adds	r2, r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	602a      	str	r2, [r5, #0]
 80018c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0a3      	b.n	8001a1c <_printf_i+0x1f4>
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	6829      	ldr	r1, [r5, #0]
 80018d8:	0606      	lsls	r6, r0, #24
 80018da:	f101 0304 	add.w	r3, r1, #4
 80018de:	d50a      	bpl.n	80018f6 <_printf_i+0xce>
 80018e0:	680e      	ldr	r6, [r1, #0]
 80018e2:	602b      	str	r3, [r5, #0]
 80018e4:	2e00      	cmp	r6, #0
 80018e6:	da03      	bge.n	80018f0 <_printf_i+0xc8>
 80018e8:	232d      	movs	r3, #45	; 0x2d
 80018ea:	4276      	negs	r6, r6
 80018ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018f0:	485e      	ldr	r0, [pc, #376]	; (8001a6c <_printf_i+0x244>)
 80018f2:	230a      	movs	r3, #10
 80018f4:	e019      	b.n	800192a <_printf_i+0x102>
 80018f6:	680e      	ldr	r6, [r1, #0]
 80018f8:	602b      	str	r3, [r5, #0]
 80018fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018fe:	bf18      	it	ne
 8001900:	b236      	sxthne	r6, r6
 8001902:	e7ef      	b.n	80018e4 <_printf_i+0xbc>
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	1d19      	adds	r1, r3, #4
 800190a:	6029      	str	r1, [r5, #0]
 800190c:	0601      	lsls	r1, r0, #24
 800190e:	d501      	bpl.n	8001914 <_printf_i+0xec>
 8001910:	681e      	ldr	r6, [r3, #0]
 8001912:	e002      	b.n	800191a <_printf_i+0xf2>
 8001914:	0646      	lsls	r6, r0, #25
 8001916:	d5fb      	bpl.n	8001910 <_printf_i+0xe8>
 8001918:	881e      	ldrh	r6, [r3, #0]
 800191a:	4854      	ldr	r0, [pc, #336]	; (8001a6c <_printf_i+0x244>)
 800191c:	2f6f      	cmp	r7, #111	; 0x6f
 800191e:	bf0c      	ite	eq
 8001920:	2308      	moveq	r3, #8
 8001922:	230a      	movne	r3, #10
 8001924:	2100      	movs	r1, #0
 8001926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800192a:	6865      	ldr	r5, [r4, #4]
 800192c:	60a5      	str	r5, [r4, #8]
 800192e:	2d00      	cmp	r5, #0
 8001930:	bfa2      	ittt	ge
 8001932:	6821      	ldrge	r1, [r4, #0]
 8001934:	f021 0104 	bicge.w	r1, r1, #4
 8001938:	6021      	strge	r1, [r4, #0]
 800193a:	b90e      	cbnz	r6, 8001940 <_printf_i+0x118>
 800193c:	2d00      	cmp	r5, #0
 800193e:	d04d      	beq.n	80019dc <_printf_i+0x1b4>
 8001940:	4615      	mov	r5, r2
 8001942:	fbb6 f1f3 	udiv	r1, r6, r3
 8001946:	fb03 6711 	mls	r7, r3, r1, r6
 800194a:	5dc7      	ldrb	r7, [r0, r7]
 800194c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001950:	4637      	mov	r7, r6
 8001952:	42bb      	cmp	r3, r7
 8001954:	460e      	mov	r6, r1
 8001956:	d9f4      	bls.n	8001942 <_printf_i+0x11a>
 8001958:	2b08      	cmp	r3, #8
 800195a:	d10b      	bne.n	8001974 <_printf_i+0x14c>
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	07de      	lsls	r6, r3, #31
 8001960:	d508      	bpl.n	8001974 <_printf_i+0x14c>
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	6861      	ldr	r1, [r4, #4]
 8001966:	4299      	cmp	r1, r3
 8001968:	bfde      	ittt	le
 800196a:	2330      	movle	r3, #48	; 0x30
 800196c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001970:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001974:	1b52      	subs	r2, r2, r5
 8001976:	6122      	str	r2, [r4, #16]
 8001978:	f8cd a000 	str.w	sl, [sp]
 800197c:	464b      	mov	r3, r9
 800197e:	aa03      	add	r2, sp, #12
 8001980:	4621      	mov	r1, r4
 8001982:	4640      	mov	r0, r8
 8001984:	f7ff fee2 	bl	800174c <_printf_common>
 8001988:	3001      	adds	r0, #1
 800198a:	d14c      	bne.n	8001a26 <_printf_i+0x1fe>
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	b004      	add	sp, #16
 8001992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001996:	4835      	ldr	r0, [pc, #212]	; (8001a6c <_printf_i+0x244>)
 8001998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800199c:	6829      	ldr	r1, [r5, #0]
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80019a4:	6029      	str	r1, [r5, #0]
 80019a6:	061d      	lsls	r5, r3, #24
 80019a8:	d514      	bpl.n	80019d4 <_printf_i+0x1ac>
 80019aa:	07df      	lsls	r7, r3, #31
 80019ac:	bf44      	itt	mi
 80019ae:	f043 0320 	orrmi.w	r3, r3, #32
 80019b2:	6023      	strmi	r3, [r4, #0]
 80019b4:	b91e      	cbnz	r6, 80019be <_printf_i+0x196>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	f023 0320 	bic.w	r3, r3, #32
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	2310      	movs	r3, #16
 80019c0:	e7b0      	b.n	8001924 <_printf_i+0xfc>
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	2378      	movs	r3, #120	; 0x78
 80019cc:	4828      	ldr	r0, [pc, #160]	; (8001a70 <_printf_i+0x248>)
 80019ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019d2:	e7e3      	b.n	800199c <_printf_i+0x174>
 80019d4:	0659      	lsls	r1, r3, #25
 80019d6:	bf48      	it	mi
 80019d8:	b2b6      	uxthmi	r6, r6
 80019da:	e7e6      	b.n	80019aa <_printf_i+0x182>
 80019dc:	4615      	mov	r5, r2
 80019de:	e7bb      	b.n	8001958 <_printf_i+0x130>
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	6826      	ldr	r6, [r4, #0]
 80019e4:	6961      	ldr	r1, [r4, #20]
 80019e6:	1d18      	adds	r0, r3, #4
 80019e8:	6028      	str	r0, [r5, #0]
 80019ea:	0635      	lsls	r5, r6, #24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	d501      	bpl.n	80019f4 <_printf_i+0x1cc>
 80019f0:	6019      	str	r1, [r3, #0]
 80019f2:	e002      	b.n	80019fa <_printf_i+0x1d2>
 80019f4:	0670      	lsls	r0, r6, #25
 80019f6:	d5fb      	bpl.n	80019f0 <_printf_i+0x1c8>
 80019f8:	8019      	strh	r1, [r3, #0]
 80019fa:	2300      	movs	r3, #0
 80019fc:	6123      	str	r3, [r4, #16]
 80019fe:	4615      	mov	r5, r2
 8001a00:	e7ba      	b.n	8001978 <_printf_i+0x150>
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	1d1a      	adds	r2, r3, #4
 8001a06:	602a      	str	r2, [r5, #0]
 8001a08:	681d      	ldr	r5, [r3, #0]
 8001a0a:	6862      	ldr	r2, [r4, #4]
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f7fe fc06 	bl	8000220 <memchr>
 8001a14:	b108      	cbz	r0, 8001a1a <_printf_i+0x1f2>
 8001a16:	1b40      	subs	r0, r0, r5
 8001a18:	6060      	str	r0, [r4, #4]
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	6123      	str	r3, [r4, #16]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a24:	e7a8      	b.n	8001978 <_printf_i+0x150>
 8001a26:	6923      	ldr	r3, [r4, #16]
 8001a28:	462a      	mov	r2, r5
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	47d0      	blx	sl
 8001a30:	3001      	adds	r0, #1
 8001a32:	d0ab      	beq.n	800198c <_printf_i+0x164>
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	079b      	lsls	r3, r3, #30
 8001a38:	d413      	bmi.n	8001a62 <_printf_i+0x23a>
 8001a3a:	68e0      	ldr	r0, [r4, #12]
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	bfb8      	it	lt
 8001a42:	4618      	movlt	r0, r3
 8001a44:	e7a4      	b.n	8001990 <_printf_i+0x168>
 8001a46:	2301      	movs	r3, #1
 8001a48:	4632      	mov	r2, r6
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	47d0      	blx	sl
 8001a50:	3001      	adds	r0, #1
 8001a52:	d09b      	beq.n	800198c <_printf_i+0x164>
 8001a54:	3501      	adds	r5, #1
 8001a56:	68e3      	ldr	r3, [r4, #12]
 8001a58:	9903      	ldr	r1, [sp, #12]
 8001a5a:	1a5b      	subs	r3, r3, r1
 8001a5c:	42ab      	cmp	r3, r5
 8001a5e:	dcf2      	bgt.n	8001a46 <_printf_i+0x21e>
 8001a60:	e7eb      	b.n	8001a3a <_printf_i+0x212>
 8001a62:	2500      	movs	r5, #0
 8001a64:	f104 0619 	add.w	r6, r4, #25
 8001a68:	e7f5      	b.n	8001a56 <_printf_i+0x22e>
 8001a6a:	bf00      	nop
 8001a6c:	08001b91 	.word	0x08001b91
 8001a70:	08001ba2 	.word	0x08001ba2

08001a74 <_read_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4d07      	ldr	r5, [pc, #28]	; (8001a94 <_read_r+0x20>)
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	602a      	str	r2, [r5, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7fe fed6 	bl	8000834 <_read>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_read_r+0x1e>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_read_r+0x1e>
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	200000a4 	.word	0x200000a4

08001a98 <_fstat_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4d07      	ldr	r5, [pc, #28]	; (8001ab8 <_fstat_r+0x20>)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	602b      	str	r3, [r5, #0]
 8001aa6:	f7fe feee 	bl	8000886 <_fstat>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d102      	bne.n	8001ab4 <_fstat_r+0x1c>
 8001aae:	682b      	ldr	r3, [r5, #0]
 8001ab0:	b103      	cbz	r3, 8001ab4 <_fstat_r+0x1c>
 8001ab2:	6023      	str	r3, [r4, #0]
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200000a4 	.word	0x200000a4

08001abc <_isatty_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4d06      	ldr	r5, [pc, #24]	; (8001ad8 <_isatty_r+0x1c>)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	602b      	str	r3, [r5, #0]
 8001ac8:	f7fe feed 	bl	80008a6 <_isatty>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_isatty_r+0x1a>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_isatty_r+0x1a>
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	200000a4 	.word	0x200000a4

08001adc <_init>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	bf00      	nop
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr

08001ae8 <_fini>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr
