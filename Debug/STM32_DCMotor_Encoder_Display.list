
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c4  080004cc  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  000104cc  2**0
                  CONTENTS
  4 .ARM          00000000  080004c4  080004c4  000104cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c4  080004cc  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000104cc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b92  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e3  00000000  00000000  0001108e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  00011428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000138ff  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001563  00000000  00000000  00024d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fd6a  00000000  00000000  000262f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0009605c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000110  00000000  00000000  000960ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080004ac 	.word	0x080004ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080004ac 	.word	0x080004ac

08000218 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 800021c:	4b40      	ldr	r3, [pc, #256]	; (8000320 <sysClockConfig+0x108>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a3f      	ldr	r2, [pc, #252]	; (8000320 <sysClockConfig+0x108>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]



	//Enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 8000228:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <sysClockConfig+0x10c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a3d      	ldr	r2, [pc, #244]	; (8000324 <sysClockConfig+0x10c>)
 800022e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000232:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 8000234:	bf00      	nop
 8000236:	4b3b      	ldr	r3, [pc, #236]	; (8000324 <sysClockConfig+0x10c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <sysClockConfig+0x1e>

	//RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_PWREN_Pos);


	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 8000242:	4b38      	ldr	r3, [pc, #224]	; (8000324 <sysClockConfig+0x10c>)
 8000244:	4a37      	ldr	r2, [pc, #220]	; (8000324 <sysClockConfig+0x10c>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <sysClockConfig+0x10c>)
 800024c:	4a35      	ldr	r2, [pc, #212]	; (8000324 <sysClockConfig+0x10c>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division
 8000252:	4b34      	ldr	r3, [pc, #208]	; (8000324 <sysClockConfig+0x10c>)
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <sysClockConfig+0x10c>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <sysClockConfig+0x10c>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a31      	ldr	r2, [pc, #196]	; (8000324 <sysClockConfig+0x10c>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 8000266:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <sysClockConfig+0x10c>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <sysClockConfig+0x10c>)
 800026c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000270:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <sysClockConfig+0x10c>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a2b      	ldr	r2, [pc, #172]	; (8000324 <sysClockConfig+0x10c>)
 8000278:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800027c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 800027e:	4b29      	ldr	r3, [pc, #164]	; (8000324 <sysClockConfig+0x10c>)
 8000280:	4a28      	ldr	r2, [pc, #160]	; (8000324 <sysClockConfig+0x10c>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 8000286:	4b27      	ldr	r3, [pc, #156]	; (8000324 <sysClockConfig+0x10c>)
 8000288:	4a26      	ldr	r2, [pc, #152]	; (8000324 <sysClockConfig+0x10c>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 800028e:	4b25      	ldr	r3, [pc, #148]	; (8000324 <sysClockConfig+0x10c>)
 8000290:	4a24      	ldr	r2, [pc, #144]	; (8000324 <sysClockConfig+0x10c>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 8000296:	4b23      	ldr	r3, [pc, #140]	; (8000324 <sysClockConfig+0x10c>)
 8000298:	4a22      	ldr	r2, [pc, #136]	; (8000324 <sysClockConfig+0x10c>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <sysClockConfig+0x10c>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a20      	ldr	r2, [pc, #128]	; (8000324 <sysClockConfig+0x10c>)
 80002a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 80002aa:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <sysClockConfig+0x10c>)
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <sysClockConfig+0x10c>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <sysClockConfig+0x10c>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <sysClockConfig+0x10c>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <sysClockConfig+0x10c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <sysClockConfig+0x10c>)
 80002c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 80002ca:	bf00      	nop
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <sysClockConfig+0x10c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f9      	beq.n	80002cc <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <sysClockConfig+0x10c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <sysClockConfig+0x10c>)
 80002de:	f043 0303 	orr.w	r3, r3, #3
 80002e2:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 80002e4:	bf00      	nop
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <sysClockConfig+0x10c>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f003 030c 	and.w	r3, r3, #12
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <sysClockConfig+0xce>

	//enable clock for GPIO ports A, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <sysClockConfig+0x10c>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <sysClockConfig+0x10c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <sysClockConfig+0x10c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <sysClockConfig+0x10c>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <sysClockConfig+0x10c>)
 800030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <sysClockConfig+0x10c>)
 8000310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000314:	6613      	str	r3, [r2, #96]	; 0x60


}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40022000 	.word	0x40022000
 8000324:	40021000 	.word	0x40021000

08000328 <gpioInit>:

#include <gpio.h>
#include <stm32g431xx.h>


void gpioInit(){
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x00FFFFFF);
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000336:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <gpioInit+0xb0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <gpioInit+0xb0>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]

	//set PA4, PA5, PA7 to alternate function mode, set PA6 to output
	GPIOA->MODER |= (0x2 << GPIO_MODER_MODE4_Pos);
 8000346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000354:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << GPIO_MODER_MODE5_Pos);
 8000356:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000364:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x1 << GPIO_MODER_MODE6_Pos);
 8000366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000374:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2 << GPIO_MODER_MODE7_Pos);
 8000376:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000384:	6013      	str	r3, [r2, #0]

	//set PC10, PC12 as output
	GPIOC->MODER |= (0x1 << GPIO_MODER_MODE10_Pos);
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <gpioInit+0xb0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <gpioInit+0xb0>)
 800038c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000390:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x1 << GPIO_MODER_MODE12_Pos);
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <gpioInit+0xb0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <gpioInit+0xb0>)
 8000398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800039c:	6013      	str	r3, [r2, #0]

	//pull-up pull-down register for inputs? PUPDR
	//PC2,PC3,PC13,PC14,PC15

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x5 << GPIO_AFRL_AFSEL4_Pos);
 800039e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80003ac:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5 << GPIO_AFRL_AFSEL5_Pos);
 80003ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003bc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5 << GPIO_AFRL_AFSEL7_Pos);
 80003be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c8:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003cc:	6213      	str	r3, [r2, #32]

}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	48000800 	.word	0x48000800

080003dc <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	sysClockConfig();
 80003e0:	f7ff ff1a 	bl	8000218 <sysClockConfig>
	gpioInit();
 80003e4:	f7ff ffa0 	bl	8000328 <gpioInit>

	while(1){
 80003e8:	e7fe      	b.n	80003e8 <main+0xc>
	...

080003ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <SystemInit+0x20>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <SystemInit+0x20>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000412:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000414:	f7ff ffea 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	; (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043e:	f000 f811 	bl	8000464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000442:	f7ff ffcb 	bl	80003dc <main>

08000446 <LoopForever>:

LoopForever:
  b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   r0, =_estack
 8000448:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000454:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000458:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800045c:	2000001c 	.word	0x2000001c

08000460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC1_2_IRQHandler>
	...

08000464 <__libc_init_array>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4d0d      	ldr	r5, [pc, #52]	; (800049c <__libc_init_array+0x38>)
 8000468:	4c0d      	ldr	r4, [pc, #52]	; (80004a0 <__libc_init_array+0x3c>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	2600      	movs	r6, #0
 8000470:	42a6      	cmp	r6, r4
 8000472:	d109      	bne.n	8000488 <__libc_init_array+0x24>
 8000474:	4d0b      	ldr	r5, [pc, #44]	; (80004a4 <__libc_init_array+0x40>)
 8000476:	4c0c      	ldr	r4, [pc, #48]	; (80004a8 <__libc_init_array+0x44>)
 8000478:	f000 f818 	bl	80004ac <_init>
 800047c:	1b64      	subs	r4, r4, r5
 800047e:	10a4      	asrs	r4, r4, #2
 8000480:	2600      	movs	r6, #0
 8000482:	42a6      	cmp	r6, r4
 8000484:	d105      	bne.n	8000492 <__libc_init_array+0x2e>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	3601      	adds	r6, #1
 8000490:	e7ee      	b.n	8000470 <__libc_init_array+0xc>
 8000492:	f855 3b04 	ldr.w	r3, [r5], #4
 8000496:	4798      	blx	r3
 8000498:	3601      	adds	r6, #1
 800049a:	e7f2      	b.n	8000482 <__libc_init_array+0x1e>
 800049c:	080004c4 	.word	0x080004c4
 80004a0:	080004c4 	.word	0x080004c4
 80004a4:	080004c4 	.word	0x080004c4
 80004a8:	080004c8 	.word	0x080004c8

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
