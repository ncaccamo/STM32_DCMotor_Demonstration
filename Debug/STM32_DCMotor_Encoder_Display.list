
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800170c  0800170c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800170c  0800170c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800170c  0800170c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800170c  0800170c  0001170c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000040  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a1c  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000beb  00000000  00000000  00022ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  000236a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  000238f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015172  00000000  00000000  00023aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d33  00000000  00000000  00038c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000761f0  00000000  00000000  0003c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b2b3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d10  00000000  00000000  000b2b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001664 	.word	0x08001664

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	08001664 	.word	0x08001664

08000218 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 800021c:	4b4f      	ldr	r3, [pc, #316]	; (800035c <sysClockConfig+0x144>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a4e      	ldr	r2, [pc, #312]	; (800035c <sysClockConfig+0x144>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 8000228:	4b4d      	ldr	r3, [pc, #308]	; (8000360 <sysClockConfig+0x148>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a4c      	ldr	r2, [pc, #304]	; (8000360 <sysClockConfig+0x148>)
 800022e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000232:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 8000234:	bf00      	nop
 8000236:	4b4a      	ldr	r3, [pc, #296]	; (8000360 <sysClockConfig+0x148>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <sysClockConfig+0x1e>

	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 8000242:	4b47      	ldr	r3, [pc, #284]	; (8000360 <sysClockConfig+0x148>)
 8000244:	4a46      	ldr	r2, [pc, #280]	; (8000360 <sysClockConfig+0x148>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 800024a:	4b45      	ldr	r3, [pc, #276]	; (8000360 <sysClockConfig+0x148>)
 800024c:	4a44      	ldr	r2, [pc, #272]	; (8000360 <sysClockConfig+0x148>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 8000252:	4b43      	ldr	r3, [pc, #268]	; (8000360 <sysClockConfig+0x148>)
 8000254:	4a42      	ldr	r2, [pc, #264]	; (8000360 <sysClockConfig+0x148>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 800025a:	4b41      	ldr	r3, [pc, #260]	; (8000360 <sysClockConfig+0x148>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a40      	ldr	r2, [pc, #256]	; (8000360 <sysClockConfig+0x148>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 8000266:	4b3e      	ldr	r3, [pc, #248]	; (8000360 <sysClockConfig+0x148>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a3d      	ldr	r2, [pc, #244]	; (8000360 <sysClockConfig+0x148>)
 800026c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000270:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 8000272:	4b3b      	ldr	r3, [pc, #236]	; (8000360 <sysClockConfig+0x148>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a3a      	ldr	r2, [pc, #232]	; (8000360 <sysClockConfig+0x148>)
 8000278:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800027c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 800027e:	4b38      	ldr	r3, [pc, #224]	; (8000360 <sysClockConfig+0x148>)
 8000280:	4a37      	ldr	r2, [pc, #220]	; (8000360 <sysClockConfig+0x148>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 8000286:	4b36      	ldr	r3, [pc, #216]	; (8000360 <sysClockConfig+0x148>)
 8000288:	4a35      	ldr	r2, [pc, #212]	; (8000360 <sysClockConfig+0x148>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 800028e:	4b34      	ldr	r3, [pc, #208]	; (8000360 <sysClockConfig+0x148>)
 8000290:	4a33      	ldr	r2, [pc, #204]	; (8000360 <sysClockConfig+0x148>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 8000296:	4b32      	ldr	r3, [pc, #200]	; (8000360 <sysClockConfig+0x148>)
 8000298:	4a31      	ldr	r2, [pc, #196]	; (8000360 <sysClockConfig+0x148>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 800029e:	4b30      	ldr	r3, [pc, #192]	; (8000360 <sysClockConfig+0x148>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <sysClockConfig+0x148>)
 80002a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <sysClockConfig+0x148>)
 80002ac:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <sysClockConfig+0x148>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 80002b2:	4b2b      	ldr	r3, [pc, #172]	; (8000360 <sysClockConfig+0x148>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <sysClockConfig+0x148>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 80002be:	4b28      	ldr	r3, [pc, #160]	; (8000360 <sysClockConfig+0x148>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a27      	ldr	r2, [pc, #156]	; (8000360 <sysClockConfig+0x148>)
 80002c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 80002ca:	bf00      	nop
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <sysClockConfig+0x148>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f9      	beq.n	80002cc <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <sysClockConfig+0x148>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <sysClockConfig+0x148>)
 80002de:	f043 0303 	orr.w	r3, r3, #3
 80002e2:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 80002e4:	bf00      	nop
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <sysClockConfig+0x148>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f003 030c 	and.w	r3, r3, #12
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <sysClockConfig+0x148>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <sysClockConfig+0x148>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <sysClockConfig+0x148>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <sysClockConfig+0x148>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <sysClockConfig+0x148>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <sysClockConfig+0x148>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <sysClockConfig+0x148>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a11      	ldr	r2, [pc, #68]	; (8000360 <sysClockConfig+0x148>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM3, TIM4, TIM8
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM3EN_Pos);
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <sysClockConfig+0x148>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <sysClockConfig+0x148>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <sysClockConfig+0x148>)
 8000330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <sysClockConfig+0x148>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM8EN_Pos);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <sysClockConfig+0x148>)
 800033c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <sysClockConfig+0x148>)
 8000340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000344:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <sysClockConfig+0x148>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <sysClockConfig+0x148>)
 800034c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000350:	6613      	str	r3, [r2, #96]	; 0x60


}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40022000 	.word	0x40022000
 8000360:	40021000 	.word	0x40021000

08000364 <encoderRotation>:
 * State machine for detecting encoder rotation.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 *
 */
int32_t encoderRotation()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036c:	482f      	ldr	r0, [pc, #188]	; (800042c <encoderRotation+0xc8>)
 800036e:	f000 f941 	bl	80005f4 <readPin>
 8000372:	4603      	mov	r3, r0
 8000374:	b25a      	sxtb	r2, r3
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <encoderRotation+0xcc>)
 8000378:	701a      	strb	r2, [r3, #0]
currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 800037a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800037e:	482b      	ldr	r0, [pc, #172]	; (800042c <encoderRotation+0xc8>)
 8000380:	f000 f938 	bl	80005f4 <readPin>
 8000384:	4603      	mov	r3, r0
 8000386:	b25a      	sxtb	r2, r3
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <encoderRotation+0xd0>)
 800038a:	701a      	strb	r2, [r3, #0]

  if (currentStateCLK != currentStateDT) { 			//encoder is moving
 800038c:	4b28      	ldr	r3, [pc, #160]	; (8000430 <encoderRotation+0xcc>)
 800038e:	f993 2000 	ldrsb.w	r2, [r3]
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <encoderRotation+0xd0>)
 8000394:	f993 3000 	ldrsb.w	r3, [r3]
 8000398:	429a      	cmp	r2, r3
 800039a:	d010      	beq.n	80003be <encoderRotation+0x5a>
    if (currentStateCLK != lastStateCLK) { 			//CLK changed first; CW
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <encoderRotation+0xcc>)
 800039e:	f993 3000 	ldrsb.w	r3, [r3]
 80003a2:	b21a      	sxth	r2, r3
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <encoderRotation+0xd4>)
 80003a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d003      	beq.n	80003b6 <encoderRotation+0x52>
    	rotationDirection = 1;
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <encoderRotation+0xd8>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	e01b      	b.n	80003ee <encoderRotation+0x8a>
    }
     else {											//else DT changed first; CCW
    	rotationDirection = -1;
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <encoderRotation+0xd8>)
 80003b8:	22ff      	movs	r2, #255	; 0xff
 80003ba:	701a      	strb	r2, [r3, #0]
 80003bc:	e017      	b.n	80003ee <encoderRotation+0x8a>
    }
  }
    else { 							    		    //both pins are at same state, so encoder has stopped moving
       if (currentStateCLK != lastStateCLK) {
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <encoderRotation+0xcc>)
 80003c0:	f993 3000 	ldrsb.w	r3, [r3]
 80003c4:	b21a      	sxth	r2, r3
 80003c6:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <encoderRotation+0xd4>)
 80003c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d008      	beq.n	80003e2 <encoderRotation+0x7e>
          counter += rotationDirection;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <encoderRotation+0xd8>)
 80003d2:	f993 3000 	ldrsb.w	r3, [r3]
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <encoderRotation+0xdc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4413      	add	r3, r2
 80003de:	4a18      	ldr	r2, [pc, #96]	; (8000440 <encoderRotation+0xdc>)
 80003e0:	6013      	str	r3, [r2, #0]
       }
       lastStateCLK = currentStateCLK;			//update last CLK state to be ready to detect next movement
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <encoderRotation+0xcc>)
 80003e4:	f993 3000 	ldrsb.w	r3, [r3]
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <encoderRotation+0xd4>)
 80003ec:	801a      	strh	r2, [r3, #0]
    }



  if (counter < 0)
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <encoderRotation+0xdc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	da05      	bge.n	8000402 <encoderRotation+0x9e>
    counter = counter + 30;
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <encoderRotation+0xdc>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	331e      	adds	r3, #30
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <encoderRotation+0xdc>)
 80003fe:	6013      	str	r3, [r2, #0]
 8000400:	e00f      	b.n	8000422 <encoderRotation+0xbe>
  else
   counter = counter % 30;
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <encoderRotation+0xdc>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <encoderRotation+0xe0>)
 8000408:	fb83 1302 	smull	r1, r3, r3, r2
 800040c:	4413      	add	r3, r2
 800040e:	1119      	asrs	r1, r3, #4
 8000410:	17d3      	asrs	r3, r2, #31
 8000412:	1ac9      	subs	r1, r1, r3
 8000414:	460b      	mov	r3, r1
 8000416:	011b      	lsls	r3, r3, #4
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	1ad1      	subs	r1, r2, r3
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <encoderRotation+0xdc>)
 8000420:	6019      	str	r1, [r3, #0]

 return counter;
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <encoderRotation+0xdc>)
 8000424:	681b      	ldr	r3, [r3, #0]
}
 8000426:	4618      	mov	r0, r3
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	48000400 	.word	0x48000400
 8000430:	20000082 	.word	0x20000082
 8000434:	20000083 	.word	0x20000083
 8000438:	20000080 	.word	0x20000080
 800043c:	20000088 	.word	0x20000088
 8000440:	20000084 	.word	0x20000084
 8000444:	88888889 	.word	0x88888889

08000448 <gpioInit>:
 * Function to set the GPIO registers.
 * Parameters: none
 * Returns: none
 */

void gpioInit(){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x00FFFFFF);
 800044c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000456:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800045a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFFFFF00F);
 800045c:	4b63      	ldr	r3, [pc, #396]	; (80005ec <gpioInit+0x1a4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <gpioInit+0x1a4>)
 8000462:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000466:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 8000468:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <gpioInit+0x1a8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4b60      	ldr	r3, [pc, #384]	; (80005f0 <gpioInit+0x1a8>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]



	//set PB13, PB14, PB15 set as inputs (rotary encoder)
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 8000472:	4b5e      	ldr	r3, [pc, #376]	; (80005ec <gpioInit+0x1a4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a5d      	ldr	r2, [pc, #372]	; (80005ec <gpioInit+0x1a4>)
 8000478:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800047c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <gpioInit+0x1a4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a5a      	ldr	r2, [pc, #360]	; (80005ec <gpioInit+0x1a4>)
 8000484:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000488:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 800048a:	4b58      	ldr	r3, [pc, #352]	; (80005ec <gpioInit+0x1a4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a57      	ldr	r2, [pc, #348]	; (80005ec <gpioInit+0x1a4>)
 8000490:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000494:	6013      	str	r3, [r2, #0]

	//set pull-up pull-down register for inputs
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8000496:	4b55      	ldr	r3, [pc, #340]	; (80005ec <gpioInit+0x1a4>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a54      	ldr	r2, [pc, #336]	; (80005ec <gpioInit+0x1a4>)
 800049c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004a0:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 80004a2:	4b52      	ldr	r3, [pc, #328]	; (80005ec <gpioInit+0x1a4>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a51      	ldr	r2, [pc, #324]	; (80005ec <gpioInit+0x1a4>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 80004ae:	4b4f      	ldr	r3, [pc, #316]	; (80005ec <gpioInit+0x1a4>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4a4e      	ldr	r2, [pc, #312]	; (80005ec <gpioInit+0x1a4>)
 80004b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004b8:	60d3      	str	r3, [r2, #12]



	//set PA6, PA9, PC7 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);  //Display_DC
 80004ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004c8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);  //Motor Driver In2
 80004ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);  //Motor Driver In1
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <gpioInit+0x1a8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a44      	ldr	r2, [pc, #272]	; (80005f0 <gpioInit+0x1a8>)
 80004e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e4:	6013      	str	r3, [r2, #0]

	//set PA6, PA9, PC7 as push-pull output
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE6_Pos);
 80004e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004f4:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 80004f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000504:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 8000506:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <gpioInit+0x1a8>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a39      	ldr	r2, [pc, #228]	; (80005f0 <gpioInit+0x1a8>)
 800050c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000510:	6053      	str	r3, [r2, #4]



	//set PA11, PA12 to alternate function mode (TIM4)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800051c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000520:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 8000522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800052c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000530:	6013      	str	r3, [r2, #0]

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 8000532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800053c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000540:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 8000542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000550:	6253      	str	r3, [r2, #36]	; 0x24

	//set PB6 to alternate function mode AF5 (TIM8)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <gpioInit+0x1a4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a25      	ldr	r2, [pc, #148]	; (80005ec <gpioInit+0x1a4>)
 8000558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800055c:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <gpioInit+0x1a4>)
 8000560:	6a1b      	ldr	r3, [r3, #32]
 8000562:	4a22      	ldr	r2, [pc, #136]	; (80005ec <gpioInit+0x1a4>)
 8000564:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000568:	6213      	str	r3, [r2, #32]

	//set PA4, PA5, PA7 to alternate function mode (SPI1)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE4_Pos);
 800056a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000578:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 800057a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000588:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 800058a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000598:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS
 800059a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80005a8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 80005aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80005b8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005c4:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80005c8:	6213      	str	r3, [r2, #32]
	//set PA0? to ADC input



	//set PB1 as output for LED debugging
	GPIOB->MODER |= (0x01 << GPIO_MODER_MODE1_Pos);
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <gpioInit+0x1a4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <gpioInit+0x1a4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0x01 << GPIO_MODER_MODE1_Pos);
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <gpioInit+0x1a4>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <gpioInit+0x1a4>)
 80005dc:	f023 0304 	bic.w	r3, r3, #4
 80005e0:	6053      	str	r3, [r2, #4]
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	48000400 	.word	0x48000400
 80005f0:	48000800 	.word	0x48000800

080005f4 <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 * Returns: PIN_LOW or PIN_HIGH for state of pin.
 */

int32_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & GPIO_PIN_x) != PIN_LOW) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	691a      	ldr	r2, [r3, #16]
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	4013      	ands	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <readPin+0x1c>
		return PIN_HIGH;
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <readPin+0x1e>
	}
	else {
		return PIN_LOW;
 8000610:	2300      	movs	r3, #0
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <setPin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void setPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x, pinState_t pinState){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
 800062a:	4613      	mov	r3, r2
 800062c:	707b      	strb	r3, [r7, #1]
	if (pinState == PIN_LOW){
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d105      	bne.n	8000640 <setPin+0x22>
	GPIOx->BSRR = (GPIO_PIN_x << 16U);          //set pin LOW
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	041b      	lsls	r3, r3, #16
 8000638:	461a      	mov	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	619a      	str	r2, [r3, #24]
	}
	else if (pinState == PIN_HIGH){
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
	}
}
 800063e:	e005      	b.n	800064c <setPin+0x2e>
	else if (pinState == PIN_HIGH){
 8000640:	787b      	ldrb	r3, [r7, #1]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d102      	bne.n	800064c <setPin+0x2e>
	GPIOx->BSRR = GPIO_PIN_x;                  //set pin HIGH
 8000646:	887a      	ldrh	r2, [r7, #2]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	619a      	str	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <togglePin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void togglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]

	if ((GPIOx->ODR & GPIO_PIN_x) != PIN_LOW) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <togglePin+0x24>
		GPIOx->BSRR = (GPIO_PIN_x << 16U);    //set pin LOW
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	041b      	lsls	r3, r3, #16
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	619a      	str	r2, [r3, #24]
	}
	else {
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
	}
}
 800067a:	e002      	b.n	8000682 <togglePin+0x2a>
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
 800067c:	887a      	ldrh	r2, [r7, #2]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	619a      	str	r2, [r3, #24]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <interruptInit>:
/**
 * Function to initialize interrupts.
 * Parameters: none
 * Returns: none
 */
void interruptInit(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c

//GPIO interrupt for encoder switch
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);		//EXTI Line15 Interrupt, PB15 (Rotary Encoder SW)
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <interruptInit+0x48>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <interruptInit+0x48>)
 800072a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072e:	6153      	str	r3, [r2, #20]
EXTI->IMR1 |= (0x01 << EXTI_IMR1_IM15_Pos);     				//set interrupt mask register
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <interruptInit+0x4c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <interruptInit+0x4c>)
 8000736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073a:	6013      	str	r3, [r2, #0]
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);					//trigger on falling edge
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <interruptInit+0x4c>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <interruptInit+0x4c>)
 8000742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000746:	60d3      	str	r3, [r2, #12]
NVIC_SetPriority(EXTI15_10_IRQn, 0);							//set priority and enable EXTI15_10_IRQHandler
 8000748:	2100      	movs	r1, #0
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f7ff ffbe 	bl	80006cc <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000750:	2028      	movs	r0, #40	; 0x28
 8000752:	f7ff ff9d 	bl	8000690 <__NVIC_EnableIRQ>

//enable timer interrupt for TIM3
NVIC_SetPriority(TIM3_IRQn, 0);
 8000756:	2100      	movs	r1, #0
 8000758:	201d      	movs	r0, #29
 800075a:	f7ff ffb7 	bl	80006cc <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM3_IRQn);
 800075e:	201d      	movs	r0, #29
 8000760:	f7ff ff96 	bl	8000690 <__NVIC_EnableIRQ>

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010000 	.word	0x40010000
 800076c:	40010400 	.word	0x40010400

08000770 <EXTI15_10_IRQHandler>:
/**
 * IRQ Handler and ISR for EXTI lines 10-15 interrupts.
 * Parameters: none
 * Returns: none
 */
void EXTI15_10_IRQHandler(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	if ((EXTI->PR1 & (ENC_SW_PIN)) != 0) {				//check if the encoder switch pin is the one triggering interrupt
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <EXTI15_10_IRQHandler+0x2c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00a      	beq.n	8000796 <EXTI15_10_IRQHandler+0x26>
		EXTI->PR1 = (ENC_SW_PIN);						//clear interrupt pending bit
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <EXTI15_10_IRQHandler+0x2c>)
 8000782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000786:	615a      	str	r2, [r3, #20]
		togglePin(DBG_LED_PORT, DBG_LED_PIN);
 8000788:	2102      	movs	r1, #2
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <EXTI15_10_IRQHandler+0x30>)
 800078c:	f7ff ff64 	bl	8000658 <togglePin>
		printf("switch interrupt\n");
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <EXTI15_10_IRQHandler+0x34>)
 8000792:	f000 fad7 	bl	8000d44 <puts>

		//These don't work? Interrupt keeps firing.
		//NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
		//NVIC_EnableIRQ(EXTI15_10_IRQn);
	}
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40010400 	.word	0x40010400
 80007a0:	48000400 	.word	0x48000400
 80007a4:	0800167c 	.word	0x0800167c

080007a8 <TIM3_IRQHandler>:
/**
 * IRQ Handler and ISR for TIM3 interrupts.
 * Parameters: none
 * Returns: none
 */
void TIM3_IRQHandler(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	if (TIM3->SR & (TIM_SR_UIF) != 0) {				//check if the interrupt is caused by update event
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <TIM3_IRQHandler+0x30>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00c      	beq.n	80007d2 <TIM3_IRQHandler+0x2a>
	   TIM3->SR = ~(TIM_SR_UIF);					//clear interrupt pending bit
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <TIM3_IRQHandler+0x30>)
 80007ba:	f06f 0201 	mvn.w	r2, #1
 80007be:	611a      	str	r2, [r3, #16]
	   togglePin(DBG_LED_PORT, DBG_LED_PIN);
 80007c0:	2102      	movs	r1, #2
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <TIM3_IRQHandler+0x34>)
 80007c4:	f7ff ff48 	bl	8000658 <togglePin>
	   encoderCount = encoderRotation();
 80007c8:	f7ff fdcc 	bl	8000364 <encoderRotation>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <TIM3_IRQHandler+0x38>)
 80007d0:	6013      	str	r3, [r2, #0]
	//set motor speed based on encoder count
	//measure motor speed
	//update display based on motor speed
	}
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40000400 	.word	0x40000400
 80007dc:	48000400 	.word	0x48000400
 80007e0:	2000008c 	.word	0x2000008c

080007e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d013      	beq.n	8000824 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000800:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000804:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00b      	beq.n	8000824 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800080c:	e000      	b.n	8000810 <ITM_SendChar+0x2c>
    {
      __NOP();
 800080e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f9      	beq.n	800080e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800081a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <main>:
int32_t encoderButtonState;



int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	sysClockConfig();
 8000838:	f7ff fcee 	bl	8000218 <sysClockConfig>
	gpioInit();
 800083c:	f7ff fe04 	bl	8000448 <gpioInit>
	interruptInit();
 8000840:	f7ff ff6e 	bl	8000720 <interruptInit>
	TIM3Init();
 8000844:	f000 f8f2 	bl	8000a2c <TIM3Init>
	TIM4Init();
 8000848:	f000 f90e 	bl	8000a68 <TIM4Init>
	TIM8Init();
 800084c:	f000 f964 	bl	8000b18 <TIM8Init>
	setMotorDirection(MOTOR_FORWARD);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 f825 	bl	80008a0 <setMotorDirection>
	printf("Initialization done.\n");
 8000856:	4802      	ldr	r0, [pc, #8]	; (8000860 <main+0x2c>)
 8000858:	f000 fa74 	bl	8000d44 <puts>

	while(1){
 800085c:	e7fe      	b.n	800085c <main+0x28>
 800085e:	bf00      	nop
 8000860:	08001690 	.word	0x08001690

08000864 <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  int i=0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e009      	b.n	800088e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	60ba      	str	r2, [r7, #8]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffae 	bl	80007e4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	3301      	adds	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	dbf1      	blt.n	800087a <_write+0x16>
  return len;
 8000896:	687b      	ldr	r3, [r7, #4]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <setMotorDirection>:
/**
 * Function to set the desired direction of the motor.
 * Parameters: Direction of the motor, either forward or reverse.
 * Returns: none
 */
void setMotorDirection(motordirection_t direction){				//must check that motor is stopped
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	//if (motor)
			switch (direction) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <setMotorDirection+0x16>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00d      	beq.n	80008d0 <setMotorDirection+0x30>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
					break;
			}

}
 80008b4:	e019      	b.n	80008ea <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_HIGH);		//in1 HIGH, in2 LOW for forward
 80008b6:	2201      	movs	r2, #1
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <setMotorDirection+0x54>)
 80008bc:	f7ff feaf 	bl	800061e <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_LOW);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f7ff fea8 	bl	800061e <setPin>
					break;
 80008ce:	e00c      	b.n	80008ea <setMotorDirection+0x4a>
					setPin(MOT_DR_IN1_PORT, MOT_DR_IN1_PIN, PIN_LOW);		//in1 LOW, in2 HIGH for reverse
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <setMotorDirection+0x54>)
 80008d6:	f7ff fea2 	bl	800061e <setPin>
					setPin(MOT_DR_IN2_PORT, MOT_DR_IN2_PIN, PIN_HIGH);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f7ff fe9b 	bl	800061e <setPin>
					break;
 80008e8:	bf00      	nop
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48000800 	.word	0x48000800

080008f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e00a      	b.n	8000920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090a:	f3af 8000 	nop.w
 800090e:	4601      	mov	r1, r0
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	b2ca      	uxtb	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf0      	blt.n	800090a <_read+0x12>
  }

  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
  return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f000 f91a 	bl	8000c04 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20008000 	.word	0x20008000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000090 	.word	0x20000090
 8000a04:	200000a8 	.word	0x200000a8

08000a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <TIM3Init>:
/**
 * Function to initialize and start Timer 3. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM3Init(){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM3->CR1 |= (0x01 << TIM_CR1_URS_Pos);		//interrupts only occur on update (overflow/underflow)
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <TIM3Init+0x38>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <TIM3Init+0x38>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//interrupt is enabled
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <TIM3Init+0x38>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <TIM3Init+0x38>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	60d3      	str	r3, [r2, #12]
	TIM3->PSC = 85-1; 						    //prescalar value (set to yield interrupt at 30 Hz)
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <TIM3Init+0x38>)
 8000a4a:	2254      	movs	r2, #84	; 0x54
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CR1 |= (0x01 << TIM_CR1_CEN_Pos);		//counter is enabled
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <TIM3Init+0x38>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <TIM3Init+0x38>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6013      	str	r3, [r2, #0]


}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40000400 	.word	0x40000400

08000a68 <TIM4Init>:
/**
 * Function to initialize and start Timer 4.
 * Parameters: none
 * Returns: none
 */
void TIM4Init(){
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);      //both inputs are active on both rising and falling edges
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <TIM4Init+0xac>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <TIM4Init+0xac>)
 8000a72:	f043 0303 	orr.w	r3, r3, #3
 8000a76:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <TIM4Init+0xac>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <TIM4Init+0xac>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <TIM4Init+0xac>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <TIM4Init+0xac>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);   //set input filter on capture 1
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <TIM4Init+0xac>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <TIM4Init+0xac>)
 8000a96:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a9a:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);   //set input filter on capture 2
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <TIM4Init+0xac>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <TIM4Init+0xac>)
 8000aa2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000aa6:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);    //tim_ti1fp1 noninverted
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <TIM4Init+0xac>)
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <TIM4Init+0xac>)
 8000aae:	f023 0302 	bic.w	r3, r3, #2
 8000ab2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <TIM4Init+0xac>)
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <TIM4Init+0xac>)
 8000aba:	f023 0308 	bic.w	r3, r3, #8
 8000abe:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);    //tim_ti2fp2 noninverted
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <TIM4Init+0xac>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <TIM4Init+0xac>)
 8000ac6:	f023 0320 	bic.w	r3, r3, #32
 8000aca:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <TIM4Init+0xac>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <TIM4Init+0xac>)
 8000ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ad6:	6213      	str	r3, [r2, #32]
	TIM4->PSC &= ~(0x01 << TIM_PSC_PSC_Pos);	   //prescalar set to 0
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <TIM4Init+0xac>)
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <TIM4Init+0xac>)
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	   //enable auto-reload preload
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <TIM4Init+0xac>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <TIM4Init+0xac>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	6013      	str	r3, [r2, #0]
	TIM4->ARR |= (0x00FF << TIM_ARR_ARR_Pos);	   //auto-reload register
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <TIM4Init+0xac>)
 8000af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <TIM4Init+0xac>)
 8000af6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000afa:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <TIM4Init+0xac>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <TIM4Init+0xac>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]

}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40000800 	.word	0x40000800

08000b18 <TIM8Init>:
/**
 * Function to initialize and start Timer 8.
 * Parameters: none
 * Returns: none
 */
void TIM8Init(){
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM8->CCMR1 |= (0x06 << TIM_CCMR1_OC1M_Pos);		//set PWM mode 1
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <TIM8Init+0x94>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a22      	ldr	r2, [pc, #136]	; (8000bac <TIM8Init+0x94>)
 8000b22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000b26:	6193      	str	r3, [r2, #24]
	TIM8->CCMR1 |= (0x01 << TIM_CCMR1_OC1PE_Pos);		//preload register is enabled, for duty cycle
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <TIM8Init+0x94>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <TIM8Init+0x94>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);			//auto-reload preload is enabled, for frequency
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <TIM8Init+0x94>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <TIM8Init+0x94>)
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	6013      	str	r3, [r2, #0]
	TIM8->CR1 &= ~(0x03 << TIM_CR1_CMS_Pos);			//edge-aligned mode
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <TIM8Init+0x94>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <TIM8Init+0x94>)
 8000b46:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b4a:	6013      	str	r3, [r2, #0]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);			//OC1 active high
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <TIM8Init+0x94>)
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <TIM8Init+0x94>)
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6213      	str	r3, [r2, #32]
	TIM8->CCER |= (0x01 << TIM_CCER_CC1E_Pos);			//OC1 is output on the output pin
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <TIM8Init+0x94>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <TIM8Init+0x94>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6213      	str	r3, [r2, #32]
	TIM8->CCER &= ~(0x01 << TIM_CCER_CC1NE_Pos);		//tim_oc1n signal is not output
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <TIM8Init+0x94>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <TIM8Init+0x94>)
 8000b6a:	f023 0304 	bic.w	r3, r3, #4
 8000b6e:	6213      	str	r3, [r2, #32]
	TIM8->BDTR |= (0x01 << TIM_BDTR_MOE_Pos);			//main output enabled
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <TIM8Init+0x94>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <TIM8Init+0x94>)
 8000b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7a:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->ARR = 100-1;									//auto-reload, corresponds with PWM frequency
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <TIM8Init+0x94>)
 8000b7e:	2263      	movs	r2, #99	; 0x63
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM8->PSC = 170-1;	   								//prescalar of 18, so the input clock is 10Mhz
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <TIM8Init+0x94>)
 8000b84:	22a9      	movs	r2, #169	; 0xa9
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
	TIM8->EGR |= (0x01 << TIM_EGR_UG_Pos);				//initialize shadow registers before counter starts
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <TIM8Init+0x94>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <TIM8Init+0x94>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6153      	str	r3, [r2, #20]
	TIM8->CR1 |= (0x01 << TIM_CR1_CEN_Pos);             //counter is enabled
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <TIM8Init+0x94>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <TIM8Init+0x94>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40013400 	.word	0x40013400

08000bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff ff28 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bde:	f000 f817 	bl	8000c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fe27 	bl	8000834 <main>

08000be6 <LoopForever>:

LoopForever:
  b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   r0, =_estack
 8000be8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bf4:	08001714 	.word	0x08001714
  ldr r2, =_sbss
 8000bf8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bfc:	200000a4 	.word	0x200000a4

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <__errno>:
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <__errno+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000

08000c10 <__libc_init_array>:
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	4d0d      	ldr	r5, [pc, #52]	; (8000c48 <__libc_init_array+0x38>)
 8000c14:	4c0d      	ldr	r4, [pc, #52]	; (8000c4c <__libc_init_array+0x3c>)
 8000c16:	1b64      	subs	r4, r4, r5
 8000c18:	10a4      	asrs	r4, r4, #2
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	42a6      	cmp	r6, r4
 8000c1e:	d109      	bne.n	8000c34 <__libc_init_array+0x24>
 8000c20:	4d0b      	ldr	r5, [pc, #44]	; (8000c50 <__libc_init_array+0x40>)
 8000c22:	4c0c      	ldr	r4, [pc, #48]	; (8000c54 <__libc_init_array+0x44>)
 8000c24:	f000 fd1e 	bl	8001664 <_init>
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	10a4      	asrs	r4, r4, #2
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	42a6      	cmp	r6, r4
 8000c30:	d105      	bne.n	8000c3e <__libc_init_array+0x2e>
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c38:	4798      	blx	r3
 8000c3a:	3601      	adds	r6, #1
 8000c3c:	e7ee      	b.n	8000c1c <__libc_init_array+0xc>
 8000c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c42:	4798      	blx	r3
 8000c44:	3601      	adds	r6, #1
 8000c46:	e7f2      	b.n	8000c2e <__libc_init_array+0x1e>
 8000c48:	0800170c 	.word	0x0800170c
 8000c4c:	0800170c 	.word	0x0800170c
 8000c50:	0800170c 	.word	0x0800170c
 8000c54:	08001710 	.word	0x08001710

08000c58 <memset>:
 8000c58:	4402      	add	r2, r0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d100      	bne.n	8000c62 <memset+0xa>
 8000c60:	4770      	bx	lr
 8000c62:	f803 1b01 	strb.w	r1, [r3], #1
 8000c66:	e7f9      	b.n	8000c5c <memset+0x4>

08000c68 <_puts_r>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	460e      	mov	r6, r1
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	b118      	cbz	r0, 8000c78 <_puts_r+0x10>
 8000c70:	6983      	ldr	r3, [r0, #24]
 8000c72:	b90b      	cbnz	r3, 8000c78 <_puts_r+0x10>
 8000c74:	f000 fa48 	bl	8001108 <__sinit>
 8000c78:	69ab      	ldr	r3, [r5, #24]
 8000c7a:	68ac      	ldr	r4, [r5, #8]
 8000c7c:	b913      	cbnz	r3, 8000c84 <_puts_r+0x1c>
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f000 fa42 	bl	8001108 <__sinit>
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <_puts_r+0xd0>)
 8000c86:	429c      	cmp	r4, r3
 8000c88:	d120      	bne.n	8000ccc <_puts_r+0x64>
 8000c8a:	686c      	ldr	r4, [r5, #4]
 8000c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c8e:	07db      	lsls	r3, r3, #31
 8000c90:	d405      	bmi.n	8000c9e <_puts_r+0x36>
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	0598      	lsls	r0, r3, #22
 8000c96:	d402      	bmi.n	8000c9e <_puts_r+0x36>
 8000c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c9a:	f000 fad3 	bl	8001244 <__retarget_lock_acquire_recursive>
 8000c9e:	89a3      	ldrh	r3, [r4, #12]
 8000ca0:	0719      	lsls	r1, r3, #28
 8000ca2:	d51d      	bpl.n	8000ce0 <_puts_r+0x78>
 8000ca4:	6923      	ldr	r3, [r4, #16]
 8000ca6:	b1db      	cbz	r3, 8000ce0 <_puts_r+0x78>
 8000ca8:	3e01      	subs	r6, #1
 8000caa:	68a3      	ldr	r3, [r4, #8]
 8000cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60a3      	str	r3, [r4, #8]
 8000cb4:	bb39      	cbnz	r1, 8000d06 <_puts_r+0x9e>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da38      	bge.n	8000d2c <_puts_r+0xc4>
 8000cba:	4622      	mov	r2, r4
 8000cbc:	210a      	movs	r1, #10
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	f000 f848 	bl	8000d54 <__swbuf_r>
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	d011      	beq.n	8000cec <_puts_r+0x84>
 8000cc8:	250a      	movs	r5, #10
 8000cca:	e011      	b.n	8000cf0 <_puts_r+0x88>
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <_puts_r+0xd4>)
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d101      	bne.n	8000cd6 <_puts_r+0x6e>
 8000cd2:	68ac      	ldr	r4, [r5, #8]
 8000cd4:	e7da      	b.n	8000c8c <_puts_r+0x24>
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <_puts_r+0xd8>)
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	bf08      	it	eq
 8000cdc:	68ec      	ldreq	r4, [r5, #12]
 8000cde:	e7d5      	b.n	8000c8c <_puts_r+0x24>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	f000 f888 	bl	8000df8 <__swsetup_r>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d0dd      	beq.n	8000ca8 <_puts_r+0x40>
 8000cec:	f04f 35ff 	mov.w	r5, #4294967295
 8000cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cf2:	07da      	lsls	r2, r3, #31
 8000cf4:	d405      	bmi.n	8000d02 <_puts_r+0x9a>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	059b      	lsls	r3, r3, #22
 8000cfa:	d402      	bmi.n	8000d02 <_puts_r+0x9a>
 8000cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cfe:	f000 faa2 	bl	8001246 <__retarget_lock_release_recursive>
 8000d02:	4628      	mov	r0, r5
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da04      	bge.n	8000d14 <_puts_r+0xac>
 8000d0a:	69a2      	ldr	r2, [r4, #24]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dc06      	bgt.n	8000d1e <_puts_r+0xb6>
 8000d10:	290a      	cmp	r1, #10
 8000d12:	d004      	beq.n	8000d1e <_puts_r+0xb6>
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	6022      	str	r2, [r4, #0]
 8000d1a:	7019      	strb	r1, [r3, #0]
 8000d1c:	e7c5      	b.n	8000caa <_puts_r+0x42>
 8000d1e:	4622      	mov	r2, r4
 8000d20:	4628      	mov	r0, r5
 8000d22:	f000 f817 	bl	8000d54 <__swbuf_r>
 8000d26:	3001      	adds	r0, #1
 8000d28:	d1bf      	bne.n	8000caa <_puts_r+0x42>
 8000d2a:	e7df      	b.n	8000cec <_puts_r+0x84>
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	250a      	movs	r5, #10
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	6022      	str	r2, [r4, #0]
 8000d34:	701d      	strb	r5, [r3, #0]
 8000d36:	e7db      	b.n	8000cf0 <_puts_r+0x88>
 8000d38:	080016cc 	.word	0x080016cc
 8000d3c:	080016ec 	.word	0x080016ec
 8000d40:	080016ac 	.word	0x080016ac

08000d44 <puts>:
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <puts+0xc>)
 8000d46:	4601      	mov	r1, r0
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	f7ff bf8d 	b.w	8000c68 <_puts_r>
 8000d4e:	bf00      	nop
 8000d50:	20000000 	.word	0x20000000

08000d54 <__swbuf_r>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	460e      	mov	r6, r1
 8000d58:	4614      	mov	r4, r2
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	b118      	cbz	r0, 8000d66 <__swbuf_r+0x12>
 8000d5e:	6983      	ldr	r3, [r0, #24]
 8000d60:	b90b      	cbnz	r3, 8000d66 <__swbuf_r+0x12>
 8000d62:	f000 f9d1 	bl	8001108 <__sinit>
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <__swbuf_r+0x98>)
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d12b      	bne.n	8000dc4 <__swbuf_r+0x70>
 8000d6c:	686c      	ldr	r4, [r5, #4]
 8000d6e:	69a3      	ldr	r3, [r4, #24]
 8000d70:	60a3      	str	r3, [r4, #8]
 8000d72:	89a3      	ldrh	r3, [r4, #12]
 8000d74:	071a      	lsls	r2, r3, #28
 8000d76:	d52f      	bpl.n	8000dd8 <__swbuf_r+0x84>
 8000d78:	6923      	ldr	r3, [r4, #16]
 8000d7a:	b36b      	cbz	r3, 8000dd8 <__swbuf_r+0x84>
 8000d7c:	6923      	ldr	r3, [r4, #16]
 8000d7e:	6820      	ldr	r0, [r4, #0]
 8000d80:	1ac0      	subs	r0, r0, r3
 8000d82:	6963      	ldr	r3, [r4, #20]
 8000d84:	b2f6      	uxtb	r6, r6
 8000d86:	4283      	cmp	r3, r0
 8000d88:	4637      	mov	r7, r6
 8000d8a:	dc04      	bgt.n	8000d96 <__swbuf_r+0x42>
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f000 f926 	bl	8000fe0 <_fflush_r>
 8000d94:	bb30      	cbnz	r0, 8000de4 <__swbuf_r+0x90>
 8000d96:	68a3      	ldr	r3, [r4, #8]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	60a3      	str	r3, [r4, #8]
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	6022      	str	r2, [r4, #0]
 8000da2:	701e      	strb	r6, [r3, #0]
 8000da4:	6963      	ldr	r3, [r4, #20]
 8000da6:	3001      	adds	r0, #1
 8000da8:	4283      	cmp	r3, r0
 8000daa:	d004      	beq.n	8000db6 <__swbuf_r+0x62>
 8000dac:	89a3      	ldrh	r3, [r4, #12]
 8000dae:	07db      	lsls	r3, r3, #31
 8000db0:	d506      	bpl.n	8000dc0 <__swbuf_r+0x6c>
 8000db2:	2e0a      	cmp	r6, #10
 8000db4:	d104      	bne.n	8000dc0 <__swbuf_r+0x6c>
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f000 f911 	bl	8000fe0 <_fflush_r>
 8000dbe:	b988      	cbnz	r0, 8000de4 <__swbuf_r+0x90>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <__swbuf_r+0x9c>)
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	d101      	bne.n	8000dce <__swbuf_r+0x7a>
 8000dca:	68ac      	ldr	r4, [r5, #8]
 8000dcc:	e7cf      	b.n	8000d6e <__swbuf_r+0x1a>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <__swbuf_r+0xa0>)
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	bf08      	it	eq
 8000dd4:	68ec      	ldreq	r4, [r5, #12]
 8000dd6:	e7ca      	b.n	8000d6e <__swbuf_r+0x1a>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f000 f80c 	bl	8000df8 <__swsetup_r>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0cb      	beq.n	8000d7c <__swbuf_r+0x28>
 8000de4:	f04f 37ff 	mov.w	r7, #4294967295
 8000de8:	e7ea      	b.n	8000dc0 <__swbuf_r+0x6c>
 8000dea:	bf00      	nop
 8000dec:	080016cc 	.word	0x080016cc
 8000df0:	080016ec 	.word	0x080016ec
 8000df4:	080016ac 	.word	0x080016ac

08000df8 <__swsetup_r>:
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <__swsetup_r+0xcc>)
 8000dfa:	b570      	push	{r4, r5, r6, lr}
 8000dfc:	681d      	ldr	r5, [r3, #0]
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460c      	mov	r4, r1
 8000e02:	b125      	cbz	r5, 8000e0e <__swsetup_r+0x16>
 8000e04:	69ab      	ldr	r3, [r5, #24]
 8000e06:	b913      	cbnz	r3, 8000e0e <__swsetup_r+0x16>
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 f97d 	bl	8001108 <__sinit>
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <__swsetup_r+0xd0>)
 8000e10:	429c      	cmp	r4, r3
 8000e12:	d10f      	bne.n	8000e34 <__swsetup_r+0x3c>
 8000e14:	686c      	ldr	r4, [r5, #4]
 8000e16:	89a3      	ldrh	r3, [r4, #12]
 8000e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e1c:	0719      	lsls	r1, r3, #28
 8000e1e:	d42c      	bmi.n	8000e7a <__swsetup_r+0x82>
 8000e20:	06dd      	lsls	r5, r3, #27
 8000e22:	d411      	bmi.n	8000e48 <__swsetup_r+0x50>
 8000e24:	2309      	movs	r3, #9
 8000e26:	6033      	str	r3, [r6, #0]
 8000e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e32:	e03e      	b.n	8000eb2 <__swsetup_r+0xba>
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <__swsetup_r+0xd4>)
 8000e36:	429c      	cmp	r4, r3
 8000e38:	d101      	bne.n	8000e3e <__swsetup_r+0x46>
 8000e3a:	68ac      	ldr	r4, [r5, #8]
 8000e3c:	e7eb      	b.n	8000e16 <__swsetup_r+0x1e>
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <__swsetup_r+0xd8>)
 8000e40:	429c      	cmp	r4, r3
 8000e42:	bf08      	it	eq
 8000e44:	68ec      	ldreq	r4, [r5, #12]
 8000e46:	e7e6      	b.n	8000e16 <__swsetup_r+0x1e>
 8000e48:	0758      	lsls	r0, r3, #29
 8000e4a:	d512      	bpl.n	8000e72 <__swsetup_r+0x7a>
 8000e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e4e:	b141      	cbz	r1, 8000e62 <__swsetup_r+0x6a>
 8000e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d002      	beq.n	8000e5e <__swsetup_r+0x66>
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f000 fa5b 	bl	8001314 <_free_r>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6363      	str	r3, [r4, #52]	; 0x34
 8000e62:	89a3      	ldrh	r3, [r4, #12]
 8000e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e68:	81a3      	strh	r3, [r4, #12]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6063      	str	r3, [r4, #4]
 8000e6e:	6923      	ldr	r3, [r4, #16]
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	89a3      	ldrh	r3, [r4, #12]
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	81a3      	strh	r3, [r4, #12]
 8000e7a:	6923      	ldr	r3, [r4, #16]
 8000e7c:	b94b      	cbnz	r3, 8000e92 <__swsetup_r+0x9a>
 8000e7e:	89a3      	ldrh	r3, [r4, #12]
 8000e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e88:	d003      	beq.n	8000e92 <__swsetup_r+0x9a>
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f000 fa01 	bl	8001294 <__smakebuf_r>
 8000e92:	89a0      	ldrh	r0, [r4, #12]
 8000e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e98:	f010 0301 	ands.w	r3, r0, #1
 8000e9c:	d00a      	beq.n	8000eb4 <__swsetup_r+0xbc>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60a3      	str	r3, [r4, #8]
 8000ea2:	6963      	ldr	r3, [r4, #20]
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	61a3      	str	r3, [r4, #24]
 8000ea8:	6923      	ldr	r3, [r4, #16]
 8000eaa:	b943      	cbnz	r3, 8000ebe <__swsetup_r+0xc6>
 8000eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000eb0:	d1ba      	bne.n	8000e28 <__swsetup_r+0x30>
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	0781      	lsls	r1, r0, #30
 8000eb6:	bf58      	it	pl
 8000eb8:	6963      	ldrpl	r3, [r4, #20]
 8000eba:	60a3      	str	r3, [r4, #8]
 8000ebc:	e7f4      	b.n	8000ea8 <__swsetup_r+0xb0>
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e7f7      	b.n	8000eb2 <__swsetup_r+0xba>
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	080016cc 	.word	0x080016cc
 8000ecc:	080016ec 	.word	0x080016ec
 8000ed0:	080016ac 	.word	0x080016ac

08000ed4 <__sflush_r>:
 8000ed4:	898a      	ldrh	r2, [r1, #12]
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	4605      	mov	r5, r0
 8000edc:	0710      	lsls	r0, r2, #28
 8000ede:	460c      	mov	r4, r1
 8000ee0:	d458      	bmi.n	8000f94 <__sflush_r+0xc0>
 8000ee2:	684b      	ldr	r3, [r1, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dc05      	bgt.n	8000ef4 <__sflush_r+0x20>
 8000ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dc02      	bgt.n	8000ef4 <__sflush_r+0x20>
 8000eee:	2000      	movs	r0, #0
 8000ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d0f9      	beq.n	8000eee <__sflush_r+0x1a>
 8000efa:	2300      	movs	r3, #0
 8000efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f00:	682f      	ldr	r7, [r5, #0]
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	d032      	beq.n	8000f6c <__sflush_r+0x98>
 8000f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f08:	89a3      	ldrh	r3, [r4, #12]
 8000f0a:	075a      	lsls	r2, r3, #29
 8000f0c:	d505      	bpl.n	8000f1a <__sflush_r+0x46>
 8000f0e:	6863      	ldr	r3, [r4, #4]
 8000f10:	1ac0      	subs	r0, r0, r3
 8000f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f14:	b10b      	cbz	r3, 8000f1a <__sflush_r+0x46>
 8000f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f18:	1ac0      	subs	r0, r0, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f20:	6a21      	ldr	r1, [r4, #32]
 8000f22:	4628      	mov	r0, r5
 8000f24:	47b0      	blx	r6
 8000f26:	1c43      	adds	r3, r0, #1
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	d106      	bne.n	8000f3a <__sflush_r+0x66>
 8000f2c:	6829      	ldr	r1, [r5, #0]
 8000f2e:	291d      	cmp	r1, #29
 8000f30:	d82c      	bhi.n	8000f8c <__sflush_r+0xb8>
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <__sflush_r+0x108>)
 8000f34:	40ca      	lsrs	r2, r1
 8000f36:	07d6      	lsls	r6, r2, #31
 8000f38:	d528      	bpl.n	8000f8c <__sflush_r+0xb8>
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6062      	str	r2, [r4, #4]
 8000f3e:	04d9      	lsls	r1, r3, #19
 8000f40:	6922      	ldr	r2, [r4, #16]
 8000f42:	6022      	str	r2, [r4, #0]
 8000f44:	d504      	bpl.n	8000f50 <__sflush_r+0x7c>
 8000f46:	1c42      	adds	r2, r0, #1
 8000f48:	d101      	bne.n	8000f4e <__sflush_r+0x7a>
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	b903      	cbnz	r3, 8000f50 <__sflush_r+0x7c>
 8000f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8000f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f52:	602f      	str	r7, [r5, #0]
 8000f54:	2900      	cmp	r1, #0
 8000f56:	d0ca      	beq.n	8000eee <__sflush_r+0x1a>
 8000f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d002      	beq.n	8000f66 <__sflush_r+0x92>
 8000f60:	4628      	mov	r0, r5
 8000f62:	f000 f9d7 	bl	8001314 <_free_r>
 8000f66:	2000      	movs	r0, #0
 8000f68:	6360      	str	r0, [r4, #52]	; 0x34
 8000f6a:	e7c1      	b.n	8000ef0 <__sflush_r+0x1c>
 8000f6c:	6a21      	ldr	r1, [r4, #32]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4628      	mov	r0, r5
 8000f72:	47b0      	blx	r6
 8000f74:	1c41      	adds	r1, r0, #1
 8000f76:	d1c7      	bne.n	8000f08 <__sflush_r+0x34>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0c4      	beq.n	8000f08 <__sflush_r+0x34>
 8000f7e:	2b1d      	cmp	r3, #29
 8000f80:	d001      	beq.n	8000f86 <__sflush_r+0xb2>
 8000f82:	2b16      	cmp	r3, #22
 8000f84:	d101      	bne.n	8000f8a <__sflush_r+0xb6>
 8000f86:	602f      	str	r7, [r5, #0]
 8000f88:	e7b1      	b.n	8000eee <__sflush_r+0x1a>
 8000f8a:	89a3      	ldrh	r3, [r4, #12]
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	81a3      	strh	r3, [r4, #12]
 8000f92:	e7ad      	b.n	8000ef0 <__sflush_r+0x1c>
 8000f94:	690f      	ldr	r7, [r1, #16]
 8000f96:	2f00      	cmp	r7, #0
 8000f98:	d0a9      	beq.n	8000eee <__sflush_r+0x1a>
 8000f9a:	0793      	lsls	r3, r2, #30
 8000f9c:	680e      	ldr	r6, [r1, #0]
 8000f9e:	bf08      	it	eq
 8000fa0:	694b      	ldreq	r3, [r1, #20]
 8000fa2:	600f      	str	r7, [r1, #0]
 8000fa4:	bf18      	it	ne
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	eba6 0807 	sub.w	r8, r6, r7
 8000fac:	608b      	str	r3, [r1, #8]
 8000fae:	f1b8 0f00 	cmp.w	r8, #0
 8000fb2:	dd9c      	ble.n	8000eee <__sflush_r+0x1a>
 8000fb4:	6a21      	ldr	r1, [r4, #32]
 8000fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000fb8:	4643      	mov	r3, r8
 8000fba:	463a      	mov	r2, r7
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	47b0      	blx	r6
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	dc06      	bgt.n	8000fd2 <__sflush_r+0xfe>
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	81a3      	strh	r3, [r4, #12]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	e78e      	b.n	8000ef0 <__sflush_r+0x1c>
 8000fd2:	4407      	add	r7, r0
 8000fd4:	eba8 0800 	sub.w	r8, r8, r0
 8000fd8:	e7e9      	b.n	8000fae <__sflush_r+0xda>
 8000fda:	bf00      	nop
 8000fdc:	20400001 	.word	0x20400001

08000fe0 <_fflush_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	690b      	ldr	r3, [r1, #16]
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	b913      	cbnz	r3, 8000ff0 <_fflush_r+0x10>
 8000fea:	2500      	movs	r5, #0
 8000fec:	4628      	mov	r0, r5
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	b118      	cbz	r0, 8000ffa <_fflush_r+0x1a>
 8000ff2:	6983      	ldr	r3, [r0, #24]
 8000ff4:	b90b      	cbnz	r3, 8000ffa <_fflush_r+0x1a>
 8000ff6:	f000 f887 	bl	8001108 <__sinit>
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <_fflush_r+0x6c>)
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d11b      	bne.n	8001038 <_fflush_r+0x58>
 8001000:	686c      	ldr	r4, [r5, #4]
 8001002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0ef      	beq.n	8000fea <_fflush_r+0xa>
 800100a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800100c:	07d0      	lsls	r0, r2, #31
 800100e:	d404      	bmi.n	800101a <_fflush_r+0x3a>
 8001010:	0599      	lsls	r1, r3, #22
 8001012:	d402      	bmi.n	800101a <_fflush_r+0x3a>
 8001014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001016:	f000 f915 	bl	8001244 <__retarget_lock_acquire_recursive>
 800101a:	4628      	mov	r0, r5
 800101c:	4621      	mov	r1, r4
 800101e:	f7ff ff59 	bl	8000ed4 <__sflush_r>
 8001022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001024:	07da      	lsls	r2, r3, #31
 8001026:	4605      	mov	r5, r0
 8001028:	d4e0      	bmi.n	8000fec <_fflush_r+0xc>
 800102a:	89a3      	ldrh	r3, [r4, #12]
 800102c:	059b      	lsls	r3, r3, #22
 800102e:	d4dd      	bmi.n	8000fec <_fflush_r+0xc>
 8001030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001032:	f000 f908 	bl	8001246 <__retarget_lock_release_recursive>
 8001036:	e7d9      	b.n	8000fec <_fflush_r+0xc>
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <_fflush_r+0x70>)
 800103a:	429c      	cmp	r4, r3
 800103c:	d101      	bne.n	8001042 <_fflush_r+0x62>
 800103e:	68ac      	ldr	r4, [r5, #8]
 8001040:	e7df      	b.n	8001002 <_fflush_r+0x22>
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <_fflush_r+0x74>)
 8001044:	429c      	cmp	r4, r3
 8001046:	bf08      	it	eq
 8001048:	68ec      	ldreq	r4, [r5, #12]
 800104a:	e7da      	b.n	8001002 <_fflush_r+0x22>
 800104c:	080016cc 	.word	0x080016cc
 8001050:	080016ec 	.word	0x080016ec
 8001054:	080016ac 	.word	0x080016ac

08001058 <std>:
 8001058:	2300      	movs	r3, #0
 800105a:	b510      	push	{r4, lr}
 800105c:	4604      	mov	r4, r0
 800105e:	e9c0 3300 	strd	r3, r3, [r0]
 8001062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001066:	6083      	str	r3, [r0, #8]
 8001068:	8181      	strh	r1, [r0, #12]
 800106a:	6643      	str	r3, [r0, #100]	; 0x64
 800106c:	81c2      	strh	r2, [r0, #14]
 800106e:	6183      	str	r3, [r0, #24]
 8001070:	4619      	mov	r1, r3
 8001072:	2208      	movs	r2, #8
 8001074:	305c      	adds	r0, #92	; 0x5c
 8001076:	f7ff fdef 	bl	8000c58 <memset>
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <std+0x38>)
 800107c:	6263      	str	r3, [r4, #36]	; 0x24
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <std+0x3c>)
 8001080:	62a3      	str	r3, [r4, #40]	; 0x28
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <std+0x40>)
 8001084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <std+0x44>)
 8001088:	6224      	str	r4, [r4, #32]
 800108a:	6323      	str	r3, [r4, #48]	; 0x30
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop
 8001090:	080014f5 	.word	0x080014f5
 8001094:	08001517 	.word	0x08001517
 8001098:	0800154f 	.word	0x0800154f
 800109c:	08001573 	.word	0x08001573

080010a0 <_cleanup_r>:
 80010a0:	4901      	ldr	r1, [pc, #4]	; (80010a8 <_cleanup_r+0x8>)
 80010a2:	f000 b8af 	b.w	8001204 <_fwalk_reent>
 80010a6:	bf00      	nop
 80010a8:	08000fe1 	.word	0x08000fe1

080010ac <__sfmoreglue>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	2268      	movs	r2, #104	; 0x68
 80010b0:	1e4d      	subs	r5, r1, #1
 80010b2:	4355      	muls	r5, r2
 80010b4:	460e      	mov	r6, r1
 80010b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010ba:	f000 f997 	bl	80013ec <_malloc_r>
 80010be:	4604      	mov	r4, r0
 80010c0:	b140      	cbz	r0, 80010d4 <__sfmoreglue+0x28>
 80010c2:	2100      	movs	r1, #0
 80010c4:	e9c0 1600 	strd	r1, r6, [r0]
 80010c8:	300c      	adds	r0, #12
 80010ca:	60a0      	str	r0, [r4, #8]
 80010cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010d0:	f7ff fdc2 	bl	8000c58 <memset>
 80010d4:	4620      	mov	r0, r4
 80010d6:	bd70      	pop	{r4, r5, r6, pc}

080010d8 <__sfp_lock_acquire>:
 80010d8:	4801      	ldr	r0, [pc, #4]	; (80010e0 <__sfp_lock_acquire+0x8>)
 80010da:	f000 b8b3 	b.w	8001244 <__retarget_lock_acquire_recursive>
 80010de:	bf00      	nop
 80010e0:	20000095 	.word	0x20000095

080010e4 <__sfp_lock_release>:
 80010e4:	4801      	ldr	r0, [pc, #4]	; (80010ec <__sfp_lock_release+0x8>)
 80010e6:	f000 b8ae 	b.w	8001246 <__retarget_lock_release_recursive>
 80010ea:	bf00      	nop
 80010ec:	20000095 	.word	0x20000095

080010f0 <__sinit_lock_acquire>:
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <__sinit_lock_acquire+0x8>)
 80010f2:	f000 b8a7 	b.w	8001244 <__retarget_lock_acquire_recursive>
 80010f6:	bf00      	nop
 80010f8:	20000096 	.word	0x20000096

080010fc <__sinit_lock_release>:
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <__sinit_lock_release+0x8>)
 80010fe:	f000 b8a2 	b.w	8001246 <__retarget_lock_release_recursive>
 8001102:	bf00      	nop
 8001104:	20000096 	.word	0x20000096

08001108 <__sinit>:
 8001108:	b510      	push	{r4, lr}
 800110a:	4604      	mov	r4, r0
 800110c:	f7ff fff0 	bl	80010f0 <__sinit_lock_acquire>
 8001110:	69a3      	ldr	r3, [r4, #24]
 8001112:	b11b      	cbz	r3, 800111c <__sinit+0x14>
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	f7ff bff0 	b.w	80010fc <__sinit_lock_release>
 800111c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001120:	6523      	str	r3, [r4, #80]	; 0x50
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <__sinit+0x68>)
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <__sinit+0x6c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	62a2      	str	r2, [r4, #40]	; 0x28
 800112a:	42a3      	cmp	r3, r4
 800112c:	bf04      	itt	eq
 800112e:	2301      	moveq	r3, #1
 8001130:	61a3      	streq	r3, [r4, #24]
 8001132:	4620      	mov	r0, r4
 8001134:	f000 f820 	bl	8001178 <__sfp>
 8001138:	6060      	str	r0, [r4, #4]
 800113a:	4620      	mov	r0, r4
 800113c:	f000 f81c 	bl	8001178 <__sfp>
 8001140:	60a0      	str	r0, [r4, #8]
 8001142:	4620      	mov	r0, r4
 8001144:	f000 f818 	bl	8001178 <__sfp>
 8001148:	2200      	movs	r2, #0
 800114a:	60e0      	str	r0, [r4, #12]
 800114c:	2104      	movs	r1, #4
 800114e:	6860      	ldr	r0, [r4, #4]
 8001150:	f7ff ff82 	bl	8001058 <std>
 8001154:	68a0      	ldr	r0, [r4, #8]
 8001156:	2201      	movs	r2, #1
 8001158:	2109      	movs	r1, #9
 800115a:	f7ff ff7d 	bl	8001058 <std>
 800115e:	68e0      	ldr	r0, [r4, #12]
 8001160:	2202      	movs	r2, #2
 8001162:	2112      	movs	r1, #18
 8001164:	f7ff ff78 	bl	8001058 <std>
 8001168:	2301      	movs	r3, #1
 800116a:	61a3      	str	r3, [r4, #24]
 800116c:	e7d2      	b.n	8001114 <__sinit+0xc>
 800116e:	bf00      	nop
 8001170:	080016a8 	.word	0x080016a8
 8001174:	080010a1 	.word	0x080010a1

08001178 <__sfp>:
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	4607      	mov	r7, r0
 800117c:	f7ff ffac 	bl	80010d8 <__sfp_lock_acquire>
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <__sfp+0x84>)
 8001182:	681e      	ldr	r6, [r3, #0]
 8001184:	69b3      	ldr	r3, [r6, #24]
 8001186:	b913      	cbnz	r3, 800118e <__sfp+0x16>
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff ffbd 	bl	8001108 <__sinit>
 800118e:	3648      	adds	r6, #72	; 0x48
 8001190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001194:	3b01      	subs	r3, #1
 8001196:	d503      	bpl.n	80011a0 <__sfp+0x28>
 8001198:	6833      	ldr	r3, [r6, #0]
 800119a:	b30b      	cbz	r3, 80011e0 <__sfp+0x68>
 800119c:	6836      	ldr	r6, [r6, #0]
 800119e:	e7f7      	b.n	8001190 <__sfp+0x18>
 80011a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80011a4:	b9d5      	cbnz	r5, 80011dc <__sfp+0x64>
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <__sfp+0x88>)
 80011a8:	60e3      	str	r3, [r4, #12]
 80011aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80011ae:	6665      	str	r5, [r4, #100]	; 0x64
 80011b0:	f000 f847 	bl	8001242 <__retarget_lock_init_recursive>
 80011b4:	f7ff ff96 	bl	80010e4 <__sfp_lock_release>
 80011b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80011bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80011c0:	6025      	str	r5, [r4, #0]
 80011c2:	61a5      	str	r5, [r4, #24]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4629      	mov	r1, r5
 80011c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011cc:	f7ff fd44 	bl	8000c58 <memset>
 80011d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011d8:	4620      	mov	r0, r4
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011dc:	3468      	adds	r4, #104	; 0x68
 80011de:	e7d9      	b.n	8001194 <__sfp+0x1c>
 80011e0:	2104      	movs	r1, #4
 80011e2:	4638      	mov	r0, r7
 80011e4:	f7ff ff62 	bl	80010ac <__sfmoreglue>
 80011e8:	4604      	mov	r4, r0
 80011ea:	6030      	str	r0, [r6, #0]
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1d5      	bne.n	800119c <__sfp+0x24>
 80011f0:	f7ff ff78 	bl	80010e4 <__sfp_lock_release>
 80011f4:	230c      	movs	r3, #12
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	e7ee      	b.n	80011d8 <__sfp+0x60>
 80011fa:	bf00      	nop
 80011fc:	080016a8 	.word	0x080016a8
 8001200:	ffff0001 	.word	0xffff0001

08001204 <_fwalk_reent>:
 8001204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001208:	4606      	mov	r6, r0
 800120a:	4688      	mov	r8, r1
 800120c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001210:	2700      	movs	r7, #0
 8001212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001216:	f1b9 0901 	subs.w	r9, r9, #1
 800121a:	d505      	bpl.n	8001228 <_fwalk_reent+0x24>
 800121c:	6824      	ldr	r4, [r4, #0]
 800121e:	2c00      	cmp	r4, #0
 8001220:	d1f7      	bne.n	8001212 <_fwalk_reent+0xe>
 8001222:	4638      	mov	r0, r7
 8001224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001228:	89ab      	ldrh	r3, [r5, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d907      	bls.n	800123e <_fwalk_reent+0x3a>
 800122e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001232:	3301      	adds	r3, #1
 8001234:	d003      	beq.n	800123e <_fwalk_reent+0x3a>
 8001236:	4629      	mov	r1, r5
 8001238:	4630      	mov	r0, r6
 800123a:	47c0      	blx	r8
 800123c:	4307      	orrs	r7, r0
 800123e:	3568      	adds	r5, #104	; 0x68
 8001240:	e7e9      	b.n	8001216 <_fwalk_reent+0x12>

08001242 <__retarget_lock_init_recursive>:
 8001242:	4770      	bx	lr

08001244 <__retarget_lock_acquire_recursive>:
 8001244:	4770      	bx	lr

08001246 <__retarget_lock_release_recursive>:
 8001246:	4770      	bx	lr

08001248 <__swhatbuf_r>:
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	460e      	mov	r6, r1
 800124c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001250:	2900      	cmp	r1, #0
 8001252:	b096      	sub	sp, #88	; 0x58
 8001254:	4614      	mov	r4, r2
 8001256:	461d      	mov	r5, r3
 8001258:	da08      	bge.n	800126c <__swhatbuf_r+0x24>
 800125a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	602a      	str	r2, [r5, #0]
 8001262:	061a      	lsls	r2, r3, #24
 8001264:	d410      	bmi.n	8001288 <__swhatbuf_r+0x40>
 8001266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126a:	e00e      	b.n	800128a <__swhatbuf_r+0x42>
 800126c:	466a      	mov	r2, sp
 800126e:	f000 f9a7 	bl	80015c0 <_fstat_r>
 8001272:	2800      	cmp	r0, #0
 8001274:	dbf1      	blt.n	800125a <__swhatbuf_r+0x12>
 8001276:	9a01      	ldr	r2, [sp, #4]
 8001278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800127c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001280:	425a      	negs	r2, r3
 8001282:	415a      	adcs	r2, r3
 8001284:	602a      	str	r2, [r5, #0]
 8001286:	e7ee      	b.n	8001266 <__swhatbuf_r+0x1e>
 8001288:	2340      	movs	r3, #64	; 0x40
 800128a:	2000      	movs	r0, #0
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	b016      	add	sp, #88	; 0x58
 8001290:	bd70      	pop	{r4, r5, r6, pc}
	...

08001294 <__smakebuf_r>:
 8001294:	898b      	ldrh	r3, [r1, #12]
 8001296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001298:	079d      	lsls	r5, r3, #30
 800129a:	4606      	mov	r6, r0
 800129c:	460c      	mov	r4, r1
 800129e:	d507      	bpl.n	80012b0 <__smakebuf_r+0x1c>
 80012a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	6123      	str	r3, [r4, #16]
 80012a8:	2301      	movs	r3, #1
 80012aa:	6163      	str	r3, [r4, #20]
 80012ac:	b002      	add	sp, #8
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	ab01      	add	r3, sp, #4
 80012b2:	466a      	mov	r2, sp
 80012b4:	f7ff ffc8 	bl	8001248 <__swhatbuf_r>
 80012b8:	9900      	ldr	r1, [sp, #0]
 80012ba:	4605      	mov	r5, r0
 80012bc:	4630      	mov	r0, r6
 80012be:	f000 f895 	bl	80013ec <_malloc_r>
 80012c2:	b948      	cbnz	r0, 80012d8 <__smakebuf_r+0x44>
 80012c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c8:	059a      	lsls	r2, r3, #22
 80012ca:	d4ef      	bmi.n	80012ac <__smakebuf_r+0x18>
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	e7e3      	b.n	80012a0 <__smakebuf_r+0xc>
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <__smakebuf_r+0x7c>)
 80012da:	62b3      	str	r3, [r6, #40]	; 0x28
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	6020      	str	r0, [r4, #0]
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	81a3      	strh	r3, [r4, #12]
 80012e6:	9b00      	ldr	r3, [sp, #0]
 80012e8:	6163      	str	r3, [r4, #20]
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	6120      	str	r0, [r4, #16]
 80012ee:	b15b      	cbz	r3, 8001308 <__smakebuf_r+0x74>
 80012f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012f4:	4630      	mov	r0, r6
 80012f6:	f000 f975 	bl	80015e4 <_isatty_r>
 80012fa:	b128      	cbz	r0, 8001308 <__smakebuf_r+0x74>
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	f023 0303 	bic.w	r3, r3, #3
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	81a3      	strh	r3, [r4, #12]
 8001308:	89a0      	ldrh	r0, [r4, #12]
 800130a:	4305      	orrs	r5, r0
 800130c:	81a5      	strh	r5, [r4, #12]
 800130e:	e7cd      	b.n	80012ac <__smakebuf_r+0x18>
 8001310:	080010a1 	.word	0x080010a1

08001314 <_free_r>:
 8001314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001316:	2900      	cmp	r1, #0
 8001318:	d044      	beq.n	80013a4 <_free_r+0x90>
 800131a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800131e:	9001      	str	r0, [sp, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f1a1 0404 	sub.w	r4, r1, #4
 8001326:	bfb8      	it	lt
 8001328:	18e4      	addlt	r4, r4, r3
 800132a:	f000 f97d 	bl	8001628 <__malloc_lock>
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <_free_r+0x94>)
 8001330:	9801      	ldr	r0, [sp, #4]
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	b933      	cbnz	r3, 8001344 <_free_r+0x30>
 8001336:	6063      	str	r3, [r4, #4]
 8001338:	6014      	str	r4, [r2, #0]
 800133a:	b003      	add	sp, #12
 800133c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001340:	f000 b978 	b.w	8001634 <__malloc_unlock>
 8001344:	42a3      	cmp	r3, r4
 8001346:	d908      	bls.n	800135a <_free_r+0x46>
 8001348:	6825      	ldr	r5, [r4, #0]
 800134a:	1961      	adds	r1, r4, r5
 800134c:	428b      	cmp	r3, r1
 800134e:	bf01      	itttt	eq
 8001350:	6819      	ldreq	r1, [r3, #0]
 8001352:	685b      	ldreq	r3, [r3, #4]
 8001354:	1949      	addeq	r1, r1, r5
 8001356:	6021      	streq	r1, [r4, #0]
 8001358:	e7ed      	b.n	8001336 <_free_r+0x22>
 800135a:	461a      	mov	r2, r3
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	b10b      	cbz	r3, 8001364 <_free_r+0x50>
 8001360:	42a3      	cmp	r3, r4
 8001362:	d9fa      	bls.n	800135a <_free_r+0x46>
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	1855      	adds	r5, r2, r1
 8001368:	42a5      	cmp	r5, r4
 800136a:	d10b      	bne.n	8001384 <_free_r+0x70>
 800136c:	6824      	ldr	r4, [r4, #0]
 800136e:	4421      	add	r1, r4
 8001370:	1854      	adds	r4, r2, r1
 8001372:	42a3      	cmp	r3, r4
 8001374:	6011      	str	r1, [r2, #0]
 8001376:	d1e0      	bne.n	800133a <_free_r+0x26>
 8001378:	681c      	ldr	r4, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	6053      	str	r3, [r2, #4]
 800137e:	4421      	add	r1, r4
 8001380:	6011      	str	r1, [r2, #0]
 8001382:	e7da      	b.n	800133a <_free_r+0x26>
 8001384:	d902      	bls.n	800138c <_free_r+0x78>
 8001386:	230c      	movs	r3, #12
 8001388:	6003      	str	r3, [r0, #0]
 800138a:	e7d6      	b.n	800133a <_free_r+0x26>
 800138c:	6825      	ldr	r5, [r4, #0]
 800138e:	1961      	adds	r1, r4, r5
 8001390:	428b      	cmp	r3, r1
 8001392:	bf04      	itt	eq
 8001394:	6819      	ldreq	r1, [r3, #0]
 8001396:	685b      	ldreq	r3, [r3, #4]
 8001398:	6063      	str	r3, [r4, #4]
 800139a:	bf04      	itt	eq
 800139c:	1949      	addeq	r1, r1, r5
 800139e:	6021      	streq	r1, [r4, #0]
 80013a0:	6054      	str	r4, [r2, #4]
 80013a2:	e7ca      	b.n	800133a <_free_r+0x26>
 80013a4:	b003      	add	sp, #12
 80013a6:	bd30      	pop	{r4, r5, pc}
 80013a8:	20000098 	.word	0x20000098

080013ac <sbrk_aligned>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4e0e      	ldr	r6, [pc, #56]	; (80013e8 <sbrk_aligned+0x3c>)
 80013b0:	460c      	mov	r4, r1
 80013b2:	6831      	ldr	r1, [r6, #0]
 80013b4:	4605      	mov	r5, r0
 80013b6:	b911      	cbnz	r1, 80013be <sbrk_aligned+0x12>
 80013b8:	f000 f88c 	bl	80014d4 <_sbrk_r>
 80013bc:	6030      	str	r0, [r6, #0]
 80013be:	4621      	mov	r1, r4
 80013c0:	4628      	mov	r0, r5
 80013c2:	f000 f887 	bl	80014d4 <_sbrk_r>
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	d00a      	beq.n	80013e0 <sbrk_aligned+0x34>
 80013ca:	1cc4      	adds	r4, r0, #3
 80013cc:	f024 0403 	bic.w	r4, r4, #3
 80013d0:	42a0      	cmp	r0, r4
 80013d2:	d007      	beq.n	80013e4 <sbrk_aligned+0x38>
 80013d4:	1a21      	subs	r1, r4, r0
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f87c 	bl	80014d4 <_sbrk_r>
 80013dc:	3001      	adds	r0, #1
 80013de:	d101      	bne.n	80013e4 <sbrk_aligned+0x38>
 80013e0:	f04f 34ff 	mov.w	r4, #4294967295
 80013e4:	4620      	mov	r0, r4
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	2000009c 	.word	0x2000009c

080013ec <_malloc_r>:
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f0:	1ccd      	adds	r5, r1, #3
 80013f2:	f025 0503 	bic.w	r5, r5, #3
 80013f6:	3508      	adds	r5, #8
 80013f8:	2d0c      	cmp	r5, #12
 80013fa:	bf38      	it	cc
 80013fc:	250c      	movcc	r5, #12
 80013fe:	2d00      	cmp	r5, #0
 8001400:	4607      	mov	r7, r0
 8001402:	db01      	blt.n	8001408 <_malloc_r+0x1c>
 8001404:	42a9      	cmp	r1, r5
 8001406:	d905      	bls.n	8001414 <_malloc_r+0x28>
 8001408:	230c      	movs	r3, #12
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	2600      	movs	r6, #0
 800140e:	4630      	mov	r0, r6
 8001410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001414:	4e2e      	ldr	r6, [pc, #184]	; (80014d0 <_malloc_r+0xe4>)
 8001416:	f000 f907 	bl	8001628 <__malloc_lock>
 800141a:	6833      	ldr	r3, [r6, #0]
 800141c:	461c      	mov	r4, r3
 800141e:	bb34      	cbnz	r4, 800146e <_malloc_r+0x82>
 8001420:	4629      	mov	r1, r5
 8001422:	4638      	mov	r0, r7
 8001424:	f7ff ffc2 	bl	80013ac <sbrk_aligned>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	4604      	mov	r4, r0
 800142c:	d14d      	bne.n	80014ca <_malloc_r+0xde>
 800142e:	6834      	ldr	r4, [r6, #0]
 8001430:	4626      	mov	r6, r4
 8001432:	2e00      	cmp	r6, #0
 8001434:	d140      	bne.n	80014b8 <_malloc_r+0xcc>
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	4631      	mov	r1, r6
 800143a:	4638      	mov	r0, r7
 800143c:	eb04 0803 	add.w	r8, r4, r3
 8001440:	f000 f848 	bl	80014d4 <_sbrk_r>
 8001444:	4580      	cmp	r8, r0
 8001446:	d13a      	bne.n	80014be <_malloc_r+0xd2>
 8001448:	6821      	ldr	r1, [r4, #0]
 800144a:	3503      	adds	r5, #3
 800144c:	1a6d      	subs	r5, r5, r1
 800144e:	f025 0503 	bic.w	r5, r5, #3
 8001452:	3508      	adds	r5, #8
 8001454:	2d0c      	cmp	r5, #12
 8001456:	bf38      	it	cc
 8001458:	250c      	movcc	r5, #12
 800145a:	4629      	mov	r1, r5
 800145c:	4638      	mov	r0, r7
 800145e:	f7ff ffa5 	bl	80013ac <sbrk_aligned>
 8001462:	3001      	adds	r0, #1
 8001464:	d02b      	beq.n	80014be <_malloc_r+0xd2>
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	442b      	add	r3, r5
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	e00e      	b.n	800148c <_malloc_r+0xa0>
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	1b52      	subs	r2, r2, r5
 8001472:	d41e      	bmi.n	80014b2 <_malloc_r+0xc6>
 8001474:	2a0b      	cmp	r2, #11
 8001476:	d916      	bls.n	80014a6 <_malloc_r+0xba>
 8001478:	1961      	adds	r1, r4, r5
 800147a:	42a3      	cmp	r3, r4
 800147c:	6025      	str	r5, [r4, #0]
 800147e:	bf18      	it	ne
 8001480:	6059      	strne	r1, [r3, #4]
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	bf08      	it	eq
 8001486:	6031      	streq	r1, [r6, #0]
 8001488:	5162      	str	r2, [r4, r5]
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	4638      	mov	r0, r7
 800148e:	f104 060b 	add.w	r6, r4, #11
 8001492:	f000 f8cf 	bl	8001634 <__malloc_unlock>
 8001496:	f026 0607 	bic.w	r6, r6, #7
 800149a:	1d23      	adds	r3, r4, #4
 800149c:	1af2      	subs	r2, r6, r3
 800149e:	d0b6      	beq.n	800140e <_malloc_r+0x22>
 80014a0:	1b9b      	subs	r3, r3, r6
 80014a2:	50a3      	str	r3, [r4, r2]
 80014a4:	e7b3      	b.n	800140e <_malloc_r+0x22>
 80014a6:	6862      	ldr	r2, [r4, #4]
 80014a8:	42a3      	cmp	r3, r4
 80014aa:	bf0c      	ite	eq
 80014ac:	6032      	streq	r2, [r6, #0]
 80014ae:	605a      	strne	r2, [r3, #4]
 80014b0:	e7ec      	b.n	800148c <_malloc_r+0xa0>
 80014b2:	4623      	mov	r3, r4
 80014b4:	6864      	ldr	r4, [r4, #4]
 80014b6:	e7b2      	b.n	800141e <_malloc_r+0x32>
 80014b8:	4634      	mov	r4, r6
 80014ba:	6876      	ldr	r6, [r6, #4]
 80014bc:	e7b9      	b.n	8001432 <_malloc_r+0x46>
 80014be:	230c      	movs	r3, #12
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4638      	mov	r0, r7
 80014c4:	f000 f8b6 	bl	8001634 <__malloc_unlock>
 80014c8:	e7a1      	b.n	800140e <_malloc_r+0x22>
 80014ca:	6025      	str	r5, [r4, #0]
 80014cc:	e7de      	b.n	800148c <_malloc_r+0xa0>
 80014ce:	bf00      	nop
 80014d0:	20000098 	.word	0x20000098

080014d4 <_sbrk_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	; (80014f0 <_sbrk_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff fa5c 	bl	800099c <_sbrk>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_sbrk_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_sbrk_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200000a0 	.word	0x200000a0

080014f4 <__sread>:
 80014f4:	b510      	push	{r4, lr}
 80014f6:	460c      	mov	r4, r1
 80014f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014fc:	f000 f8a0 	bl	8001640 <_read_r>
 8001500:	2800      	cmp	r0, #0
 8001502:	bfab      	itete	ge
 8001504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001506:	89a3      	ldrhlt	r3, [r4, #12]
 8001508:	181b      	addge	r3, r3, r0
 800150a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800150e:	bfac      	ite	ge
 8001510:	6563      	strge	r3, [r4, #84]	; 0x54
 8001512:	81a3      	strhlt	r3, [r4, #12]
 8001514:	bd10      	pop	{r4, pc}

08001516 <__swrite>:
 8001516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151a:	461f      	mov	r7, r3
 800151c:	898b      	ldrh	r3, [r1, #12]
 800151e:	05db      	lsls	r3, r3, #23
 8001520:	4605      	mov	r5, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4616      	mov	r6, r2
 8001526:	d505      	bpl.n	8001534 <__swrite+0x1e>
 8001528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800152c:	2302      	movs	r3, #2
 800152e:	2200      	movs	r2, #0
 8001530:	f000 f868 	bl	8001604 <_lseek_r>
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800153a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800153e:	81a3      	strh	r3, [r4, #12]
 8001540:	4632      	mov	r2, r6
 8001542:	463b      	mov	r3, r7
 8001544:	4628      	mov	r0, r5
 8001546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800154a:	f000 b817 	b.w	800157c <_write_r>

0800154e <__sseek>:
 800154e:	b510      	push	{r4, lr}
 8001550:	460c      	mov	r4, r1
 8001552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001556:	f000 f855 	bl	8001604 <_lseek_r>
 800155a:	1c43      	adds	r3, r0, #1
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	bf15      	itete	ne
 8001560:	6560      	strne	r0, [r4, #84]	; 0x54
 8001562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800156a:	81a3      	strheq	r3, [r4, #12]
 800156c:	bf18      	it	ne
 800156e:	81a3      	strhne	r3, [r4, #12]
 8001570:	bd10      	pop	{r4, pc}

08001572 <__sclose>:
 8001572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001576:	f000 b813 	b.w	80015a0 <_close_r>
	...

0800157c <_write_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d07      	ldr	r5, [pc, #28]	; (800159c <_write_r+0x20>)
 8001580:	4604      	mov	r4, r0
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	2200      	movs	r2, #0
 8001588:	602a      	str	r2, [r5, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff f96a 	bl	8000864 <_write>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	d102      	bne.n	800159a <_write_r+0x1e>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	b103      	cbz	r3, 800159a <_write_r+0x1e>
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	bd38      	pop	{r3, r4, r5, pc}
 800159c:	200000a0 	.word	0x200000a0

080015a0 <_close_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d06      	ldr	r5, [pc, #24]	; (80015bc <_close_r+0x1c>)
 80015a4:	2300      	movs	r3, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	f7ff f9c1 	bl	8000932 <_close>
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	d102      	bne.n	80015ba <_close_r+0x1a>
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	b103      	cbz	r3, 80015ba <_close_r+0x1a>
 80015b8:	6023      	str	r3, [r4, #0]
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	200000a0 	.word	0x200000a0

080015c0 <_fstat_r>:
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4d07      	ldr	r5, [pc, #28]	; (80015e0 <_fstat_r+0x20>)
 80015c4:	2300      	movs	r3, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	f7ff f9bc 	bl	800094a <_fstat>
 80015d2:	1c43      	adds	r3, r0, #1
 80015d4:	d102      	bne.n	80015dc <_fstat_r+0x1c>
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	b103      	cbz	r3, 80015dc <_fstat_r+0x1c>
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	200000a0 	.word	0x200000a0

080015e4 <_isatty_r>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	4d06      	ldr	r5, [pc, #24]	; (8001600 <_isatty_r+0x1c>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	602b      	str	r3, [r5, #0]
 80015f0:	f7ff f9bb 	bl	800096a <_isatty>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_isatty_r+0x1a>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_isatty_r+0x1a>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	200000a0 	.word	0x200000a0

08001604 <_lseek_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4d07      	ldr	r5, [pc, #28]	; (8001624 <_lseek_r+0x20>)
 8001608:	4604      	mov	r4, r0
 800160a:	4608      	mov	r0, r1
 800160c:	4611      	mov	r1, r2
 800160e:	2200      	movs	r2, #0
 8001610:	602a      	str	r2, [r5, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	f7ff f9b4 	bl	8000980 <_lseek>
 8001618:	1c43      	adds	r3, r0, #1
 800161a:	d102      	bne.n	8001622 <_lseek_r+0x1e>
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	b103      	cbz	r3, 8001622 <_lseek_r+0x1e>
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	200000a0 	.word	0x200000a0

08001628 <__malloc_lock>:
 8001628:	4801      	ldr	r0, [pc, #4]	; (8001630 <__malloc_lock+0x8>)
 800162a:	f7ff be0b 	b.w	8001244 <__retarget_lock_acquire_recursive>
 800162e:	bf00      	nop
 8001630:	20000094 	.word	0x20000094

08001634 <__malloc_unlock>:
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <__malloc_unlock+0x8>)
 8001636:	f7ff be06 	b.w	8001246 <__retarget_lock_release_recursive>
 800163a:	bf00      	nop
 800163c:	20000094 	.word	0x20000094

08001640 <_read_r>:
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4d07      	ldr	r5, [pc, #28]	; (8001660 <_read_r+0x20>)
 8001644:	4604      	mov	r4, r0
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	2200      	movs	r2, #0
 800164c:	602a      	str	r2, [r5, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	f7ff f952 	bl	80008f8 <_read>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d102      	bne.n	800165e <_read_r+0x1e>
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	b103      	cbz	r3, 800165e <_read_r+0x1e>
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	200000a0 	.word	0x200000a0

08001664 <_init>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr

08001670 <_fini>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr
