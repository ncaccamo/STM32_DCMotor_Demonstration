
STM32_DCMotor_Encoder_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08001c04  08001c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000040  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029aa  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ac9  00000000  00000000  00022a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00023508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  00023738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015058  00000000  00000000  000238d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000037fc  00000000  00000000  00038928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000760a6  00000000  00000000  0003c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b21ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e3c  00000000  00000000  000b221c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08001bec 	.word	0x08001bec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08001bec 	.word	0x08001bec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <sysClockConfig>:
 */

#include <clockconfig.h>
#include <stm32g431xx.h>

void sysClockConfig(){
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//set flash latency to 4
	FLASH->ACR |= (FLASH_ACR_LATENCY_4WS << FLASH_ACR_LATENCY_Pos);
 80002c4:	4b4f      	ldr	r3, [pc, #316]	; (8000404 <sysClockConfig+0x144>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a4e      	ldr	r2, [pc, #312]	; (8000404 <sysClockConfig+0x144>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6013      	str	r3, [r2, #0]


	//enable HSI oscillator and then wait for clock ready flag
	RCC->CR |= (0x01 << RCC_CR_HSION_Pos);
 80002d0:	4b4d      	ldr	r3, [pc, #308]	; (8000408 <sysClockConfig+0x148>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a4c      	ldr	r2, [pc, #304]	; (8000408 <sysClockConfig+0x148>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (0x01 << RCC_CR_HSIRDY_Pos)));
 80002dc:	bf00      	nop
 80002de:	4b4a      	ldr	r3, [pc, #296]	; (8000408 <sysClockConfig+0x148>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <sysClockConfig+0x1e>

	//set AHB, APB2, APB1 prescalar
	RCC->CFGR |= (0x00 << RCC_CFGR_HPRE_Pos);   //AHB prescalar no division
 80002ea:	4b47      	ldr	r3, [pc, #284]	; (8000408 <sysClockConfig+0x148>)
 80002ec:	4a46      	ldr	r2, [pc, #280]	; (8000408 <sysClockConfig+0x148>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE2_Pos);  //APB2 prescalar no division
 80002f2:	4b45      	ldr	r3, [pc, #276]	; (8000408 <sysClockConfig+0x148>)
 80002f4:	4a44      	ldr	r2, [pc, #272]	; (8000408 <sysClockConfig+0x148>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x00 << RCC_CFGR_PPRE1_Pos);  //APB1 prescalar no division      //TODO: TIM4 prescalar
 80002fa:	4b43      	ldr	r3, [pc, #268]	; (8000408 <sysClockConfig+0x148>)
 80002fc:	4a42      	ldr	r2, [pc, #264]	; (8000408 <sysClockConfig+0x148>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	6093      	str	r3, [r2, #8]

	//set PLL configuration register
	RCC->PLLCFGR |= (0x2 << RCC_PLLCFGR_PLLSRC_Pos);   //HSI16 as PLL clock entry
 8000302:	4b41      	ldr	r3, [pc, #260]	; (8000408 <sysClockConfig+0x148>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a40      	ldr	r2, [pc, #256]	; (8000408 <sysClockConfig+0x148>)
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x3 << RCC_PLLCFGR_PLLM_Pos);     //PLLM division /4
 800030e:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <sysClockConfig+0x148>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a3d      	ldr	r2, [pc, #244]	; (8000408 <sysClockConfig+0x148>)
 8000314:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000318:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x55 << RCC_PLLCFGR_PLLN_Pos);    //PLLN multiplication *85
 800031a:	4b3b      	ldr	r3, [pc, #236]	; (8000408 <sysClockConfig+0x148>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a3a      	ldr	r2, [pc, #232]	; (8000408 <sysClockConfig+0x148>)
 8000320:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000324:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLPEN_Pos);  //PLLP disabled
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <sysClockConfig+0x148>)
 8000328:	4a37      	ldr	r2, [pc, #220]	; (8000408 <sysClockConfig+0x148>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLP_Pos);    //PLLP division factor not used
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <sysClockConfig+0x148>)
 8000330:	4a35      	ldr	r2, [pc, #212]	; (8000408 <sysClockConfig+0x148>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQEN_Pos);  //PLLQ disabled
 8000336:	4b34      	ldr	r3, [pc, #208]	; (8000408 <sysClockConfig+0x148>)
 8000338:	4a33      	ldr	r2, [pc, #204]	; (8000408 <sysClockConfig+0x148>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLQ_Pos);    //PLLQ division /2
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <sysClockConfig+0x148>)
 8000340:	4a31      	ldr	r2, [pc, #196]	; (8000408 <sysClockConfig+0x148>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLREN_Pos);  //PLLR enabled (output of PLL)
 8000346:	4b30      	ldr	r3, [pc, #192]	; (8000408 <sysClockConfig+0x148>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a2f      	ldr	r2, [pc, #188]	; (8000408 <sysClockConfig+0x148>)
 800034c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000350:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x00 << RCC_PLLCFGR_PLLR_Pos);    //PLLR division /2
 8000352:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <sysClockConfig+0x148>)
 8000354:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <sysClockConfig+0x148>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLPDIV_Pos); //PLLP division /2
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <sysClockConfig+0x148>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <sysClockConfig+0x148>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	60d3      	str	r3, [r2, #12]

	//enable PLL and wait for ready
	RCC->CR |= (0x01 << RCC_CR_PLLON_Pos);
 8000366:	4b28      	ldr	r3, [pc, #160]	; (8000408 <sysClockConfig+0x148>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a27      	ldr	r2, [pc, #156]	; (8000408 <sysClockConfig+0x148>)
 800036c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000370:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (0x01 << RCC_CR_PLLRDY_Pos)));
 8000372:	bf00      	nop
 8000374:	4b24      	ldr	r3, [pc, #144]	; (8000408 <sysClockConfig+0x148>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <sysClockConfig+0xb4>

	//set PLL as system clock and wait for ready
	RCC->CFGR |= (0x03 << RCC_CFGR_SW_Pos);
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <sysClockConfig+0x148>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a20      	ldr	r2, [pc, #128]	; (8000408 <sysClockConfig+0x148>)
 8000386:	f043 0303 	orr.w	r3, r3, #3
 800038a:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & (0x03 << RCC_CFGR_SWS_Pos)));
 800038c:	bf00      	nop
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <sysClockConfig+0x148>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f003 030c 	and.w	r3, r3, #12
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <sysClockConfig+0xce>

	//enable clock for System Configuration controller
	RCC->APB2ENR |= (0x01 << RCC_APB2SMENR_SYSCFGSMEN_Pos);
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <sysClockConfig+0x148>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039e:	4a1a      	ldr	r2, [pc, #104]	; (8000408 <sysClockConfig+0x148>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for GPIO ports A, B, C
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOAEN_Pos);
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <sysClockConfig+0x148>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	4a17      	ldr	r2, [pc, #92]	; (8000408 <sysClockConfig+0x148>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOBEN_Pos);
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <sysClockConfig+0x148>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <sysClockConfig+0x148>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (0x01 << RCC_AHB2ENR_GPIOCEN_Pos);
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <sysClockConfig+0x148>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a11      	ldr	r2, [pc, #68]	; (8000408 <sysClockConfig+0x148>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c

	//enable clock for TIM3, TIM4, TIM8
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM3EN_Pos);
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <sysClockConfig+0x148>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <sysClockConfig+0x148>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= (0x01 << RCC_APB1ENR1_TIM4EN_Pos);
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <sysClockConfig+0x148>)
 80003d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <sysClockConfig+0x148>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_TIM8EN_Pos);
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <sysClockConfig+0x148>)
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	4a08      	ldr	r2, [pc, #32]	; (8000408 <sysClockConfig+0x148>)
 80003e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ec:	6613      	str	r3, [r2, #96]	; 0x60

	//enable clock for SPI1
	RCC->APB2ENR |= (0x01 << RCC_APB2ENR_SPI1EN_Pos);
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <sysClockConfig+0x148>)
 80003f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <sysClockConfig+0x148>)
 80003f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f8:	6613      	str	r3, [r2, #96]	; 0x60


}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40022000 	.word	0x40022000
 8000408:	40021000 	.word	0x40021000

0800040c <encoderRotation>:
 * State machine for detecting encoder rotation.
 * Noisy encoder requires handling the states while the knob is moving and also when it stops.
 *
 */
int32_t encoderRotation()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

currentStateCLK = readPin(ENC_CLK_PORT, ENC_CLK_PIN);
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	482d      	ldr	r0, [pc, #180]	; (80004cc <encoderRotation+0xc0>)
 8000416:	f000 f93d 	bl	8000694 <readPin>
 800041a:	4603      	mov	r3, r0
 800041c:	b25a      	sxtb	r2, r3
 800041e:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <encoderRotation+0xc4>)
 8000420:	701a      	strb	r2, [r3, #0]
currentStateDT = readPin(ENC_DT_PORT, ENC_DT_PIN);
 8000422:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000426:	4829      	ldr	r0, [pc, #164]	; (80004cc <encoderRotation+0xc0>)
 8000428:	f000 f934 	bl	8000694 <readPin>
 800042c:	4603      	mov	r3, r0
 800042e:	b25a      	sxtb	r2, r3
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <encoderRotation+0xc8>)
 8000432:	701a      	strb	r2, [r3, #0]

  if (currentStateCLK != currentStateDT) { 			//encoder is moving
 8000434:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <encoderRotation+0xc4>)
 8000436:	f993 2000 	ldrsb.w	r2, [r3]
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <encoderRotation+0xc8>)
 800043c:	f993 3000 	ldrsb.w	r3, [r3]
 8000440:	429a      	cmp	r2, r3
 8000442:	d00f      	beq.n	8000464 <encoderRotation+0x58>
    if (currentStateCLK != lastStateCLK) { 			//CLK changed first; CW
 8000444:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <encoderRotation+0xc4>)
 8000446:	f993 2000 	ldrsb.w	r2, [r3]
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <encoderRotation+0xcc>)
 800044c:	f993 3000 	ldrsb.w	r3, [r3]
 8000450:	429a      	cmp	r2, r3
 8000452:	d003      	beq.n	800045c <encoderRotation+0x50>
    	rotationDirection = 1;
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <encoderRotation+0xd0>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e019      	b.n	8000490 <encoderRotation+0x84>
    }
     else {											//else DT changed first; CCW
    	rotationDirection = -1;
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <encoderRotation+0xd0>)
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	701a      	strb	r2, [r3, #0]
 8000462:	e015      	b.n	8000490 <encoderRotation+0x84>
    }
  }
    else { 							    		    //both pins are at same state, so encoder has stopped moving
    if (currentStateCLK != lastStateCLK) {
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <encoderRotation+0xc4>)
 8000466:	f993 2000 	ldrsb.w	r2, [r3]
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <encoderRotation+0xcc>)
 800046c:	f993 3000 	ldrsb.w	r3, [r3]
 8000470:	429a      	cmp	r2, r3
 8000472:	d008      	beq.n	8000486 <encoderRotation+0x7a>
      counter += rotationDirection;
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <encoderRotation+0xd0>)
 8000476:	f993 3000 	ldrsb.w	r3, [r3]
 800047a:	461a      	mov	r2, r3
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <encoderRotation+0xd4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4413      	add	r3, r2
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <encoderRotation+0xd4>)
 8000484:	6013      	str	r3, [r2, #0]
     }
    lastStateCLK = currentStateCLK;  				//update last CLK state to be ready to detect next movement
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <encoderRotation+0xc4>)
 8000488:	f993 2000 	ldrsb.w	r2, [r3]
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <encoderRotation+0xcc>)
 800048e:	701a      	strb	r2, [r3, #0]
  }
  if (counter < 0)
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <encoderRotation+0xd4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <encoderRotation+0x98>
    counter = counter + 30;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <encoderRotation+0xd4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	331e      	adds	r3, #30
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <encoderRotation+0xd4>)
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e00f      	b.n	80004c4 <encoderRotation+0xb8>
  else
   counter = counter % 30;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <encoderRotation+0xd4>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <encoderRotation+0xd8>)
 80004aa:	fb83 1302 	smull	r1, r3, r3, r2
 80004ae:	4413      	add	r3, r2
 80004b0:	1119      	asrs	r1, r3, #4
 80004b2:	17d3      	asrs	r3, r2, #31
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	460b      	mov	r3, r1
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	1a5b      	subs	r3, r3, r1
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	1ad1      	subs	r1, r2, r3
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <encoderRotation+0xd4>)
 80004c2:	6019      	str	r1, [r3, #0]

 return counter;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <encoderRotation+0xd4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	48000400 	.word	0x48000400
 80004d0:	20000081 	.word	0x20000081
 80004d4:	20000082 	.word	0x20000082
 80004d8:	20000080 	.word	0x20000080
 80004dc:	20000088 	.word	0x20000088
 80004e0:	20000084 	.word	0x20000084
 80004e4:	88888889 	.word	0x88888889

080004e8 <gpioInit>:
 * Function to set the GPIO registers.
 * Parameters: none
 * Returns: none
 */

void gpioInit(){
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	//clock for GPIO enabled in clockconfig.c

	//clear MODER registers, but leave JTAG pins in reset state
	GPIOA->MODER &= ~(0x00FFFFFF);
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFFFFF00F);
 80004fc:	4b63      	ldr	r3, [pc, #396]	; (800068c <gpioInit+0x1a4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a62      	ldr	r2, [pc, #392]	; (800068c <gpioInit+0x1a4>)
 8000502:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000506:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0xFFFFFFFF);
 8000508:	4b61      	ldr	r3, [pc, #388]	; (8000690 <gpioInit+0x1a8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4b60      	ldr	r3, [pc, #384]	; (8000690 <gpioInit+0x1a8>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]



	//set PB13, PB14, PB15 set as inputs (rotary encoder)
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE13_Pos);
 8000512:	4b5e      	ldr	r3, [pc, #376]	; (800068c <gpioInit+0x1a4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a5d      	ldr	r2, [pc, #372]	; (800068c <gpioInit+0x1a4>)
 8000518:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800051c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE14_Pos);
 800051e:	4b5b      	ldr	r3, [pc, #364]	; (800068c <gpioInit+0x1a4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a5a      	ldr	r2, [pc, #360]	; (800068c <gpioInit+0x1a4>)
 8000524:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000528:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0x03 << GPIO_MODER_MODE15_Pos);
 800052a:	4b58      	ldr	r3, [pc, #352]	; (800068c <gpioInit+0x1a4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a57      	ldr	r2, [pc, #348]	; (800068c <gpioInit+0x1a4>)
 8000530:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000534:	6013      	str	r3, [r2, #0]

	//set pull-up pull-down register for inputs
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD13_Pos);  //PU
 8000536:	4b55      	ldr	r3, [pc, #340]	; (800068c <gpioInit+0x1a4>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a54      	ldr	r2, [pc, #336]	; (800068c <gpioInit+0x1a4>)
 800053c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000540:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD14_Pos);  //PU
 8000542:	4b52      	ldr	r3, [pc, #328]	; (800068c <gpioInit+0x1a4>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a51      	ldr	r2, [pc, #324]	; (800068c <gpioInit+0x1a4>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x01 << GPIO_PUPDR_PUPD15_Pos);  //PU
 800054e:	4b4f      	ldr	r3, [pc, #316]	; (800068c <gpioInit+0x1a4>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	4a4e      	ldr	r2, [pc, #312]	; (800068c <gpioInit+0x1a4>)
 8000554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000558:	60d3      	str	r3, [r2, #12]



	//set PA6, PA9, PC7 as output
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE6_Pos);  //Display_DC
 800055a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000568:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << GPIO_MODER_MODE9_Pos);  //Motor Driver In2
 800056a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000578:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x01 << GPIO_MODER_MODE7_Pos);  //Motor Driver In1
 800057a:	4b45      	ldr	r3, [pc, #276]	; (8000690 <gpioInit+0x1a8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a44      	ldr	r2, [pc, #272]	; (8000690 <gpioInit+0x1a8>)
 8000580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000584:	6013      	str	r3, [r2, #0]

	//set PA6, PA9, PC7 as push-pull output
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE6_Pos);
 8000586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000594:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~(0x01 << GPIO_MODER_MODE9_Pos);
 8000596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a4:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0x01 << GPIO_MODER_MODE7_Pos);
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <gpioInit+0x1a8>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	4a39      	ldr	r2, [pc, #228]	; (8000690 <gpioInit+0x1a8>)
 80005ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005b0:	6053      	str	r3, [r2, #4]



	//set PA11, PA12 to alternate function mode (TIM4)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE11_Pos);
 80005b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005c0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE12_Pos);
 80005c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6013      	str	r3, [r2, #0]

	//set PA11, P12 alternate function to AF10 (TIM4)
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL11_Pos);		//TIM4_CH1
 80005d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005dc:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80005e0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x0A << GPIO_AFRH_AFSEL12_Pos);		//TIM4_CH2
 80005e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ec:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80005f0:	6253      	str	r3, [r2, #36]	; 0x24

	//set PB6 to alternate function mode AF5 (TIM8)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODE6_Pos);
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <gpioInit+0x1a4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a25      	ldr	r2, [pc, #148]	; (800068c <gpioInit+0x1a4>)
 80005f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005fc:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);		//TIM8_CH1
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <gpioInit+0x1a4>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <gpioInit+0x1a4>)
 8000604:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000608:	6213      	str	r3, [r2, #32]

	//set PA4, PA5, PA7 to alternate function mode (SPI1)
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE4_Pos);
 800060a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000618:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE5_Pos);
 800061a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000628:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 << GPIO_MODER_MODE7_Pos);
 800062a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000638:	6013      	str	r3, [r2, #0]

	//set PA4, PA5, PA7 alternate function to AF5 (SPI1)
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL4_Pos);		//SPI1_NSS
 800063a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000644:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000648:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);		//SPI1_SCK
 800064a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000654:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000658:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);		//SPI1_MOSI
 800065a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000664:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000668:	6213      	str	r3, [r2, #32]
	//set PA0? to ADC input



	//set PB1 as output for LED debugging
	GPIOB->MODER |= (0x01 << GPIO_MODER_MODE1_Pos);
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <gpioInit+0x1a4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <gpioInit+0x1a4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(0x01 << GPIO_MODER_MODE1_Pos);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <gpioInit+0x1a4>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <gpioInit+0x1a4>)
 800067c:	f023 0304 	bic.w	r3, r3, #4
 8000680:	6053      	str	r3, [r2, #4]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	48000400 	.word	0x48000400
 8000690:	48000800 	.word	0x48000800

08000694 <readPin>:
 * Parameters: GPIOx is the GPIO port, where x can be A..E.
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 * Returns: PIN_LOW or PIN_HIGH for state of pin.
 */

int32_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	if ((GPIOx->IDR & GPIO_PIN_x) != PIN_LOW) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	691a      	ldr	r2, [r3, #16]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <readPin+0x1c>
		return PIN_HIGH;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <readPin+0x1e>
	}
	else {
		return PIN_LOW;
 80006b0:	2300      	movs	r3, #0
	}
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <togglePin>:
 * 			   GPIO_PIN_x is the GPIO pin number, where x can be 0...15. This is the pin's position in the register.
 *             pinState is the desired pin setting and can be PIN_HIGH or PIN_LOW.
 * Returns: none
 */

void togglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_x){
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]

	if ((GPIOx->ODR & GPIO_PIN_x) != PIN_LOW) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695a      	ldr	r2, [r3, #20]
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d005      	beq.n	80006e2 <togglePin+0x24>
		GPIOx->BSRR = (GPIO_PIN_x << 16U);    //set pin LOW
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	041b      	lsls	r3, r3, #16
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	619a      	str	r2, [r3, #24]
	}
	else {
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
	}
}
 80006e0:	e002      	b.n	80006e8 <togglePin+0x2a>
		GPIOx->BSRR = GPIO_PIN_x;            //set pin HIGH
 80006e2:	887a      	ldrh	r2, [r7, #2]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	619a      	str	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db0b      	blt.n	800071e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <__NVIC_EnableIRQ+0x38>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <interruptInit>:
/**
 * Function to initialize interrupts.
 * Parameters: none
 * Returns: none
 */
void interruptInit(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
//System Configuration clock enabled in clockconfig.c

//GPIO interrupt for encoder switch
SYSCFG->EXTICR[3] |= (0x01 << SYSCFG_EXTICR4_EXTI15_Pos);		//EXTI Line15 Interrupt, PB15 (Rotary Encoder SW)
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <interruptInit+0x48>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <interruptInit+0x48>)
 800078e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000792:	6153      	str	r3, [r2, #20]
EXTI->IMR1 |= (0x01 << EXTI_IMR1_IM15_Pos);     				//set interrupt mask register
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <interruptInit+0x4c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <interruptInit+0x4c>)
 800079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079e:	6013      	str	r3, [r2, #0]
EXTI->FTSR1 |= (0x01 << EXTI_FTSR1_FT15_Pos);					//trigger on falling edge
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <interruptInit+0x4c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <interruptInit+0x4c>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	60d3      	str	r3, [r2, #12]
NVIC_SetPriority(EXTI15_10_IRQn, 0);							//set priority and enable EXTI15_10_IRQHandler
 80007ac:	2100      	movs	r1, #0
 80007ae:	2028      	movs	r0, #40	; 0x28
 80007b0:	f7ff ffbe 	bl	8000730 <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f7ff ff9d 	bl	80006f4 <__NVIC_EnableIRQ>

//enable timer interrupt for TIM3
NVIC_SetPriority(TIM3_IRQn, 0);
 80007ba:	2100      	movs	r1, #0
 80007bc:	201d      	movs	r0, #29
 80007be:	f7ff ffb7 	bl	8000730 <__NVIC_SetPriority>
NVIC_EnableIRQ(TIM3_IRQn);
 80007c2:	201d      	movs	r0, #29
 80007c4:	f7ff ff96 	bl	80006f4 <__NVIC_EnableIRQ>
//systick interrupt




}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40010000 	.word	0x40010000
 80007d0:	40010400 	.word	0x40010400

080007d4 <EXTI15_10_IRQHandler>:
/************************************************************************************************/




void EXTI15_10_IRQHandler(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

	if ((EXTI->PR1 & (ENC_SW_PIN)) != 0) {				//check if the encoder switch pin is the one triggering interrupt
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <EXTI15_10_IRQHandler+0x2c>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00a      	beq.n	80007fa <EXTI15_10_IRQHandler+0x26>
		EXTI->PR1 = (ENC_SW_PIN);						//clear interrupt pending bit
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <EXTI15_10_IRQHandler+0x2c>)
 80007e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ea:	615a      	str	r2, [r3, #20]
		togglePin(DBG_LED_PORT, DBG_LED_PIN);
 80007ec:	2102      	movs	r1, #2
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <EXTI15_10_IRQHandler+0x30>)
 80007f0:	f7ff ff65 	bl	80006be <togglePin>
		printf("switch interrupt\n");
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <EXTI15_10_IRQHandler+0x34>)
 80007f6:	f000 fa7b 	bl	8000cf0 <puts>
		//NVIC_EnableIRQ(EXTI15_10_IRQn);
	}



}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010400 	.word	0x40010400
 8000804:	48000400 	.word	0x48000400
 8000808:	08001c04 	.word	0x08001c04

0800080c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	TIM3->SR = ~(TIM_SR_UIF);					//clear interrupt pending bit
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <TIM3_IRQHandler+0x28>)
 8000812:	f06f 0201 	mvn.w	r2, #1
 8000816:	611a      	str	r2, [r3, #16]
	togglePin(DBG_LED_PORT, DBG_LED_PIN);
 8000818:	2102      	movs	r1, #2
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <TIM3_IRQHandler+0x2c>)
 800081c:	f7ff ff4f 	bl	80006be <togglePin>
	encoderCount = encoderRotation();
 8000820:	f7ff fdf4 	bl	800040c <encoderRotation>
 8000824:	4603      	mov	r3, r0
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <TIM3_IRQHandler+0x30>)
 8000828:	6013      	str	r3, [r2, #0]
	printf("timer interrupt\n");
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <TIM3_IRQHandler+0x34>)
 800082c:	f000 fa60 	bl	8000cf0 <puts>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40000400 	.word	0x40000400
 8000838:	48000400 	.word	0x48000400
 800083c:	2000008c 	.word	0x2000008c
 8000840:	08001c18 	.word	0x08001c18

08000844 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800084c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000850:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d013      	beq.n	8000884 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800085c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000860:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000864:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00b      	beq.n	8000884 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800086c:	e000      	b.n	8000870 <ITM_SendChar+0x2c>
    {
      __NOP();
 800086e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000870:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f9      	beq.n	800086e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800087a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <main>:
int32_t encoderButtonState;



int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	sysClockConfig();
 8000898:	f7ff fd12 	bl	80002c0 <sysClockConfig>
	gpioInit();
 800089c:	f7ff fe24 	bl	80004e8 <gpioInit>
	interruptInit();
 80008a0:	f7ff ff70 	bl	8000784 <interruptInit>
	TIM3Init();
 80008a4:	f000 f8ca 	bl	8000a3c <TIM3Init>
	TIM4Init();
 80008a8:	f000 f8e8 	bl	8000a7c <TIM4Init>
	//TIM8Init();
	printf("Initialization done\n");
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <main+0x2c>)
 80008ae:	f000 fa1f 	bl	8000cf0 <puts>


	printf("Timer Count: %d\n", TIM4->CNT);
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <main+0x30>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <main+0x34>)
 80008ba:	f000 f993 	bl	8000be4 <iprintf>

	while(1){
 80008be:	e7fe      	b.n	80008be <main+0x2a>
 80008c0:	08001c28 	.word	0x08001c28
 80008c4:	40000800 	.word	0x40000800
 80008c8:	08001c3c 	.word	0x08001c3c

080008cc <_write>:



//function to allow printing to console
int _write(int file, char *ptr, int len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  int i=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e009      	b.n	80008f6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffaa 	bl	8000844 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbf1      	blt.n	80008e2 <_write+0x16>
  return len;
 80008fe:	687b      	ldr	r3, [r7, #4]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096a:	605a      	str	r2, [r3, #4]
  return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f000 f8d0 	bl	8000b80 <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20008000 	.word	0x20008000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000090 	.word	0x20000090
 8000a14:	200000a8 	.word	0x200000a8

08000a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <TIM3Init>:
/**
 * Function to initialize and start Timer 3. An interrupt will be generated periodically.
 * Parameters: none
 * Returns: none
 */
void TIM3Init(){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM3->CR1 |= (0x01 << TIM_CR1_URS_Pos);		//interrupts only occur on update (overflow/underflow)
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <TIM3Init+0x3c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <TIM3Init+0x3c>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= (0x01 << TIM_DIER_UIE_Pos);	//interrupt is enabled
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <TIM3Init+0x3c>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <TIM3Init+0x3c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	60d3      	str	r3, [r2, #12]
	TIM3->PSC = 518; 							//prescalar value (set to yield interrupt every 200ms)
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <TIM3Init+0x3c>)
 8000a5a:	f240 2206 	movw	r2, #518	; 0x206
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CR1 |= (0x01 << TIM_CR1_CEN_Pos);		//counter is enabled
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <TIM3Init+0x3c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <TIM3Init+0x3c>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]


}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40000400 	.word	0x40000400

08000a7c <TIM4Init>:
/**
 * Function to initialize and start Timer 4.
 * Parameters: none
 * Returns: none
 */
void TIM4Init(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	//clock enabled in clockconfig.c
	TIM4->SMCR |= (0x03 << TIM_SMCR_SMS_Pos);      //both inputs are active on both rising and falling edges
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <TIM4Init+0xac>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <TIM4Init+0xac>)
 8000a86:	f043 0303 	orr.w	r3, r3, #3
 8000a8a:	6093      	str	r3, [r2, #8]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC1S_Pos);   //tim_ti1fp1 mapped on tim_ti1
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <TIM4Init+0xac>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <TIM4Init+0xac>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x01 << TIM_CCMR1_CC2S_Pos);   //tim_ti2fp2 mapped on tim_ti2
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <TIM4Init+0xac>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <TIM4Init+0xac>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC1F_Pos);   //set input filter on capture 1
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <TIM4Init+0xac>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <TIM4Init+0xac>)
 8000aaa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000aae:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0x0A << TIM_CCMR1_IC2F_Pos);   //set input filter on capture 2
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <TIM4Init+0xac>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <TIM4Init+0xac>)
 8000ab6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000aba:	6193      	str	r3, [r2, #24]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1P_Pos);    //tim_ti1fp1 noninverted
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <TIM4Init+0xac>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <TIM4Init+0xac>)
 8000ac2:	f023 0302 	bic.w	r3, r3, #2
 8000ac6:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC1NP_Pos);
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <TIM4Init+0xac>)
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <TIM4Init+0xac>)
 8000ace:	f023 0308 	bic.w	r3, r3, #8
 8000ad2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2P_Pos);    //tim_ti2fp2 noninverted
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <TIM4Init+0xac>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <TIM4Init+0xac>)
 8000ada:	f023 0320 	bic.w	r3, r3, #32
 8000ade:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0x01 << TIM_CCER_CC2NP_Pos);
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <TIM4Init+0xac>)
 8000ae2:	6a1b      	ldr	r3, [r3, #32]
 8000ae4:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <TIM4Init+0xac>)
 8000ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aea:	6213      	str	r3, [r2, #32]
	TIM4->PSC &= ~(0x01 << TIM_PSC_PSC_Pos);	   //prescalar set to 0
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <TIM4Init+0xac>)
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <TIM4Init+0xac>)
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->CR1 |= (0x01 << TIM_CR1_ARPE_Pos);	   //enable auto-reload preload
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <TIM4Init+0xac>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <TIM4Init+0xac>)
 8000afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b02:	6013      	str	r3, [r2, #0]
	TIM4->ARR |= (0x00FF << TIM_ARR_ARR_Pos);	   //auto-reload register
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <TIM4Init+0xac>)
 8000b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <TIM4Init+0xac>)
 8000b0a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CR1 |= (0x01 << TIM_CR1_CEN_Pos);        //counter is enabled
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <TIM4Init+0xac>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <TIM4Init+0xac>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40000800 	.word	0x40000800

08000b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff ff72 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f000 f817 	bl	8000b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5e:	f7ff fe99 	bl	8000894 <main>

08000b62 <LoopForever>:

LoopForever:
  b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b70:	08001cf0 	.word	0x08001cf0
  ldr r2, =_sbss
 8000b74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b78:	200000a4 	.word	0x200000a4

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <__errno>:
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <__errno+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000000 	.word	0x20000000

08000b8c <__libc_init_array>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	4d0d      	ldr	r5, [pc, #52]	; (8000bc4 <__libc_init_array+0x38>)
 8000b90:	4c0d      	ldr	r4, [pc, #52]	; (8000bc8 <__libc_init_array+0x3c>)
 8000b92:	1b64      	subs	r4, r4, r5
 8000b94:	10a4      	asrs	r4, r4, #2
 8000b96:	2600      	movs	r6, #0
 8000b98:	42a6      	cmp	r6, r4
 8000b9a:	d109      	bne.n	8000bb0 <__libc_init_array+0x24>
 8000b9c:	4d0b      	ldr	r5, [pc, #44]	; (8000bcc <__libc_init_array+0x40>)
 8000b9e:	4c0c      	ldr	r4, [pc, #48]	; (8000bd0 <__libc_init_array+0x44>)
 8000ba0:	f001 f824 	bl	8001bec <_init>
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	10a4      	asrs	r4, r4, #2
 8000ba8:	2600      	movs	r6, #0
 8000baa:	42a6      	cmp	r6, r4
 8000bac:	d105      	bne.n	8000bba <__libc_init_array+0x2e>
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb4:	4798      	blx	r3
 8000bb6:	3601      	adds	r6, #1
 8000bb8:	e7ee      	b.n	8000b98 <__libc_init_array+0xc>
 8000bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbe:	4798      	blx	r3
 8000bc0:	3601      	adds	r6, #1
 8000bc2:	e7f2      	b.n	8000baa <__libc_init_array+0x1e>
 8000bc4:	08001ce8 	.word	0x08001ce8
 8000bc8:	08001ce8 	.word	0x08001ce8
 8000bcc:	08001ce8 	.word	0x08001ce8
 8000bd0:	08001cec 	.word	0x08001cec

08000bd4 <memset>:
 8000bd4:	4402      	add	r2, r0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d100      	bne.n	8000bde <memset+0xa>
 8000bdc:	4770      	bx	lr
 8000bde:	f803 1b01 	strb.w	r1, [r3], #1
 8000be2:	e7f9      	b.n	8000bd8 <memset+0x4>

08000be4 <iprintf>:
 8000be4:	b40f      	push	{r0, r1, r2, r3}
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <iprintf+0x2c>)
 8000be8:	b513      	push	{r0, r1, r4, lr}
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	b124      	cbz	r4, 8000bf8 <iprintf+0x14>
 8000bee:	69a3      	ldr	r3, [r4, #24]
 8000bf0:	b913      	cbnz	r3, 8000bf8 <iprintf+0x14>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 fa5e 	bl	80010b4 <__sinit>
 8000bf8:	ab05      	add	r3, sp, #20
 8000bfa:	9a04      	ldr	r2, [sp, #16]
 8000bfc:	68a1      	ldr	r1, [r4, #8]
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fc67 	bl	80014d4 <_vfiprintf_r>
 8000c06:	b002      	add	sp, #8
 8000c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr
 8000c10:	20000000 	.word	0x20000000

08000c14 <_puts_r>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	460e      	mov	r6, r1
 8000c18:	4605      	mov	r5, r0
 8000c1a:	b118      	cbz	r0, 8000c24 <_puts_r+0x10>
 8000c1c:	6983      	ldr	r3, [r0, #24]
 8000c1e:	b90b      	cbnz	r3, 8000c24 <_puts_r+0x10>
 8000c20:	f000 fa48 	bl	80010b4 <__sinit>
 8000c24:	69ab      	ldr	r3, [r5, #24]
 8000c26:	68ac      	ldr	r4, [r5, #8]
 8000c28:	b913      	cbnz	r3, 8000c30 <_puts_r+0x1c>
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f000 fa42 	bl	80010b4 <__sinit>
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <_puts_r+0xd0>)
 8000c32:	429c      	cmp	r4, r3
 8000c34:	d120      	bne.n	8000c78 <_puts_r+0x64>
 8000c36:	686c      	ldr	r4, [r5, #4]
 8000c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c3a:	07db      	lsls	r3, r3, #31
 8000c3c:	d405      	bmi.n	8000c4a <_puts_r+0x36>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	0598      	lsls	r0, r3, #22
 8000c42:	d402      	bmi.n	8000c4a <_puts_r+0x36>
 8000c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c46:	f000 fad3 	bl	80011f0 <__retarget_lock_acquire_recursive>
 8000c4a:	89a3      	ldrh	r3, [r4, #12]
 8000c4c:	0719      	lsls	r1, r3, #28
 8000c4e:	d51d      	bpl.n	8000c8c <_puts_r+0x78>
 8000c50:	6923      	ldr	r3, [r4, #16]
 8000c52:	b1db      	cbz	r3, 8000c8c <_puts_r+0x78>
 8000c54:	3e01      	subs	r6, #1
 8000c56:	68a3      	ldr	r3, [r4, #8]
 8000c58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	60a3      	str	r3, [r4, #8]
 8000c60:	bb39      	cbnz	r1, 8000cb2 <_puts_r+0x9e>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da38      	bge.n	8000cd8 <_puts_r+0xc4>
 8000c66:	4622      	mov	r2, r4
 8000c68:	210a      	movs	r1, #10
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f000 f848 	bl	8000d00 <__swbuf_r>
 8000c70:	3001      	adds	r0, #1
 8000c72:	d011      	beq.n	8000c98 <_puts_r+0x84>
 8000c74:	250a      	movs	r5, #10
 8000c76:	e011      	b.n	8000c9c <_puts_r+0x88>
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <_puts_r+0xd4>)
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	d101      	bne.n	8000c82 <_puts_r+0x6e>
 8000c7e:	68ac      	ldr	r4, [r5, #8]
 8000c80:	e7da      	b.n	8000c38 <_puts_r+0x24>
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <_puts_r+0xd8>)
 8000c84:	429c      	cmp	r4, r3
 8000c86:	bf08      	it	eq
 8000c88:	68ec      	ldreq	r4, [r5, #12]
 8000c8a:	e7d5      	b.n	8000c38 <_puts_r+0x24>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f000 f888 	bl	8000da4 <__swsetup_r>
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d0dd      	beq.n	8000c54 <_puts_r+0x40>
 8000c98:	f04f 35ff 	mov.w	r5, #4294967295
 8000c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c9e:	07da      	lsls	r2, r3, #31
 8000ca0:	d405      	bmi.n	8000cae <_puts_r+0x9a>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	059b      	lsls	r3, r3, #22
 8000ca6:	d402      	bmi.n	8000cae <_puts_r+0x9a>
 8000ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000caa:	f000 faa2 	bl	80011f2 <__retarget_lock_release_recursive>
 8000cae:	4628      	mov	r0, r5
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da04      	bge.n	8000cc0 <_puts_r+0xac>
 8000cb6:	69a2      	ldr	r2, [r4, #24]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dc06      	bgt.n	8000cca <_puts_r+0xb6>
 8000cbc:	290a      	cmp	r1, #10
 8000cbe:	d004      	beq.n	8000cca <_puts_r+0xb6>
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	6022      	str	r2, [r4, #0]
 8000cc6:	7019      	strb	r1, [r3, #0]
 8000cc8:	e7c5      	b.n	8000c56 <_puts_r+0x42>
 8000cca:	4622      	mov	r2, r4
 8000ccc:	4628      	mov	r0, r5
 8000cce:	f000 f817 	bl	8000d00 <__swbuf_r>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	d1bf      	bne.n	8000c56 <_puts_r+0x42>
 8000cd6:	e7df      	b.n	8000c98 <_puts_r+0x84>
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	250a      	movs	r5, #10
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	6022      	str	r2, [r4, #0]
 8000ce0:	701d      	strb	r5, [r3, #0]
 8000ce2:	e7db      	b.n	8000c9c <_puts_r+0x88>
 8000ce4:	08001c74 	.word	0x08001c74
 8000ce8:	08001c94 	.word	0x08001c94
 8000cec:	08001c54 	.word	0x08001c54

08000cf0 <puts>:
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <puts+0xc>)
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	f7ff bf8d 	b.w	8000c14 <_puts_r>
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000

08000d00 <__swbuf_r>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	460e      	mov	r6, r1
 8000d04:	4614      	mov	r4, r2
 8000d06:	4605      	mov	r5, r0
 8000d08:	b118      	cbz	r0, 8000d12 <__swbuf_r+0x12>
 8000d0a:	6983      	ldr	r3, [r0, #24]
 8000d0c:	b90b      	cbnz	r3, 8000d12 <__swbuf_r+0x12>
 8000d0e:	f000 f9d1 	bl	80010b4 <__sinit>
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <__swbuf_r+0x98>)
 8000d14:	429c      	cmp	r4, r3
 8000d16:	d12b      	bne.n	8000d70 <__swbuf_r+0x70>
 8000d18:	686c      	ldr	r4, [r5, #4]
 8000d1a:	69a3      	ldr	r3, [r4, #24]
 8000d1c:	60a3      	str	r3, [r4, #8]
 8000d1e:	89a3      	ldrh	r3, [r4, #12]
 8000d20:	071a      	lsls	r2, r3, #28
 8000d22:	d52f      	bpl.n	8000d84 <__swbuf_r+0x84>
 8000d24:	6923      	ldr	r3, [r4, #16]
 8000d26:	b36b      	cbz	r3, 8000d84 <__swbuf_r+0x84>
 8000d28:	6923      	ldr	r3, [r4, #16]
 8000d2a:	6820      	ldr	r0, [r4, #0]
 8000d2c:	1ac0      	subs	r0, r0, r3
 8000d2e:	6963      	ldr	r3, [r4, #20]
 8000d30:	b2f6      	uxtb	r6, r6
 8000d32:	4283      	cmp	r3, r0
 8000d34:	4637      	mov	r7, r6
 8000d36:	dc04      	bgt.n	8000d42 <__swbuf_r+0x42>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f000 f926 	bl	8000f8c <_fflush_r>
 8000d40:	bb30      	cbnz	r0, 8000d90 <__swbuf_r+0x90>
 8000d42:	68a3      	ldr	r3, [r4, #8]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	60a3      	str	r3, [r4, #8]
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	6022      	str	r2, [r4, #0]
 8000d4e:	701e      	strb	r6, [r3, #0]
 8000d50:	6963      	ldr	r3, [r4, #20]
 8000d52:	3001      	adds	r0, #1
 8000d54:	4283      	cmp	r3, r0
 8000d56:	d004      	beq.n	8000d62 <__swbuf_r+0x62>
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	07db      	lsls	r3, r3, #31
 8000d5c:	d506      	bpl.n	8000d6c <__swbuf_r+0x6c>
 8000d5e:	2e0a      	cmp	r6, #10
 8000d60:	d104      	bne.n	8000d6c <__swbuf_r+0x6c>
 8000d62:	4621      	mov	r1, r4
 8000d64:	4628      	mov	r0, r5
 8000d66:	f000 f911 	bl	8000f8c <_fflush_r>
 8000d6a:	b988      	cbnz	r0, 8000d90 <__swbuf_r+0x90>
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <__swbuf_r+0x9c>)
 8000d72:	429c      	cmp	r4, r3
 8000d74:	d101      	bne.n	8000d7a <__swbuf_r+0x7a>
 8000d76:	68ac      	ldr	r4, [r5, #8]
 8000d78:	e7cf      	b.n	8000d1a <__swbuf_r+0x1a>
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <__swbuf_r+0xa0>)
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	bf08      	it	eq
 8000d80:	68ec      	ldreq	r4, [r5, #12]
 8000d82:	e7ca      	b.n	8000d1a <__swbuf_r+0x1a>
 8000d84:	4621      	mov	r1, r4
 8000d86:	4628      	mov	r0, r5
 8000d88:	f000 f80c 	bl	8000da4 <__swsetup_r>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d0cb      	beq.n	8000d28 <__swbuf_r+0x28>
 8000d90:	f04f 37ff 	mov.w	r7, #4294967295
 8000d94:	e7ea      	b.n	8000d6c <__swbuf_r+0x6c>
 8000d96:	bf00      	nop
 8000d98:	08001c74 	.word	0x08001c74
 8000d9c:	08001c94 	.word	0x08001c94
 8000da0:	08001c54 	.word	0x08001c54

08000da4 <__swsetup_r>:
 8000da4:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <__swsetup_r+0xcc>)
 8000da6:	b570      	push	{r4, r5, r6, lr}
 8000da8:	681d      	ldr	r5, [r3, #0]
 8000daa:	4606      	mov	r6, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	b125      	cbz	r5, 8000dba <__swsetup_r+0x16>
 8000db0:	69ab      	ldr	r3, [r5, #24]
 8000db2:	b913      	cbnz	r3, 8000dba <__swsetup_r+0x16>
 8000db4:	4628      	mov	r0, r5
 8000db6:	f000 f97d 	bl	80010b4 <__sinit>
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <__swsetup_r+0xd0>)
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	d10f      	bne.n	8000de0 <__swsetup_r+0x3c>
 8000dc0:	686c      	ldr	r4, [r5, #4]
 8000dc2:	89a3      	ldrh	r3, [r4, #12]
 8000dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000dc8:	0719      	lsls	r1, r3, #28
 8000dca:	d42c      	bmi.n	8000e26 <__swsetup_r+0x82>
 8000dcc:	06dd      	lsls	r5, r3, #27
 8000dce:	d411      	bmi.n	8000df4 <__swsetup_r+0x50>
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000dd8:	81a3      	strh	r3, [r4, #12]
 8000dda:	f04f 30ff 	mov.w	r0, #4294967295
 8000dde:	e03e      	b.n	8000e5e <__swsetup_r+0xba>
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <__swsetup_r+0xd4>)
 8000de2:	429c      	cmp	r4, r3
 8000de4:	d101      	bne.n	8000dea <__swsetup_r+0x46>
 8000de6:	68ac      	ldr	r4, [r5, #8]
 8000de8:	e7eb      	b.n	8000dc2 <__swsetup_r+0x1e>
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <__swsetup_r+0xd8>)
 8000dec:	429c      	cmp	r4, r3
 8000dee:	bf08      	it	eq
 8000df0:	68ec      	ldreq	r4, [r5, #12]
 8000df2:	e7e6      	b.n	8000dc2 <__swsetup_r+0x1e>
 8000df4:	0758      	lsls	r0, r3, #29
 8000df6:	d512      	bpl.n	8000e1e <__swsetup_r+0x7a>
 8000df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dfa:	b141      	cbz	r1, 8000e0e <__swsetup_r+0x6a>
 8000dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d002      	beq.n	8000e0a <__swsetup_r+0x66>
 8000e04:	4630      	mov	r0, r6
 8000e06:	f000 fa5b 	bl	80012c0 <_free_r>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	2300      	movs	r3, #0
 8000e18:	6063      	str	r3, [r4, #4]
 8000e1a:	6923      	ldr	r3, [r4, #16]
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	81a3      	strh	r3, [r4, #12]
 8000e26:	6923      	ldr	r3, [r4, #16]
 8000e28:	b94b      	cbnz	r3, 8000e3e <__swsetup_r+0x9a>
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e34:	d003      	beq.n	8000e3e <__swsetup_r+0x9a>
 8000e36:	4621      	mov	r1, r4
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f000 fa01 	bl	8001240 <__smakebuf_r>
 8000e3e:	89a0      	ldrh	r0, [r4, #12]
 8000e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e44:	f010 0301 	ands.w	r3, r0, #1
 8000e48:	d00a      	beq.n	8000e60 <__swsetup_r+0xbc>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60a3      	str	r3, [r4, #8]
 8000e4e:	6963      	ldr	r3, [r4, #20]
 8000e50:	425b      	negs	r3, r3
 8000e52:	61a3      	str	r3, [r4, #24]
 8000e54:	6923      	ldr	r3, [r4, #16]
 8000e56:	b943      	cbnz	r3, 8000e6a <__swsetup_r+0xc6>
 8000e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e5c:	d1ba      	bne.n	8000dd4 <__swsetup_r+0x30>
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	0781      	lsls	r1, r0, #30
 8000e62:	bf58      	it	pl
 8000e64:	6963      	ldrpl	r3, [r4, #20]
 8000e66:	60a3      	str	r3, [r4, #8]
 8000e68:	e7f4      	b.n	8000e54 <__swsetup_r+0xb0>
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	e7f7      	b.n	8000e5e <__swsetup_r+0xba>
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	08001c74 	.word	0x08001c74
 8000e78:	08001c94 	.word	0x08001c94
 8000e7c:	08001c54 	.word	0x08001c54

08000e80 <__sflush_r>:
 8000e80:	898a      	ldrh	r2, [r1, #12]
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e86:	4605      	mov	r5, r0
 8000e88:	0710      	lsls	r0, r2, #28
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	d458      	bmi.n	8000f40 <__sflush_r+0xc0>
 8000e8e:	684b      	ldr	r3, [r1, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dc05      	bgt.n	8000ea0 <__sflush_r+0x20>
 8000e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dc02      	bgt.n	8000ea0 <__sflush_r+0x20>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d0f9      	beq.n	8000e9a <__sflush_r+0x1a>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000eac:	682f      	ldr	r7, [r5, #0]
 8000eae:	602b      	str	r3, [r5, #0]
 8000eb0:	d032      	beq.n	8000f18 <__sflush_r+0x98>
 8000eb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eb4:	89a3      	ldrh	r3, [r4, #12]
 8000eb6:	075a      	lsls	r2, r3, #29
 8000eb8:	d505      	bpl.n	8000ec6 <__sflush_r+0x46>
 8000eba:	6863      	ldr	r3, [r4, #4]
 8000ebc:	1ac0      	subs	r0, r0, r3
 8000ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ec0:	b10b      	cbz	r3, 8000ec6 <__sflush_r+0x46>
 8000ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ec4:	1ac0      	subs	r0, r0, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4602      	mov	r2, r0
 8000eca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ecc:	6a21      	ldr	r1, [r4, #32]
 8000ece:	4628      	mov	r0, r5
 8000ed0:	47b0      	blx	r6
 8000ed2:	1c43      	adds	r3, r0, #1
 8000ed4:	89a3      	ldrh	r3, [r4, #12]
 8000ed6:	d106      	bne.n	8000ee6 <__sflush_r+0x66>
 8000ed8:	6829      	ldr	r1, [r5, #0]
 8000eda:	291d      	cmp	r1, #29
 8000edc:	d82c      	bhi.n	8000f38 <__sflush_r+0xb8>
 8000ede:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <__sflush_r+0x108>)
 8000ee0:	40ca      	lsrs	r2, r1
 8000ee2:	07d6      	lsls	r6, r2, #31
 8000ee4:	d528      	bpl.n	8000f38 <__sflush_r+0xb8>
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6062      	str	r2, [r4, #4]
 8000eea:	04d9      	lsls	r1, r3, #19
 8000eec:	6922      	ldr	r2, [r4, #16]
 8000eee:	6022      	str	r2, [r4, #0]
 8000ef0:	d504      	bpl.n	8000efc <__sflush_r+0x7c>
 8000ef2:	1c42      	adds	r2, r0, #1
 8000ef4:	d101      	bne.n	8000efa <__sflush_r+0x7a>
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	b903      	cbnz	r3, 8000efc <__sflush_r+0x7c>
 8000efa:	6560      	str	r0, [r4, #84]	; 0x54
 8000efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000efe:	602f      	str	r7, [r5, #0]
 8000f00:	2900      	cmp	r1, #0
 8000f02:	d0ca      	beq.n	8000e9a <__sflush_r+0x1a>
 8000f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d002      	beq.n	8000f12 <__sflush_r+0x92>
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f000 f9d7 	bl	80012c0 <_free_r>
 8000f12:	2000      	movs	r0, #0
 8000f14:	6360      	str	r0, [r4, #52]	; 0x34
 8000f16:	e7c1      	b.n	8000e9c <__sflush_r+0x1c>
 8000f18:	6a21      	ldr	r1, [r4, #32]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	47b0      	blx	r6
 8000f20:	1c41      	adds	r1, r0, #1
 8000f22:	d1c7      	bne.n	8000eb4 <__sflush_r+0x34>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0c4      	beq.n	8000eb4 <__sflush_r+0x34>
 8000f2a:	2b1d      	cmp	r3, #29
 8000f2c:	d001      	beq.n	8000f32 <__sflush_r+0xb2>
 8000f2e:	2b16      	cmp	r3, #22
 8000f30:	d101      	bne.n	8000f36 <__sflush_r+0xb6>
 8000f32:	602f      	str	r7, [r5, #0]
 8000f34:	e7b1      	b.n	8000e9a <__sflush_r+0x1a>
 8000f36:	89a3      	ldrh	r3, [r4, #12]
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	e7ad      	b.n	8000e9c <__sflush_r+0x1c>
 8000f40:	690f      	ldr	r7, [r1, #16]
 8000f42:	2f00      	cmp	r7, #0
 8000f44:	d0a9      	beq.n	8000e9a <__sflush_r+0x1a>
 8000f46:	0793      	lsls	r3, r2, #30
 8000f48:	680e      	ldr	r6, [r1, #0]
 8000f4a:	bf08      	it	eq
 8000f4c:	694b      	ldreq	r3, [r1, #20]
 8000f4e:	600f      	str	r7, [r1, #0]
 8000f50:	bf18      	it	ne
 8000f52:	2300      	movne	r3, #0
 8000f54:	eba6 0807 	sub.w	r8, r6, r7
 8000f58:	608b      	str	r3, [r1, #8]
 8000f5a:	f1b8 0f00 	cmp.w	r8, #0
 8000f5e:	dd9c      	ble.n	8000e9a <__sflush_r+0x1a>
 8000f60:	6a21      	ldr	r1, [r4, #32]
 8000f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f64:	4643      	mov	r3, r8
 8000f66:	463a      	mov	r2, r7
 8000f68:	4628      	mov	r0, r5
 8000f6a:	47b0      	blx	r6
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	dc06      	bgt.n	8000f7e <__sflush_r+0xfe>
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	e78e      	b.n	8000e9c <__sflush_r+0x1c>
 8000f7e:	4407      	add	r7, r0
 8000f80:	eba8 0800 	sub.w	r8, r8, r0
 8000f84:	e7e9      	b.n	8000f5a <__sflush_r+0xda>
 8000f86:	bf00      	nop
 8000f88:	20400001 	.word	0x20400001

08000f8c <_fflush_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	690b      	ldr	r3, [r1, #16]
 8000f90:	4605      	mov	r5, r0
 8000f92:	460c      	mov	r4, r1
 8000f94:	b913      	cbnz	r3, 8000f9c <_fflush_r+0x10>
 8000f96:	2500      	movs	r5, #0
 8000f98:	4628      	mov	r0, r5
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	b118      	cbz	r0, 8000fa6 <_fflush_r+0x1a>
 8000f9e:	6983      	ldr	r3, [r0, #24]
 8000fa0:	b90b      	cbnz	r3, 8000fa6 <_fflush_r+0x1a>
 8000fa2:	f000 f887 	bl	80010b4 <__sinit>
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <_fflush_r+0x6c>)
 8000fa8:	429c      	cmp	r4, r3
 8000faa:	d11b      	bne.n	8000fe4 <_fflush_r+0x58>
 8000fac:	686c      	ldr	r4, [r5, #4]
 8000fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0ef      	beq.n	8000f96 <_fflush_r+0xa>
 8000fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fb8:	07d0      	lsls	r0, r2, #31
 8000fba:	d404      	bmi.n	8000fc6 <_fflush_r+0x3a>
 8000fbc:	0599      	lsls	r1, r3, #22
 8000fbe:	d402      	bmi.n	8000fc6 <_fflush_r+0x3a>
 8000fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fc2:	f000 f915 	bl	80011f0 <__retarget_lock_acquire_recursive>
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f7ff ff59 	bl	8000e80 <__sflush_r>
 8000fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000fd0:	07da      	lsls	r2, r3, #31
 8000fd2:	4605      	mov	r5, r0
 8000fd4:	d4e0      	bmi.n	8000f98 <_fflush_r+0xc>
 8000fd6:	89a3      	ldrh	r3, [r4, #12]
 8000fd8:	059b      	lsls	r3, r3, #22
 8000fda:	d4dd      	bmi.n	8000f98 <_fflush_r+0xc>
 8000fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fde:	f000 f908 	bl	80011f2 <__retarget_lock_release_recursive>
 8000fe2:	e7d9      	b.n	8000f98 <_fflush_r+0xc>
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <_fflush_r+0x70>)
 8000fe6:	429c      	cmp	r4, r3
 8000fe8:	d101      	bne.n	8000fee <_fflush_r+0x62>
 8000fea:	68ac      	ldr	r4, [r5, #8]
 8000fec:	e7df      	b.n	8000fae <_fflush_r+0x22>
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <_fflush_r+0x74>)
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	bf08      	it	eq
 8000ff4:	68ec      	ldreq	r4, [r5, #12]
 8000ff6:	e7da      	b.n	8000fae <_fflush_r+0x22>
 8000ff8:	08001c74 	.word	0x08001c74
 8000ffc:	08001c94 	.word	0x08001c94
 8001000:	08001c54 	.word	0x08001c54

08001004 <std>:
 8001004:	2300      	movs	r3, #0
 8001006:	b510      	push	{r4, lr}
 8001008:	4604      	mov	r4, r0
 800100a:	e9c0 3300 	strd	r3, r3, [r0]
 800100e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001012:	6083      	str	r3, [r0, #8]
 8001014:	8181      	strh	r1, [r0, #12]
 8001016:	6643      	str	r3, [r0, #100]	; 0x64
 8001018:	81c2      	strh	r2, [r0, #14]
 800101a:	6183      	str	r3, [r0, #24]
 800101c:	4619      	mov	r1, r3
 800101e:	2208      	movs	r2, #8
 8001020:	305c      	adds	r0, #92	; 0x5c
 8001022:	f7ff fdd7 	bl	8000bd4 <memset>
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <std+0x38>)
 8001028:	6263      	str	r3, [r4, #36]	; 0x24
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <std+0x3c>)
 800102c:	62a3      	str	r3, [r4, #40]	; 0x28
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <std+0x40>)
 8001030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <std+0x44>)
 8001034:	6224      	str	r4, [r4, #32]
 8001036:	6323      	str	r3, [r4, #48]	; 0x30
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	08001a7d 	.word	0x08001a7d
 8001040:	08001a9f 	.word	0x08001a9f
 8001044:	08001ad7 	.word	0x08001ad7
 8001048:	08001afb 	.word	0x08001afb

0800104c <_cleanup_r>:
 800104c:	4901      	ldr	r1, [pc, #4]	; (8001054 <_cleanup_r+0x8>)
 800104e:	f000 b8af 	b.w	80011b0 <_fwalk_reent>
 8001052:	bf00      	nop
 8001054:	08000f8d 	.word	0x08000f8d

08001058 <__sfmoreglue>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	2268      	movs	r2, #104	; 0x68
 800105c:	1e4d      	subs	r5, r1, #1
 800105e:	4355      	muls	r5, r2
 8001060:	460e      	mov	r6, r1
 8001062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001066:	f000 f997 	bl	8001398 <_malloc_r>
 800106a:	4604      	mov	r4, r0
 800106c:	b140      	cbz	r0, 8001080 <__sfmoreglue+0x28>
 800106e:	2100      	movs	r1, #0
 8001070:	e9c0 1600 	strd	r1, r6, [r0]
 8001074:	300c      	adds	r0, #12
 8001076:	60a0      	str	r0, [r4, #8]
 8001078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800107c:	f7ff fdaa 	bl	8000bd4 <memset>
 8001080:	4620      	mov	r0, r4
 8001082:	bd70      	pop	{r4, r5, r6, pc}

08001084 <__sfp_lock_acquire>:
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <__sfp_lock_acquire+0x8>)
 8001086:	f000 b8b3 	b.w	80011f0 <__retarget_lock_acquire_recursive>
 800108a:	bf00      	nop
 800108c:	20000095 	.word	0x20000095

08001090 <__sfp_lock_release>:
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <__sfp_lock_release+0x8>)
 8001092:	f000 b8ae 	b.w	80011f2 <__retarget_lock_release_recursive>
 8001096:	bf00      	nop
 8001098:	20000095 	.word	0x20000095

0800109c <__sinit_lock_acquire>:
 800109c:	4801      	ldr	r0, [pc, #4]	; (80010a4 <__sinit_lock_acquire+0x8>)
 800109e:	f000 b8a7 	b.w	80011f0 <__retarget_lock_acquire_recursive>
 80010a2:	bf00      	nop
 80010a4:	20000096 	.word	0x20000096

080010a8 <__sinit_lock_release>:
 80010a8:	4801      	ldr	r0, [pc, #4]	; (80010b0 <__sinit_lock_release+0x8>)
 80010aa:	f000 b8a2 	b.w	80011f2 <__retarget_lock_release_recursive>
 80010ae:	bf00      	nop
 80010b0:	20000096 	.word	0x20000096

080010b4 <__sinit>:
 80010b4:	b510      	push	{r4, lr}
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff fff0 	bl	800109c <__sinit_lock_acquire>
 80010bc:	69a3      	ldr	r3, [r4, #24]
 80010be:	b11b      	cbz	r3, 80010c8 <__sinit+0x14>
 80010c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010c4:	f7ff bff0 	b.w	80010a8 <__sinit_lock_release>
 80010c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80010cc:	6523      	str	r3, [r4, #80]	; 0x50
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <__sinit+0x68>)
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <__sinit+0x6c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	bf04      	itt	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	61a3      	streq	r3, [r4, #24]
 80010de:	4620      	mov	r0, r4
 80010e0:	f000 f820 	bl	8001124 <__sfp>
 80010e4:	6060      	str	r0, [r4, #4]
 80010e6:	4620      	mov	r0, r4
 80010e8:	f000 f81c 	bl	8001124 <__sfp>
 80010ec:	60a0      	str	r0, [r4, #8]
 80010ee:	4620      	mov	r0, r4
 80010f0:	f000 f818 	bl	8001124 <__sfp>
 80010f4:	2200      	movs	r2, #0
 80010f6:	60e0      	str	r0, [r4, #12]
 80010f8:	2104      	movs	r1, #4
 80010fa:	6860      	ldr	r0, [r4, #4]
 80010fc:	f7ff ff82 	bl	8001004 <std>
 8001100:	68a0      	ldr	r0, [r4, #8]
 8001102:	2201      	movs	r2, #1
 8001104:	2109      	movs	r1, #9
 8001106:	f7ff ff7d 	bl	8001004 <std>
 800110a:	68e0      	ldr	r0, [r4, #12]
 800110c:	2202      	movs	r2, #2
 800110e:	2112      	movs	r1, #18
 8001110:	f7ff ff78 	bl	8001004 <std>
 8001114:	2301      	movs	r3, #1
 8001116:	61a3      	str	r3, [r4, #24]
 8001118:	e7d2      	b.n	80010c0 <__sinit+0xc>
 800111a:	bf00      	nop
 800111c:	08001c50 	.word	0x08001c50
 8001120:	0800104d 	.word	0x0800104d

08001124 <__sfp>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	4607      	mov	r7, r0
 8001128:	f7ff ffac 	bl	8001084 <__sfp_lock_acquire>
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <__sfp+0x84>)
 800112e:	681e      	ldr	r6, [r3, #0]
 8001130:	69b3      	ldr	r3, [r6, #24]
 8001132:	b913      	cbnz	r3, 800113a <__sfp+0x16>
 8001134:	4630      	mov	r0, r6
 8001136:	f7ff ffbd 	bl	80010b4 <__sinit>
 800113a:	3648      	adds	r6, #72	; 0x48
 800113c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001140:	3b01      	subs	r3, #1
 8001142:	d503      	bpl.n	800114c <__sfp+0x28>
 8001144:	6833      	ldr	r3, [r6, #0]
 8001146:	b30b      	cbz	r3, 800118c <__sfp+0x68>
 8001148:	6836      	ldr	r6, [r6, #0]
 800114a:	e7f7      	b.n	800113c <__sfp+0x18>
 800114c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001150:	b9d5      	cbnz	r5, 8001188 <__sfp+0x64>
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <__sfp+0x88>)
 8001154:	60e3      	str	r3, [r4, #12]
 8001156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800115a:	6665      	str	r5, [r4, #100]	; 0x64
 800115c:	f000 f847 	bl	80011ee <__retarget_lock_init_recursive>
 8001160:	f7ff ff96 	bl	8001090 <__sfp_lock_release>
 8001164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800116c:	6025      	str	r5, [r4, #0]
 800116e:	61a5      	str	r5, [r4, #24]
 8001170:	2208      	movs	r2, #8
 8001172:	4629      	mov	r1, r5
 8001174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001178:	f7ff fd2c 	bl	8000bd4 <memset>
 800117c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001184:	4620      	mov	r0, r4
 8001186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001188:	3468      	adds	r4, #104	; 0x68
 800118a:	e7d9      	b.n	8001140 <__sfp+0x1c>
 800118c:	2104      	movs	r1, #4
 800118e:	4638      	mov	r0, r7
 8001190:	f7ff ff62 	bl	8001058 <__sfmoreglue>
 8001194:	4604      	mov	r4, r0
 8001196:	6030      	str	r0, [r6, #0]
 8001198:	2800      	cmp	r0, #0
 800119a:	d1d5      	bne.n	8001148 <__sfp+0x24>
 800119c:	f7ff ff78 	bl	8001090 <__sfp_lock_release>
 80011a0:	230c      	movs	r3, #12
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	e7ee      	b.n	8001184 <__sfp+0x60>
 80011a6:	bf00      	nop
 80011a8:	08001c50 	.word	0x08001c50
 80011ac:	ffff0001 	.word	0xffff0001

080011b0 <_fwalk_reent>:
 80011b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011b4:	4606      	mov	r6, r0
 80011b6:	4688      	mov	r8, r1
 80011b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011bc:	2700      	movs	r7, #0
 80011be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011c2:	f1b9 0901 	subs.w	r9, r9, #1
 80011c6:	d505      	bpl.n	80011d4 <_fwalk_reent+0x24>
 80011c8:	6824      	ldr	r4, [r4, #0]
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d1f7      	bne.n	80011be <_fwalk_reent+0xe>
 80011ce:	4638      	mov	r0, r7
 80011d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011d4:	89ab      	ldrh	r3, [r5, #12]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d907      	bls.n	80011ea <_fwalk_reent+0x3a>
 80011da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011de:	3301      	adds	r3, #1
 80011e0:	d003      	beq.n	80011ea <_fwalk_reent+0x3a>
 80011e2:	4629      	mov	r1, r5
 80011e4:	4630      	mov	r0, r6
 80011e6:	47c0      	blx	r8
 80011e8:	4307      	orrs	r7, r0
 80011ea:	3568      	adds	r5, #104	; 0x68
 80011ec:	e7e9      	b.n	80011c2 <_fwalk_reent+0x12>

080011ee <__retarget_lock_init_recursive>:
 80011ee:	4770      	bx	lr

080011f0 <__retarget_lock_acquire_recursive>:
 80011f0:	4770      	bx	lr

080011f2 <__retarget_lock_release_recursive>:
 80011f2:	4770      	bx	lr

080011f4 <__swhatbuf_r>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	460e      	mov	r6, r1
 80011f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011fc:	2900      	cmp	r1, #0
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	4614      	mov	r4, r2
 8001202:	461d      	mov	r5, r3
 8001204:	da08      	bge.n	8001218 <__swhatbuf_r+0x24>
 8001206:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	602a      	str	r2, [r5, #0]
 800120e:	061a      	lsls	r2, r3, #24
 8001210:	d410      	bmi.n	8001234 <__swhatbuf_r+0x40>
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	e00e      	b.n	8001236 <__swhatbuf_r+0x42>
 8001218:	466a      	mov	r2, sp
 800121a:	f000 fc95 	bl	8001b48 <_fstat_r>
 800121e:	2800      	cmp	r0, #0
 8001220:	dbf1      	blt.n	8001206 <__swhatbuf_r+0x12>
 8001222:	9a01      	ldr	r2, [sp, #4]
 8001224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800122c:	425a      	negs	r2, r3
 800122e:	415a      	adcs	r2, r3
 8001230:	602a      	str	r2, [r5, #0]
 8001232:	e7ee      	b.n	8001212 <__swhatbuf_r+0x1e>
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	2000      	movs	r0, #0
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	b016      	add	sp, #88	; 0x58
 800123c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001240 <__smakebuf_r>:
 8001240:	898b      	ldrh	r3, [r1, #12]
 8001242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001244:	079d      	lsls	r5, r3, #30
 8001246:	4606      	mov	r6, r0
 8001248:	460c      	mov	r4, r1
 800124a:	d507      	bpl.n	800125c <__smakebuf_r+0x1c>
 800124c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001250:	6023      	str	r3, [r4, #0]
 8001252:	6123      	str	r3, [r4, #16]
 8001254:	2301      	movs	r3, #1
 8001256:	6163      	str	r3, [r4, #20]
 8001258:	b002      	add	sp, #8
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	ab01      	add	r3, sp, #4
 800125e:	466a      	mov	r2, sp
 8001260:	f7ff ffc8 	bl	80011f4 <__swhatbuf_r>
 8001264:	9900      	ldr	r1, [sp, #0]
 8001266:	4605      	mov	r5, r0
 8001268:	4630      	mov	r0, r6
 800126a:	f000 f895 	bl	8001398 <_malloc_r>
 800126e:	b948      	cbnz	r0, 8001284 <__smakebuf_r+0x44>
 8001270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001274:	059a      	lsls	r2, r3, #22
 8001276:	d4ef      	bmi.n	8001258 <__smakebuf_r+0x18>
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	e7e3      	b.n	800124c <__smakebuf_r+0xc>
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <__smakebuf_r+0x7c>)
 8001286:	62b3      	str	r3, [r6, #40]	; 0x28
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	6020      	str	r0, [r4, #0]
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	9b00      	ldr	r3, [sp, #0]
 8001294:	6163      	str	r3, [r4, #20]
 8001296:	9b01      	ldr	r3, [sp, #4]
 8001298:	6120      	str	r0, [r4, #16]
 800129a:	b15b      	cbz	r3, 80012b4 <__smakebuf_r+0x74>
 800129c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012a0:	4630      	mov	r0, r6
 80012a2:	f000 fc63 	bl	8001b6c <_isatty_r>
 80012a6:	b128      	cbz	r0, 80012b4 <__smakebuf_r+0x74>
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	f023 0303 	bic.w	r3, r3, #3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	81a3      	strh	r3, [r4, #12]
 80012b4:	89a0      	ldrh	r0, [r4, #12]
 80012b6:	4305      	orrs	r5, r0
 80012b8:	81a5      	strh	r5, [r4, #12]
 80012ba:	e7cd      	b.n	8001258 <__smakebuf_r+0x18>
 80012bc:	0800104d 	.word	0x0800104d

080012c0 <_free_r>:
 80012c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d044      	beq.n	8001350 <_free_r+0x90>
 80012c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ca:	9001      	str	r0, [sp, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f1a1 0404 	sub.w	r4, r1, #4
 80012d2:	bfb8      	it	lt
 80012d4:	18e4      	addlt	r4, r4, r3
 80012d6:	f000 fc6b 	bl	8001bb0 <__malloc_lock>
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <_free_r+0x94>)
 80012dc:	9801      	ldr	r0, [sp, #4]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	b933      	cbnz	r3, 80012f0 <_free_r+0x30>
 80012e2:	6063      	str	r3, [r4, #4]
 80012e4:	6014      	str	r4, [r2, #0]
 80012e6:	b003      	add	sp, #12
 80012e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80012ec:	f000 bc66 	b.w	8001bbc <__malloc_unlock>
 80012f0:	42a3      	cmp	r3, r4
 80012f2:	d908      	bls.n	8001306 <_free_r+0x46>
 80012f4:	6825      	ldr	r5, [r4, #0]
 80012f6:	1961      	adds	r1, r4, r5
 80012f8:	428b      	cmp	r3, r1
 80012fa:	bf01      	itttt	eq
 80012fc:	6819      	ldreq	r1, [r3, #0]
 80012fe:	685b      	ldreq	r3, [r3, #4]
 8001300:	1949      	addeq	r1, r1, r5
 8001302:	6021      	streq	r1, [r4, #0]
 8001304:	e7ed      	b.n	80012e2 <_free_r+0x22>
 8001306:	461a      	mov	r2, r3
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b10b      	cbz	r3, 8001310 <_free_r+0x50>
 800130c:	42a3      	cmp	r3, r4
 800130e:	d9fa      	bls.n	8001306 <_free_r+0x46>
 8001310:	6811      	ldr	r1, [r2, #0]
 8001312:	1855      	adds	r5, r2, r1
 8001314:	42a5      	cmp	r5, r4
 8001316:	d10b      	bne.n	8001330 <_free_r+0x70>
 8001318:	6824      	ldr	r4, [r4, #0]
 800131a:	4421      	add	r1, r4
 800131c:	1854      	adds	r4, r2, r1
 800131e:	42a3      	cmp	r3, r4
 8001320:	6011      	str	r1, [r2, #0]
 8001322:	d1e0      	bne.n	80012e6 <_free_r+0x26>
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	6053      	str	r3, [r2, #4]
 800132a:	4421      	add	r1, r4
 800132c:	6011      	str	r1, [r2, #0]
 800132e:	e7da      	b.n	80012e6 <_free_r+0x26>
 8001330:	d902      	bls.n	8001338 <_free_r+0x78>
 8001332:	230c      	movs	r3, #12
 8001334:	6003      	str	r3, [r0, #0]
 8001336:	e7d6      	b.n	80012e6 <_free_r+0x26>
 8001338:	6825      	ldr	r5, [r4, #0]
 800133a:	1961      	adds	r1, r4, r5
 800133c:	428b      	cmp	r3, r1
 800133e:	bf04      	itt	eq
 8001340:	6819      	ldreq	r1, [r3, #0]
 8001342:	685b      	ldreq	r3, [r3, #4]
 8001344:	6063      	str	r3, [r4, #4]
 8001346:	bf04      	itt	eq
 8001348:	1949      	addeq	r1, r1, r5
 800134a:	6021      	streq	r1, [r4, #0]
 800134c:	6054      	str	r4, [r2, #4]
 800134e:	e7ca      	b.n	80012e6 <_free_r+0x26>
 8001350:	b003      	add	sp, #12
 8001352:	bd30      	pop	{r4, r5, pc}
 8001354:	20000098 	.word	0x20000098

08001358 <sbrk_aligned>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	4e0e      	ldr	r6, [pc, #56]	; (8001394 <sbrk_aligned+0x3c>)
 800135c:	460c      	mov	r4, r1
 800135e:	6831      	ldr	r1, [r6, #0]
 8001360:	4605      	mov	r5, r0
 8001362:	b911      	cbnz	r1, 800136a <sbrk_aligned+0x12>
 8001364:	f000 fb7a 	bl	8001a5c <_sbrk_r>
 8001368:	6030      	str	r0, [r6, #0]
 800136a:	4621      	mov	r1, r4
 800136c:	4628      	mov	r0, r5
 800136e:	f000 fb75 	bl	8001a5c <_sbrk_r>
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	d00a      	beq.n	800138c <sbrk_aligned+0x34>
 8001376:	1cc4      	adds	r4, r0, #3
 8001378:	f024 0403 	bic.w	r4, r4, #3
 800137c:	42a0      	cmp	r0, r4
 800137e:	d007      	beq.n	8001390 <sbrk_aligned+0x38>
 8001380:	1a21      	subs	r1, r4, r0
 8001382:	4628      	mov	r0, r5
 8001384:	f000 fb6a 	bl	8001a5c <_sbrk_r>
 8001388:	3001      	adds	r0, #1
 800138a:	d101      	bne.n	8001390 <sbrk_aligned+0x38>
 800138c:	f04f 34ff 	mov.w	r4, #4294967295
 8001390:	4620      	mov	r0, r4
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	2000009c 	.word	0x2000009c

08001398 <_malloc_r>:
 8001398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800139c:	1ccd      	adds	r5, r1, #3
 800139e:	f025 0503 	bic.w	r5, r5, #3
 80013a2:	3508      	adds	r5, #8
 80013a4:	2d0c      	cmp	r5, #12
 80013a6:	bf38      	it	cc
 80013a8:	250c      	movcc	r5, #12
 80013aa:	2d00      	cmp	r5, #0
 80013ac:	4607      	mov	r7, r0
 80013ae:	db01      	blt.n	80013b4 <_malloc_r+0x1c>
 80013b0:	42a9      	cmp	r1, r5
 80013b2:	d905      	bls.n	80013c0 <_malloc_r+0x28>
 80013b4:	230c      	movs	r3, #12
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	2600      	movs	r6, #0
 80013ba:	4630      	mov	r0, r6
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c0:	4e2e      	ldr	r6, [pc, #184]	; (800147c <_malloc_r+0xe4>)
 80013c2:	f000 fbf5 	bl	8001bb0 <__malloc_lock>
 80013c6:	6833      	ldr	r3, [r6, #0]
 80013c8:	461c      	mov	r4, r3
 80013ca:	bb34      	cbnz	r4, 800141a <_malloc_r+0x82>
 80013cc:	4629      	mov	r1, r5
 80013ce:	4638      	mov	r0, r7
 80013d0:	f7ff ffc2 	bl	8001358 <sbrk_aligned>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	4604      	mov	r4, r0
 80013d8:	d14d      	bne.n	8001476 <_malloc_r+0xde>
 80013da:	6834      	ldr	r4, [r6, #0]
 80013dc:	4626      	mov	r6, r4
 80013de:	2e00      	cmp	r6, #0
 80013e0:	d140      	bne.n	8001464 <_malloc_r+0xcc>
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	4631      	mov	r1, r6
 80013e6:	4638      	mov	r0, r7
 80013e8:	eb04 0803 	add.w	r8, r4, r3
 80013ec:	f000 fb36 	bl	8001a5c <_sbrk_r>
 80013f0:	4580      	cmp	r8, r0
 80013f2:	d13a      	bne.n	800146a <_malloc_r+0xd2>
 80013f4:	6821      	ldr	r1, [r4, #0]
 80013f6:	3503      	adds	r5, #3
 80013f8:	1a6d      	subs	r5, r5, r1
 80013fa:	f025 0503 	bic.w	r5, r5, #3
 80013fe:	3508      	adds	r5, #8
 8001400:	2d0c      	cmp	r5, #12
 8001402:	bf38      	it	cc
 8001404:	250c      	movcc	r5, #12
 8001406:	4629      	mov	r1, r5
 8001408:	4638      	mov	r0, r7
 800140a:	f7ff ffa5 	bl	8001358 <sbrk_aligned>
 800140e:	3001      	adds	r0, #1
 8001410:	d02b      	beq.n	800146a <_malloc_r+0xd2>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	442b      	add	r3, r5
 8001416:	6023      	str	r3, [r4, #0]
 8001418:	e00e      	b.n	8001438 <_malloc_r+0xa0>
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	1b52      	subs	r2, r2, r5
 800141e:	d41e      	bmi.n	800145e <_malloc_r+0xc6>
 8001420:	2a0b      	cmp	r2, #11
 8001422:	d916      	bls.n	8001452 <_malloc_r+0xba>
 8001424:	1961      	adds	r1, r4, r5
 8001426:	42a3      	cmp	r3, r4
 8001428:	6025      	str	r5, [r4, #0]
 800142a:	bf18      	it	ne
 800142c:	6059      	strne	r1, [r3, #4]
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	bf08      	it	eq
 8001432:	6031      	streq	r1, [r6, #0]
 8001434:	5162      	str	r2, [r4, r5]
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	4638      	mov	r0, r7
 800143a:	f104 060b 	add.w	r6, r4, #11
 800143e:	f000 fbbd 	bl	8001bbc <__malloc_unlock>
 8001442:	f026 0607 	bic.w	r6, r6, #7
 8001446:	1d23      	adds	r3, r4, #4
 8001448:	1af2      	subs	r2, r6, r3
 800144a:	d0b6      	beq.n	80013ba <_malloc_r+0x22>
 800144c:	1b9b      	subs	r3, r3, r6
 800144e:	50a3      	str	r3, [r4, r2]
 8001450:	e7b3      	b.n	80013ba <_malloc_r+0x22>
 8001452:	6862      	ldr	r2, [r4, #4]
 8001454:	42a3      	cmp	r3, r4
 8001456:	bf0c      	ite	eq
 8001458:	6032      	streq	r2, [r6, #0]
 800145a:	605a      	strne	r2, [r3, #4]
 800145c:	e7ec      	b.n	8001438 <_malloc_r+0xa0>
 800145e:	4623      	mov	r3, r4
 8001460:	6864      	ldr	r4, [r4, #4]
 8001462:	e7b2      	b.n	80013ca <_malloc_r+0x32>
 8001464:	4634      	mov	r4, r6
 8001466:	6876      	ldr	r6, [r6, #4]
 8001468:	e7b9      	b.n	80013de <_malloc_r+0x46>
 800146a:	230c      	movs	r3, #12
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4638      	mov	r0, r7
 8001470:	f000 fba4 	bl	8001bbc <__malloc_unlock>
 8001474:	e7a1      	b.n	80013ba <_malloc_r+0x22>
 8001476:	6025      	str	r5, [r4, #0]
 8001478:	e7de      	b.n	8001438 <_malloc_r+0xa0>
 800147a:	bf00      	nop
 800147c:	20000098 	.word	0x20000098

08001480 <__sfputc_r>:
 8001480:	6893      	ldr	r3, [r2, #8]
 8001482:	3b01      	subs	r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	b410      	push	{r4}
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	da08      	bge.n	800149e <__sfputc_r+0x1e>
 800148c:	6994      	ldr	r4, [r2, #24]
 800148e:	42a3      	cmp	r3, r4
 8001490:	db01      	blt.n	8001496 <__sfputc_r+0x16>
 8001492:	290a      	cmp	r1, #10
 8001494:	d103      	bne.n	800149e <__sfputc_r+0x1e>
 8001496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800149a:	f7ff bc31 	b.w	8000d00 <__swbuf_r>
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	1c58      	adds	r0, r3, #1
 80014a2:	6010      	str	r0, [r2, #0]
 80014a4:	7019      	strb	r1, [r3, #0]
 80014a6:	4608      	mov	r0, r1
 80014a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <__sfputs_r>:
 80014ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b0:	4606      	mov	r6, r0
 80014b2:	460f      	mov	r7, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	18d5      	adds	r5, r2, r3
 80014b8:	42ac      	cmp	r4, r5
 80014ba:	d101      	bne.n	80014c0 <__sfputs_r+0x12>
 80014bc:	2000      	movs	r0, #0
 80014be:	e007      	b.n	80014d0 <__sfputs_r+0x22>
 80014c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014c4:	463a      	mov	r2, r7
 80014c6:	4630      	mov	r0, r6
 80014c8:	f7ff ffda 	bl	8001480 <__sfputc_r>
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d1f3      	bne.n	80014b8 <__sfputs_r+0xa>
 80014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014d4 <_vfiprintf_r>:
 80014d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d8:	460d      	mov	r5, r1
 80014da:	b09d      	sub	sp, #116	; 0x74
 80014dc:	4614      	mov	r4, r2
 80014de:	4698      	mov	r8, r3
 80014e0:	4606      	mov	r6, r0
 80014e2:	b118      	cbz	r0, 80014ec <_vfiprintf_r+0x18>
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b90b      	cbnz	r3, 80014ec <_vfiprintf_r+0x18>
 80014e8:	f7ff fde4 	bl	80010b4 <__sinit>
 80014ec:	4b89      	ldr	r3, [pc, #548]	; (8001714 <_vfiprintf_r+0x240>)
 80014ee:	429d      	cmp	r5, r3
 80014f0:	d11b      	bne.n	800152a <_vfiprintf_r+0x56>
 80014f2:	6875      	ldr	r5, [r6, #4]
 80014f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014f6:	07d9      	lsls	r1, r3, #31
 80014f8:	d405      	bmi.n	8001506 <_vfiprintf_r+0x32>
 80014fa:	89ab      	ldrh	r3, [r5, #12]
 80014fc:	059a      	lsls	r2, r3, #22
 80014fe:	d402      	bmi.n	8001506 <_vfiprintf_r+0x32>
 8001500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001502:	f7ff fe75 	bl	80011f0 <__retarget_lock_acquire_recursive>
 8001506:	89ab      	ldrh	r3, [r5, #12]
 8001508:	071b      	lsls	r3, r3, #28
 800150a:	d501      	bpl.n	8001510 <_vfiprintf_r+0x3c>
 800150c:	692b      	ldr	r3, [r5, #16]
 800150e:	b9eb      	cbnz	r3, 800154c <_vfiprintf_r+0x78>
 8001510:	4629      	mov	r1, r5
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff fc46 	bl	8000da4 <__swsetup_r>
 8001518:	b1c0      	cbz	r0, 800154c <_vfiprintf_r+0x78>
 800151a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800151c:	07dc      	lsls	r4, r3, #31
 800151e:	d50e      	bpl.n	800153e <_vfiprintf_r+0x6a>
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	b01d      	add	sp, #116	; 0x74
 8001526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800152a:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <_vfiprintf_r+0x244>)
 800152c:	429d      	cmp	r5, r3
 800152e:	d101      	bne.n	8001534 <_vfiprintf_r+0x60>
 8001530:	68b5      	ldr	r5, [r6, #8]
 8001532:	e7df      	b.n	80014f4 <_vfiprintf_r+0x20>
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <_vfiprintf_r+0x248>)
 8001536:	429d      	cmp	r5, r3
 8001538:	bf08      	it	eq
 800153a:	68f5      	ldreq	r5, [r6, #12]
 800153c:	e7da      	b.n	80014f4 <_vfiprintf_r+0x20>
 800153e:	89ab      	ldrh	r3, [r5, #12]
 8001540:	0598      	lsls	r0, r3, #22
 8001542:	d4ed      	bmi.n	8001520 <_vfiprintf_r+0x4c>
 8001544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001546:	f7ff fe54 	bl	80011f2 <__retarget_lock_release_recursive>
 800154a:	e7e9      	b.n	8001520 <_vfiprintf_r+0x4c>
 800154c:	2300      	movs	r3, #0
 800154e:	9309      	str	r3, [sp, #36]	; 0x24
 8001550:	2320      	movs	r3, #32
 8001552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001556:	f8cd 800c 	str.w	r8, [sp, #12]
 800155a:	2330      	movs	r3, #48	; 0x30
 800155c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001720 <_vfiprintf_r+0x24c>
 8001560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001564:	f04f 0901 	mov.w	r9, #1
 8001568:	4623      	mov	r3, r4
 800156a:	469a      	mov	sl, r3
 800156c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001570:	b10a      	cbz	r2, 8001576 <_vfiprintf_r+0xa2>
 8001572:	2a25      	cmp	r2, #37	; 0x25
 8001574:	d1f9      	bne.n	800156a <_vfiprintf_r+0x96>
 8001576:	ebba 0b04 	subs.w	fp, sl, r4
 800157a:	d00b      	beq.n	8001594 <_vfiprintf_r+0xc0>
 800157c:	465b      	mov	r3, fp
 800157e:	4622      	mov	r2, r4
 8001580:	4629      	mov	r1, r5
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff ff93 	bl	80014ae <__sfputs_r>
 8001588:	3001      	adds	r0, #1
 800158a:	f000 80aa 	beq.w	80016e2 <_vfiprintf_r+0x20e>
 800158e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001590:	445a      	add	r2, fp
 8001592:	9209      	str	r2, [sp, #36]	; 0x24
 8001594:	f89a 3000 	ldrb.w	r3, [sl]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <_vfiprintf_r+0x20e>
 800159e:	2300      	movs	r3, #0
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015a8:	f10a 0a01 	add.w	sl, sl, #1
 80015ac:	9304      	str	r3, [sp, #16]
 80015ae:	9307      	str	r3, [sp, #28]
 80015b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015b4:	931a      	str	r3, [sp, #104]	; 0x68
 80015b6:	4654      	mov	r4, sl
 80015b8:	2205      	movs	r2, #5
 80015ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015be:	4858      	ldr	r0, [pc, #352]	; (8001720 <_vfiprintf_r+0x24c>)
 80015c0:	f7fe fe2e 	bl	8000220 <memchr>
 80015c4:	9a04      	ldr	r2, [sp, #16]
 80015c6:	b9d8      	cbnz	r0, 8001600 <_vfiprintf_r+0x12c>
 80015c8:	06d1      	lsls	r1, r2, #27
 80015ca:	bf44      	itt	mi
 80015cc:	2320      	movmi	r3, #32
 80015ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015d2:	0713      	lsls	r3, r2, #28
 80015d4:	bf44      	itt	mi
 80015d6:	232b      	movmi	r3, #43	; 0x2b
 80015d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015dc:	f89a 3000 	ldrb.w	r3, [sl]
 80015e0:	2b2a      	cmp	r3, #42	; 0x2a
 80015e2:	d015      	beq.n	8001610 <_vfiprintf_r+0x13c>
 80015e4:	9a07      	ldr	r2, [sp, #28]
 80015e6:	4654      	mov	r4, sl
 80015e8:	2000      	movs	r0, #0
 80015ea:	f04f 0c0a 	mov.w	ip, #10
 80015ee:	4621      	mov	r1, r4
 80015f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015f4:	3b30      	subs	r3, #48	; 0x30
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	d94e      	bls.n	8001698 <_vfiprintf_r+0x1c4>
 80015fa:	b1b0      	cbz	r0, 800162a <_vfiprintf_r+0x156>
 80015fc:	9207      	str	r2, [sp, #28]
 80015fe:	e014      	b.n	800162a <_vfiprintf_r+0x156>
 8001600:	eba0 0308 	sub.w	r3, r0, r8
 8001604:	fa09 f303 	lsl.w	r3, r9, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	46a2      	mov	sl, r4
 800160e:	e7d2      	b.n	80015b6 <_vfiprintf_r+0xe2>
 8001610:	9b03      	ldr	r3, [sp, #12]
 8001612:	1d19      	adds	r1, r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	9103      	str	r1, [sp, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	bfbb      	ittet	lt
 800161c:	425b      	neglt	r3, r3
 800161e:	f042 0202 	orrlt.w	r2, r2, #2
 8001622:	9307      	strge	r3, [sp, #28]
 8001624:	9307      	strlt	r3, [sp, #28]
 8001626:	bfb8      	it	lt
 8001628:	9204      	strlt	r2, [sp, #16]
 800162a:	7823      	ldrb	r3, [r4, #0]
 800162c:	2b2e      	cmp	r3, #46	; 0x2e
 800162e:	d10c      	bne.n	800164a <_vfiprintf_r+0x176>
 8001630:	7863      	ldrb	r3, [r4, #1]
 8001632:	2b2a      	cmp	r3, #42	; 0x2a
 8001634:	d135      	bne.n	80016a2 <_vfiprintf_r+0x1ce>
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bfb8      	it	lt
 8001642:	f04f 33ff 	movlt.w	r3, #4294967295
 8001646:	3402      	adds	r4, #2
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001730 <_vfiprintf_r+0x25c>
 800164e:	7821      	ldrb	r1, [r4, #0]
 8001650:	2203      	movs	r2, #3
 8001652:	4650      	mov	r0, sl
 8001654:	f7fe fde4 	bl	8000220 <memchr>
 8001658:	b140      	cbz	r0, 800166c <_vfiprintf_r+0x198>
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	eba0 000a 	sub.w	r0, r0, sl
 8001660:	fa03 f000 	lsl.w	r0, r3, r0
 8001664:	9b04      	ldr	r3, [sp, #16]
 8001666:	4303      	orrs	r3, r0
 8001668:	3401      	adds	r4, #1
 800166a:	9304      	str	r3, [sp, #16]
 800166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001670:	482c      	ldr	r0, [pc, #176]	; (8001724 <_vfiprintf_r+0x250>)
 8001672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001676:	2206      	movs	r2, #6
 8001678:	f7fe fdd2 	bl	8000220 <memchr>
 800167c:	2800      	cmp	r0, #0
 800167e:	d03f      	beq.n	8001700 <_vfiprintf_r+0x22c>
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <_vfiprintf_r+0x254>)
 8001682:	bb1b      	cbnz	r3, 80016cc <_vfiprintf_r+0x1f8>
 8001684:	9b03      	ldr	r3, [sp, #12]
 8001686:	3307      	adds	r3, #7
 8001688:	f023 0307 	bic.w	r3, r3, #7
 800168c:	3308      	adds	r3, #8
 800168e:	9303      	str	r3, [sp, #12]
 8001690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001692:	443b      	add	r3, r7
 8001694:	9309      	str	r3, [sp, #36]	; 0x24
 8001696:	e767      	b.n	8001568 <_vfiprintf_r+0x94>
 8001698:	fb0c 3202 	mla	r2, ip, r2, r3
 800169c:	460c      	mov	r4, r1
 800169e:	2001      	movs	r0, #1
 80016a0:	e7a5      	b.n	80015ee <_vfiprintf_r+0x11a>
 80016a2:	2300      	movs	r3, #0
 80016a4:	3401      	adds	r4, #1
 80016a6:	9305      	str	r3, [sp, #20]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 0c0a 	mov.w	ip, #10
 80016ae:	4620      	mov	r0, r4
 80016b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016b4:	3a30      	subs	r2, #48	; 0x30
 80016b6:	2a09      	cmp	r2, #9
 80016b8:	d903      	bls.n	80016c2 <_vfiprintf_r+0x1ee>
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0c5      	beq.n	800164a <_vfiprintf_r+0x176>
 80016be:	9105      	str	r1, [sp, #20]
 80016c0:	e7c3      	b.n	800164a <_vfiprintf_r+0x176>
 80016c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80016c6:	4604      	mov	r4, r0
 80016c8:	2301      	movs	r3, #1
 80016ca:	e7f0      	b.n	80016ae <_vfiprintf_r+0x1da>
 80016cc:	ab03      	add	r3, sp, #12
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	462a      	mov	r2, r5
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <_vfiprintf_r+0x258>)
 80016d4:	a904      	add	r1, sp, #16
 80016d6:	4630      	mov	r0, r6
 80016d8:	f3af 8000 	nop.w
 80016dc:	4607      	mov	r7, r0
 80016de:	1c78      	adds	r0, r7, #1
 80016e0:	d1d6      	bne.n	8001690 <_vfiprintf_r+0x1bc>
 80016e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016e4:	07d9      	lsls	r1, r3, #31
 80016e6:	d405      	bmi.n	80016f4 <_vfiprintf_r+0x220>
 80016e8:	89ab      	ldrh	r3, [r5, #12]
 80016ea:	059a      	lsls	r2, r3, #22
 80016ec:	d402      	bmi.n	80016f4 <_vfiprintf_r+0x220>
 80016ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016f0:	f7ff fd7f 	bl	80011f2 <__retarget_lock_release_recursive>
 80016f4:	89ab      	ldrh	r3, [r5, #12]
 80016f6:	065b      	lsls	r3, r3, #25
 80016f8:	f53f af12 	bmi.w	8001520 <_vfiprintf_r+0x4c>
 80016fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016fe:	e711      	b.n	8001524 <_vfiprintf_r+0x50>
 8001700:	ab03      	add	r3, sp, #12
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	462a      	mov	r2, r5
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <_vfiprintf_r+0x258>)
 8001708:	a904      	add	r1, sp, #16
 800170a:	4630      	mov	r0, r6
 800170c:	f000 f880 	bl	8001810 <_printf_i>
 8001710:	e7e4      	b.n	80016dc <_vfiprintf_r+0x208>
 8001712:	bf00      	nop
 8001714:	08001c74 	.word	0x08001c74
 8001718:	08001c94 	.word	0x08001c94
 800171c:	08001c54 	.word	0x08001c54
 8001720:	08001cb4 	.word	0x08001cb4
 8001724:	08001cbe 	.word	0x08001cbe
 8001728:	00000000 	.word	0x00000000
 800172c:	080014af 	.word	0x080014af
 8001730:	08001cba 	.word	0x08001cba

08001734 <_printf_common>:
 8001734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001738:	4616      	mov	r6, r2
 800173a:	4699      	mov	r9, r3
 800173c:	688a      	ldr	r2, [r1, #8]
 800173e:	690b      	ldr	r3, [r1, #16]
 8001740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001744:	4293      	cmp	r3, r2
 8001746:	bfb8      	it	lt
 8001748:	4613      	movlt	r3, r2
 800174a:	6033      	str	r3, [r6, #0]
 800174c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001750:	4607      	mov	r7, r0
 8001752:	460c      	mov	r4, r1
 8001754:	b10a      	cbz	r2, 800175a <_printf_common+0x26>
 8001756:	3301      	adds	r3, #1
 8001758:	6033      	str	r3, [r6, #0]
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	0699      	lsls	r1, r3, #26
 800175e:	bf42      	ittt	mi
 8001760:	6833      	ldrmi	r3, [r6, #0]
 8001762:	3302      	addmi	r3, #2
 8001764:	6033      	strmi	r3, [r6, #0]
 8001766:	6825      	ldr	r5, [r4, #0]
 8001768:	f015 0506 	ands.w	r5, r5, #6
 800176c:	d106      	bne.n	800177c <_printf_common+0x48>
 800176e:	f104 0a19 	add.w	sl, r4, #25
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	6832      	ldr	r2, [r6, #0]
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	42ab      	cmp	r3, r5
 800177a:	dc26      	bgt.n	80017ca <_printf_common+0x96>
 800177c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	bf18      	it	ne
 8001786:	2301      	movne	r3, #1
 8001788:	0692      	lsls	r2, r2, #26
 800178a:	d42b      	bmi.n	80017e4 <_printf_common+0xb0>
 800178c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001790:	4649      	mov	r1, r9
 8001792:	4638      	mov	r0, r7
 8001794:	47c0      	blx	r8
 8001796:	3001      	adds	r0, #1
 8001798:	d01e      	beq.n	80017d8 <_printf_common+0xa4>
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	68e5      	ldr	r5, [r4, #12]
 800179e:	6832      	ldr	r2, [r6, #0]
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	bf08      	it	eq
 80017a8:	1aad      	subeq	r5, r5, r2
 80017aa:	68a3      	ldr	r3, [r4, #8]
 80017ac:	6922      	ldr	r2, [r4, #16]
 80017ae:	bf0c      	ite	eq
 80017b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017b4:	2500      	movne	r5, #0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	bfc4      	itt	gt
 80017ba:	1a9b      	subgt	r3, r3, r2
 80017bc:	18ed      	addgt	r5, r5, r3
 80017be:	2600      	movs	r6, #0
 80017c0:	341a      	adds	r4, #26
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d11a      	bne.n	80017fc <_printf_common+0xc8>
 80017c6:	2000      	movs	r0, #0
 80017c8:	e008      	b.n	80017dc <_printf_common+0xa8>
 80017ca:	2301      	movs	r3, #1
 80017cc:	4652      	mov	r2, sl
 80017ce:	4649      	mov	r1, r9
 80017d0:	4638      	mov	r0, r7
 80017d2:	47c0      	blx	r8
 80017d4:	3001      	adds	r0, #1
 80017d6:	d103      	bne.n	80017e0 <_printf_common+0xac>
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7c6      	b.n	8001772 <_printf_common+0x3e>
 80017e4:	18e1      	adds	r1, r4, r3
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	2030      	movs	r0, #48	; 0x30
 80017ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017ee:	4422      	add	r2, r4
 80017f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017f8:	3302      	adds	r3, #2
 80017fa:	e7c7      	b.n	800178c <_printf_common+0x58>
 80017fc:	2301      	movs	r3, #1
 80017fe:	4622      	mov	r2, r4
 8001800:	4649      	mov	r1, r9
 8001802:	4638      	mov	r0, r7
 8001804:	47c0      	blx	r8
 8001806:	3001      	adds	r0, #1
 8001808:	d0e6      	beq.n	80017d8 <_printf_common+0xa4>
 800180a:	3601      	adds	r6, #1
 800180c:	e7d9      	b.n	80017c2 <_printf_common+0x8e>
	...

08001810 <_printf_i>:
 8001810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001814:	7e0f      	ldrb	r7, [r1, #24]
 8001816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001818:	2f78      	cmp	r7, #120	; 0x78
 800181a:	4691      	mov	r9, r2
 800181c:	4680      	mov	r8, r0
 800181e:	460c      	mov	r4, r1
 8001820:	469a      	mov	sl, r3
 8001822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001826:	d807      	bhi.n	8001838 <_printf_i+0x28>
 8001828:	2f62      	cmp	r7, #98	; 0x62
 800182a:	d80a      	bhi.n	8001842 <_printf_i+0x32>
 800182c:	2f00      	cmp	r7, #0
 800182e:	f000 80d8 	beq.w	80019e2 <_printf_i+0x1d2>
 8001832:	2f58      	cmp	r7, #88	; 0x58
 8001834:	f000 80a3 	beq.w	800197e <_printf_i+0x16e>
 8001838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800183c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001840:	e03a      	b.n	80018b8 <_printf_i+0xa8>
 8001842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001846:	2b15      	cmp	r3, #21
 8001848:	d8f6      	bhi.n	8001838 <_printf_i+0x28>
 800184a:	a101      	add	r1, pc, #4	; (adr r1, 8001850 <_printf_i+0x40>)
 800184c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001850:	080018a9 	.word	0x080018a9
 8001854:	080018bd 	.word	0x080018bd
 8001858:	08001839 	.word	0x08001839
 800185c:	08001839 	.word	0x08001839
 8001860:	08001839 	.word	0x08001839
 8001864:	08001839 	.word	0x08001839
 8001868:	080018bd 	.word	0x080018bd
 800186c:	08001839 	.word	0x08001839
 8001870:	08001839 	.word	0x08001839
 8001874:	08001839 	.word	0x08001839
 8001878:	08001839 	.word	0x08001839
 800187c:	080019c9 	.word	0x080019c9
 8001880:	080018ed 	.word	0x080018ed
 8001884:	080019ab 	.word	0x080019ab
 8001888:	08001839 	.word	0x08001839
 800188c:	08001839 	.word	0x08001839
 8001890:	080019eb 	.word	0x080019eb
 8001894:	08001839 	.word	0x08001839
 8001898:	080018ed 	.word	0x080018ed
 800189c:	08001839 	.word	0x08001839
 80018a0:	08001839 	.word	0x08001839
 80018a4:	080019b3 	.word	0x080019b3
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	602a      	str	r2, [r5, #0]
 80018b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0a3      	b.n	8001a04 <_printf_i+0x1f4>
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	6829      	ldr	r1, [r5, #0]
 80018c0:	0606      	lsls	r6, r0, #24
 80018c2:	f101 0304 	add.w	r3, r1, #4
 80018c6:	d50a      	bpl.n	80018de <_printf_i+0xce>
 80018c8:	680e      	ldr	r6, [r1, #0]
 80018ca:	602b      	str	r3, [r5, #0]
 80018cc:	2e00      	cmp	r6, #0
 80018ce:	da03      	bge.n	80018d8 <_printf_i+0xc8>
 80018d0:	232d      	movs	r3, #45	; 0x2d
 80018d2:	4276      	negs	r6, r6
 80018d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018d8:	485e      	ldr	r0, [pc, #376]	; (8001a54 <_printf_i+0x244>)
 80018da:	230a      	movs	r3, #10
 80018dc:	e019      	b.n	8001912 <_printf_i+0x102>
 80018de:	680e      	ldr	r6, [r1, #0]
 80018e0:	602b      	str	r3, [r5, #0]
 80018e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018e6:	bf18      	it	ne
 80018e8:	b236      	sxthne	r6, r6
 80018ea:	e7ef      	b.n	80018cc <_printf_i+0xbc>
 80018ec:	682b      	ldr	r3, [r5, #0]
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	1d19      	adds	r1, r3, #4
 80018f2:	6029      	str	r1, [r5, #0]
 80018f4:	0601      	lsls	r1, r0, #24
 80018f6:	d501      	bpl.n	80018fc <_printf_i+0xec>
 80018f8:	681e      	ldr	r6, [r3, #0]
 80018fa:	e002      	b.n	8001902 <_printf_i+0xf2>
 80018fc:	0646      	lsls	r6, r0, #25
 80018fe:	d5fb      	bpl.n	80018f8 <_printf_i+0xe8>
 8001900:	881e      	ldrh	r6, [r3, #0]
 8001902:	4854      	ldr	r0, [pc, #336]	; (8001a54 <_printf_i+0x244>)
 8001904:	2f6f      	cmp	r7, #111	; 0x6f
 8001906:	bf0c      	ite	eq
 8001908:	2308      	moveq	r3, #8
 800190a:	230a      	movne	r3, #10
 800190c:	2100      	movs	r1, #0
 800190e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001912:	6865      	ldr	r5, [r4, #4]
 8001914:	60a5      	str	r5, [r4, #8]
 8001916:	2d00      	cmp	r5, #0
 8001918:	bfa2      	ittt	ge
 800191a:	6821      	ldrge	r1, [r4, #0]
 800191c:	f021 0104 	bicge.w	r1, r1, #4
 8001920:	6021      	strge	r1, [r4, #0]
 8001922:	b90e      	cbnz	r6, 8001928 <_printf_i+0x118>
 8001924:	2d00      	cmp	r5, #0
 8001926:	d04d      	beq.n	80019c4 <_printf_i+0x1b4>
 8001928:	4615      	mov	r5, r2
 800192a:	fbb6 f1f3 	udiv	r1, r6, r3
 800192e:	fb03 6711 	mls	r7, r3, r1, r6
 8001932:	5dc7      	ldrb	r7, [r0, r7]
 8001934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001938:	4637      	mov	r7, r6
 800193a:	42bb      	cmp	r3, r7
 800193c:	460e      	mov	r6, r1
 800193e:	d9f4      	bls.n	800192a <_printf_i+0x11a>
 8001940:	2b08      	cmp	r3, #8
 8001942:	d10b      	bne.n	800195c <_printf_i+0x14c>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	07de      	lsls	r6, r3, #31
 8001948:	d508      	bpl.n	800195c <_printf_i+0x14c>
 800194a:	6923      	ldr	r3, [r4, #16]
 800194c:	6861      	ldr	r1, [r4, #4]
 800194e:	4299      	cmp	r1, r3
 8001950:	bfde      	ittt	le
 8001952:	2330      	movle	r3, #48	; 0x30
 8001954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800195c:	1b52      	subs	r2, r2, r5
 800195e:	6122      	str	r2, [r4, #16]
 8001960:	f8cd a000 	str.w	sl, [sp]
 8001964:	464b      	mov	r3, r9
 8001966:	aa03      	add	r2, sp, #12
 8001968:	4621      	mov	r1, r4
 800196a:	4640      	mov	r0, r8
 800196c:	f7ff fee2 	bl	8001734 <_printf_common>
 8001970:	3001      	adds	r0, #1
 8001972:	d14c      	bne.n	8001a0e <_printf_i+0x1fe>
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	b004      	add	sp, #16
 800197a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800197e:	4835      	ldr	r0, [pc, #212]	; (8001a54 <_printf_i+0x244>)
 8001980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001984:	6829      	ldr	r1, [r5, #0]
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	f851 6b04 	ldr.w	r6, [r1], #4
 800198c:	6029      	str	r1, [r5, #0]
 800198e:	061d      	lsls	r5, r3, #24
 8001990:	d514      	bpl.n	80019bc <_printf_i+0x1ac>
 8001992:	07df      	lsls	r7, r3, #31
 8001994:	bf44      	itt	mi
 8001996:	f043 0320 	orrmi.w	r3, r3, #32
 800199a:	6023      	strmi	r3, [r4, #0]
 800199c:	b91e      	cbnz	r6, 80019a6 <_printf_i+0x196>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f023 0320 	bic.w	r3, r3, #32
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	2310      	movs	r3, #16
 80019a8:	e7b0      	b.n	800190c <_printf_i+0xfc>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	2378      	movs	r3, #120	; 0x78
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <_printf_i+0x248>)
 80019b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019ba:	e7e3      	b.n	8001984 <_printf_i+0x174>
 80019bc:	0659      	lsls	r1, r3, #25
 80019be:	bf48      	it	mi
 80019c0:	b2b6      	uxthmi	r6, r6
 80019c2:	e7e6      	b.n	8001992 <_printf_i+0x182>
 80019c4:	4615      	mov	r5, r2
 80019c6:	e7bb      	b.n	8001940 <_printf_i+0x130>
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	6826      	ldr	r6, [r4, #0]
 80019cc:	6961      	ldr	r1, [r4, #20]
 80019ce:	1d18      	adds	r0, r3, #4
 80019d0:	6028      	str	r0, [r5, #0]
 80019d2:	0635      	lsls	r5, r6, #24
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	d501      	bpl.n	80019dc <_printf_i+0x1cc>
 80019d8:	6019      	str	r1, [r3, #0]
 80019da:	e002      	b.n	80019e2 <_printf_i+0x1d2>
 80019dc:	0670      	lsls	r0, r6, #25
 80019de:	d5fb      	bpl.n	80019d8 <_printf_i+0x1c8>
 80019e0:	8019      	strh	r1, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	6123      	str	r3, [r4, #16]
 80019e6:	4615      	mov	r5, r2
 80019e8:	e7ba      	b.n	8001960 <_printf_i+0x150>
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	1d1a      	adds	r2, r3, #4
 80019ee:	602a      	str	r2, [r5, #0]
 80019f0:	681d      	ldr	r5, [r3, #0]
 80019f2:	6862      	ldr	r2, [r4, #4]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4628      	mov	r0, r5
 80019f8:	f7fe fc12 	bl	8000220 <memchr>
 80019fc:	b108      	cbz	r0, 8001a02 <_printf_i+0x1f2>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	6060      	str	r0, [r4, #4]
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	6123      	str	r3, [r4, #16]
 8001a06:	2300      	movs	r3, #0
 8001a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a0c:	e7a8      	b.n	8001960 <_printf_i+0x150>
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	462a      	mov	r2, r5
 8001a12:	4649      	mov	r1, r9
 8001a14:	4640      	mov	r0, r8
 8001a16:	47d0      	blx	sl
 8001a18:	3001      	adds	r0, #1
 8001a1a:	d0ab      	beq.n	8001974 <_printf_i+0x164>
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	079b      	lsls	r3, r3, #30
 8001a20:	d413      	bmi.n	8001a4a <_printf_i+0x23a>
 8001a22:	68e0      	ldr	r0, [r4, #12]
 8001a24:	9b03      	ldr	r3, [sp, #12]
 8001a26:	4298      	cmp	r0, r3
 8001a28:	bfb8      	it	lt
 8001a2a:	4618      	movlt	r0, r3
 8001a2c:	e7a4      	b.n	8001978 <_printf_i+0x168>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4632      	mov	r2, r6
 8001a32:	4649      	mov	r1, r9
 8001a34:	4640      	mov	r0, r8
 8001a36:	47d0      	blx	sl
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d09b      	beq.n	8001974 <_printf_i+0x164>
 8001a3c:	3501      	adds	r5, #1
 8001a3e:	68e3      	ldr	r3, [r4, #12]
 8001a40:	9903      	ldr	r1, [sp, #12]
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	42ab      	cmp	r3, r5
 8001a46:	dcf2      	bgt.n	8001a2e <_printf_i+0x21e>
 8001a48:	e7eb      	b.n	8001a22 <_printf_i+0x212>
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	f104 0619 	add.w	r6, r4, #25
 8001a50:	e7f5      	b.n	8001a3e <_printf_i+0x22e>
 8001a52:	bf00      	nop
 8001a54:	08001cc5 	.word	0x08001cc5
 8001a58:	08001cd6 	.word	0x08001cd6

08001a5c <_sbrk_r>:
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	4d06      	ldr	r5, [pc, #24]	; (8001a78 <_sbrk_r+0x1c>)
 8001a60:	2300      	movs	r3, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	f7fe ffa0 	bl	80009ac <_sbrk>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_sbrk_r+0x1a>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_sbrk_r+0x1a>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	200000a0 	.word	0x200000a0

08001a7c <__sread>:
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	460c      	mov	r4, r1
 8001a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a84:	f000 f8a0 	bl	8001bc8 <_read_r>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	bfab      	itete	ge
 8001a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a90:	181b      	addge	r3, r3, r0
 8001a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a96:	bfac      	ite	ge
 8001a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a9a:	81a3      	strhlt	r3, [r4, #12]
 8001a9c:	bd10      	pop	{r4, pc}

08001a9e <__swrite>:
 8001a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa2:	461f      	mov	r7, r3
 8001aa4:	898b      	ldrh	r3, [r1, #12]
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4616      	mov	r6, r2
 8001aae:	d505      	bpl.n	8001abc <__swrite+0x1e>
 8001ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f000 f868 	bl	8001b8c <_lseek_r>
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac6:	81a3      	strh	r3, [r4, #12]
 8001ac8:	4632      	mov	r2, r6
 8001aca:	463b      	mov	r3, r7
 8001acc:	4628      	mov	r0, r5
 8001ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	f000 b817 	b.w	8001b04 <_write_r>

08001ad6 <__sseek>:
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	460c      	mov	r4, r1
 8001ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ade:	f000 f855 	bl	8001b8c <_lseek_r>
 8001ae2:	1c43      	adds	r3, r0, #1
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	bf15      	itete	ne
 8001ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001af2:	81a3      	strheq	r3, [r4, #12]
 8001af4:	bf18      	it	ne
 8001af6:	81a3      	strhne	r3, [r4, #12]
 8001af8:	bd10      	pop	{r4, pc}

08001afa <__sclose>:
 8001afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afe:	f000 b813 	b.w	8001b28 <_close_r>
	...

08001b04 <_write_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	4d07      	ldr	r5, [pc, #28]	; (8001b24 <_write_r+0x20>)
 8001b08:	4604      	mov	r4, r0
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	602a      	str	r2, [r5, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f7fe feda 	bl	80008cc <_write>
 8001b18:	1c43      	adds	r3, r0, #1
 8001b1a:	d102      	bne.n	8001b22 <_write_r+0x1e>
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	b103      	cbz	r3, 8001b22 <_write_r+0x1e>
 8001b20:	6023      	str	r3, [r4, #0]
 8001b22:	bd38      	pop	{r3, r4, r5, pc}
 8001b24:	200000a0 	.word	0x200000a0

08001b28 <_close_r>:
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	4d06      	ldr	r5, [pc, #24]	; (8001b44 <_close_r+0x1c>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	f7fe ff05 	bl	8000942 <_close>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	d102      	bne.n	8001b42 <_close_r+0x1a>
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	b103      	cbz	r3, 8001b42 <_close_r+0x1a>
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
 8001b44:	200000a0 	.word	0x200000a0

08001b48 <_fstat_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	4d07      	ldr	r5, [pc, #28]	; (8001b68 <_fstat_r+0x20>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	602b      	str	r3, [r5, #0]
 8001b56:	f7fe ff00 	bl	800095a <_fstat>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d102      	bne.n	8001b64 <_fstat_r+0x1c>
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	b103      	cbz	r3, 8001b64 <_fstat_r+0x1c>
 8001b62:	6023      	str	r3, [r4, #0]
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	bf00      	nop
 8001b68:	200000a0 	.word	0x200000a0

08001b6c <_isatty_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4d06      	ldr	r5, [pc, #24]	; (8001b88 <_isatty_r+0x1c>)
 8001b70:	2300      	movs	r3, #0
 8001b72:	4604      	mov	r4, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	f7fe feff 	bl	800097a <_isatty>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d102      	bne.n	8001b86 <_isatty_r+0x1a>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	b103      	cbz	r3, 8001b86 <_isatty_r+0x1a>
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	200000a0 	.word	0x200000a0

08001b8c <_lseek_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4d07      	ldr	r5, [pc, #28]	; (8001bac <_lseek_r+0x20>)
 8001b90:	4604      	mov	r4, r0
 8001b92:	4608      	mov	r0, r1
 8001b94:	4611      	mov	r1, r2
 8001b96:	2200      	movs	r2, #0
 8001b98:	602a      	str	r2, [r5, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f7fe fef8 	bl	8000990 <_lseek>
 8001ba0:	1c43      	adds	r3, r0, #1
 8001ba2:	d102      	bne.n	8001baa <_lseek_r+0x1e>
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	b103      	cbz	r3, 8001baa <_lseek_r+0x1e>
 8001ba8:	6023      	str	r3, [r4, #0]
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
 8001bac:	200000a0 	.word	0x200000a0

08001bb0 <__malloc_lock>:
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <__malloc_lock+0x8>)
 8001bb2:	f7ff bb1d 	b.w	80011f0 <__retarget_lock_acquire_recursive>
 8001bb6:	bf00      	nop
 8001bb8:	20000094 	.word	0x20000094

08001bbc <__malloc_unlock>:
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__malloc_unlock+0x8>)
 8001bbe:	f7ff bb18 	b.w	80011f2 <__retarget_lock_release_recursive>
 8001bc2:	bf00      	nop
 8001bc4:	20000094 	.word	0x20000094

08001bc8 <_read_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d07      	ldr	r5, [pc, #28]	; (8001be8 <_read_r+0x20>)
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4608      	mov	r0, r1
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	602a      	str	r2, [r5, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7fe fe96 	bl	8000908 <_read>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_read_r+0x1e>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_read_r+0x1e>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200000a0 	.word	0x200000a0

08001bec <_init>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr

08001bf8 <_fini>:
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfa:	bf00      	nop
 8001bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfe:	bc08      	pop	{r3}
 8001c00:	469e      	mov	lr, r3
 8001c02:	4770      	bx	lr
